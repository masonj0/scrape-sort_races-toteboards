{
    "filepath": "./launch_and_hunt.py",
    "content": "import requests\nimport time\nimport subprocess\nimport sys\nimport socket\nfrom datetime import datetime\n\ndef find_free_port():\n    \"\"\"Finds and returns an available port on the host.\"\"\"\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.bind(('', 0))\n        return s.getsockname()[1]\n\ndef launch_and_hunt():\n    api_process = None\n    cockpit_process = None\n    try:\n        # --- PHASE 1: Port Hunting ---\n        print(\"=\"*40)\n        print(\"OPERATION: PORT HUNTER - INITIATED\".center(40))\n        print(\"Searching for available ports...\")\n        api_port = find_free_port()\n        cockpit_port = find_free_port()\n        print(f\"  - API Server will use port: {api_port}\")\n        print(f\"  - Cockpit Server will use port: {cockpit_port}\")\n        print(\"=\"*40)\n\n        # --- PHASE 2: Dynamic Server Launch ---\n        api_url = f\"http://127.0.0.1:{api_port}\"\n        status_url = f\"{api_url}/api/v1/adapters/status\"\n\n        print(\"\\nLaunching application servers...\")\n\n        # Command to launch the API server on the found port\n        api_command = [\n            \"uvicorn\",\n            \"src.checkmate_v7.api:app\",\n            \"--host\", \"0.0.0.0\",\n            \"--port\", str(api_port)\n        ]\n        api_process = subprocess.Popen(api_command)\n\n        # Command to launch the Cockpit on its found port, pointing to the new API port\n        cockpit_command = [\n            \"python\",\n            \"src/checkmate_v7/cockpit.py\",\n            \"--port\", str(cockpit_port),\n            \"--api-url\", api_url\n        ]\n        cockpit_process = subprocess.Popen(cockpit_command)\n\n        # --- PHASE 3: The Hunt ---\n        SERVER_STARTUP_TIME_SECONDS = 15\n        print(f\"\\nServers launched. Waiting {SERVER_STARTUP_TIME_SECONDS}s for initialization...\")\n        time.sleep(SERVER_STARTUP_TIME_SECONDS)\n\n        HUNT_DURATION_SECONDS = 900\n        POLL_INTERVAL_SECONDS = 60\n        start_time = time.time()\n\n        print(\"\\n\" + \"=\"*40)\n        print(\"\ud83d\udd25 HUNT FOR HOT SIGNAL - INITIATED \ud83d\udd25\".center(40))\n        print(\"=\"*40)\n\n        while time.time() - start_time < HUNT_DURATION_SECONDS:\n            timestamp = datetime.now().strftime('%H:%M:%S')\n            print(f\"[{timestamp}] Polling for hot signal at {status_url}...\")\n\n            try:\n                response = requests.get(status_url, timeout=15)\n                if response.status_code == 200:\n                    statuses = response.json()\n                    for adapter in statuses:\n                        if adapter.get(\"status\") == \"OK\" and adapter.get(\"races_found\", 0) > 0:\n                            print(\"\\n\" + \"=\"*40)\n                            print(\"\ud83d\udd25 HOT SIGNAL DETECTED! \ud83d\udd25\".center(40))\n                            print(\"=\"*40)\n                            print(f\"  - Adapter: {adapter.get('adapter_id')}\")\n                            print(f\"  - Races Found: {adapter.get('races_found')}\")\n                            print(f\"  - Status: {adapter.get('status')}\")\n                            print(f\"  - Notes: {adapter.get('notes')}\")\n                            print(\"\\nMission successful. Terminating hunt.\")\n                            return\n                    print(\"...no hot signal found. Will try again in 1 minute.\")\n                else:\n                    print(f\"  -> API Warning: Received status code {response.status_code}. Retrying.\")\n\n            except requests.exceptions.RequestException as e:\n                print(f\"  -> API Error: Could not connect. Details: {str(e)[:100]}\")\n\n            time.sleep(POLL_INTERVAL_SECONDS)\n\n        print(\"\\n\" + \"=\"*40)\n        print(\" HUNT COMPLETE: TIMEOUT \".center(40, \"=\"))\n        print(\"=\"*40)\n\n    finally:\n        print(\"\\n--- SHUTDOWN SEQUENCE ---\")\n        if api_process:\n            print(\"Terminating API server...\")\n            api_process.terminate()\n            api_process.wait()\n            print(\"API server terminated.\")\n        if cockpit_process:\n            print(\"Terminating Cockpit server...\")\n            cockpit_process.terminate()\n            cockpit_process.wait()\n            print(\"Cockpit server terminated.\")\n        print(\"-------------------------\")\n\nif __name__ == \"__main__\":\n    launch_and_hunt()\n"
}