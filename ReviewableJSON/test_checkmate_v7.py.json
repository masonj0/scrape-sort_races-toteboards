{
    "filepath": "tests/test_checkmate_v7.py",
    "content": "import pytest\nfrom fastapi.testclient import TestClient\nfrom unittest.mock import patch, MagicMock\nfrom datetime import datetime, timezone, timedelta\n\n# This is a bit of a hack to make sure the app is loaded after the models\n# are defined, which is necessary because we are creating these files from scratch.\nfrom src.checkmate_v7 import models\nfrom src.checkmate_v7 import api\n\nclient = TestClient(api.app)\n\n@patch('src.checkmate_v7.api.get_db_session')\ndef test_get_active_predictions(mock_get_db):\n    \"\"\"\n    Tests the /predictions/active endpoint, ensuring it correctly calculates\n    and returns the new UI-focused fields.\n    \"\"\"\n    # Given: A mock database session and a mock prediction object\n    mock_session = MagicMock()\n    mock_get_db.return_value = mock_session\n    \n    # Set a post time 10 minutes into the future\n    future_post_time = datetime.now(timezone.utc) + timedelta(minutes=10)\n    \n    mock_prediction = models.PredictionORM(\n        prediction_id=\"pred_1\",\n        race_key=\"race_1\",\n        status=\"pending\",\n        race_local_datetime=future_post_time,\n        score_total=85.5\n    )\n    mock_session.query.return_value.filter_by.return_value.all.return_value = [mock_prediction]\n    \n    # When\n    response = client.get(\"/predictions/active\")\n    \n    # Then\n    assert response.status_code == 200\n    data = response.json()\n    \n    assert len(data) == 1\n    prediction_response = data[0]\n    \n    assert prediction_response[\"prediction_id\"] == \"pred_1\"\n    assert prediction_response[\"score_total\"] == 85.5\n    # The calculated minutes_to_post should be slightly less than 10\n    assert 9.9 < prediction_response[\"minutes_to_post\"] < 10.0\n"
}