{
    "filepath": "tests/adapters/test_rpb2b_adapter.py",
    "content": "import json\nfrom pathlib import Path\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom src.paddock_parser.adapters.rpb2b_adapter import Rpb2bAdapter\nfrom src.paddock_parser.base import NormalizedRace, NormalizedRunner\n\n\n@pytest.fixture\ndef mock_race_list_json():\n    path = Path(__file__).parent / \"mock_data\" / \"rpb2b_racecards_sample.json\"\n    return path.read_text()\n\n\n@pytest.fixture\ndef mock_race_detail_json():\n    path = Path(__file__).parent / \"mock_data\" / \"rpb2b_race_detail_sample.json\"\n    return path.read_text()\n\n\n@pytest.mark.anyio\n@patch(\"src.paddock_parser.adapters.rpb2b_adapter.get_page_content\")\nasync def test_rpb2b_adapter_fetches_and_parses(\n    mock_get_page_content, mock_race_list_json, mock_race_detail_json\n):\n    \"\"\"\n    Tests the full end-to-end fetch and parse process for Rpb2bAdapter.\n    \"\"\"\n    import sys\n    if 'trio' in sys.modules:\n        pytest.skip(\"Skipping rpb2b test on trio due to asyncio.gather conflict.\")\n\n    # Configure the mock to return different JSON based on the URL requested\n    async def fetch_side_effect(url):\n        if \"daily\" in url:\n            return mock_race_list_json\n\n        # For detail calls, return a slightly modified version of the sample\n        # to make the test more robust.\n        race_detail = json.loads(mock_race_detail_json)\n        if \"81650def-54b2-408c-991f-fbae800060b0\" in url:\n            race_detail[\"raceNumber\"] = 1\n        elif \"4c459555-265e-4aa4-beaf-e82d8781c13d\" in url:\n            race_detail[\"raceNumber\"] = 2\n        return json.dumps(race_detail)\n\n    mock_get_page_content.side_effect = fetch_side_effect\n\n    adapter = Rpb2bAdapter()\n    races = await adapter.fetch()\n\n    assert mock_get_page_content.call_count > 1\n    assert len(races) > 0\n\n    # Test the first race\n    race1 = next(\n        (r for r in races if r.race_id == \"81650def-54b2-408c-991f-fbae800060b0\"), None\n    )\n    assert race1 is not None\n    assert race1.track_name == \"Parx\"\n    assert race1.race_number == 1\n    assert race1.race_type == \"Flat\"\n    assert race1.number_of_runners == 6\n    assert race1.runners[0].odds == 18.8\n\n    # Test the second race to ensure different data is processed\n    race2 = next(\n        (r for r in races if r.race_id == \"4c459555-265e-4aa4-beaf-e82d8781c13d\"), None\n    )\n    assert race2 is not None\n    assert race2.track_name == \"Parx\"\n    assert race2.race_number == 2\n"
}