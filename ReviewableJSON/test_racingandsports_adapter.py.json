{
    "filepath": "tests/adapters/test_racingandsports_adapter.py",
    "content": "import pytest\nfrom pathlib import Path\n\nfrom paddock_parser.adapters.racingandsports_adapter import RacingAndSportsAdapter\n\n@pytest.fixture\ndef sample_json_data():\n    \"\"\"Loads the sample JSON data from the fixture file.\"\"\"\n    fixture_path = Path(__file__).parent / \"racingandsports_sample.json\"\n    with open(fixture_path, 'r') as f:\n        return f.read()\n\ndef test_parse_meetings_extracts_correct_information(sample_json_data):\n    \"\"\"\n    Tests that the adapter can correctly parse the meeting-level JSON\n    and extract the course names and form guide URLs.\n    \"\"\"\n    adapter = RacingAndSportsAdapter()\n    meetings = adapter.parse_meetings(sample_json_data)\n\n    assert len(meetings) > 0\n\n    # Check for a specific, known meeting in the results\n    canberra_meeting = next((m for m in meetings if m['course'] == 'Canberra'), None)\n    \n    assert canberra_meeting is not None\n    assert canberra_meeting['course'] == 'Canberra'\n    assert \"canberra\" in canberra_meeting['url']\n    assert \"2025-09-05\" in canberra_meeting['url']\n\n    # Check another one for good measure\n    haydock_meeting = next((m for m in meetings if m['course'] == 'Haydock Park'), None)\n    assert haydock_meeting is not None\n    assert haydock_meeting['course'] == 'Haydock Park'\n    assert \"haydock-park\" in haydock_meeting['url']\n"
}