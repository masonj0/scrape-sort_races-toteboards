{
    "filepath": "tests/test_merger.py",
    "content": "import pytest\n\nfrom paddock_parser.models import Race, Runner\n\n# This is the function you will implement in src/paddock_parser/merger.py\n# The test uses a local reference to the function, so we need to handle the import carefully\ntry:\n    from paddock_parser.merger import smart_merge\nexcept (ImportError, ModuleNotFoundError):\n    # This allows the test file to be parsed even if the merger module doesn't exist yet\n    def smart_merge(races):\n        return races\n\n\n# --- Test Cases for Operation SmartMerge ---\n\n@pytest.fixture\ndef race_data():\n    \"\"\" Provides a realistic list of races with duplicates to be merged. \"\"\"\n    race_1_sky = Race(race_id=\"Aintree_14:30\", venue=\"Aintree\", race_time=\"14:30\", race_number=1, source=\"SkySports\", is_handicap=False,\n                      runners=[Runner(name=\"Horse A\", odds=\"5/1\"), Runner(name=\"Horse B\", odds=\"10/1\")])\n    race_1_atr = Race(race_id=\"Aintree_14:30\", venue=\"Aintree Racecourse\", race_time=\"14:30\", race_number=1, source=\"AtTheRaces\", is_handicap=False,\n                      runners=[Runner(name=\"Horse B\", odds=\"12/1\"), Runner(name=\"Horse C\", odds=\"8/1\")])\n    race_2_unique = Race(race_id=\"Newmarket_15:00\", venue=\"Newmarket\", race_time=\"15:00\", race_number=2, source=\"FanDuel\", is_handicap=False,\n                         runners=[Runner(name=\"Horse D\", odds=\"2/1\")])\n    return [race_1_sky, race_1_atr, race_2_unique]\n\ndef test_deduplicates_races(race_data):\n    \"\"\" SPEC: The function must reduce a list of races to only unique race_ids. \"\"\"\n    merged_races = smart_merge(race_data)\n    assert len(merged_races) == 2\n\ndef test_merges_runners_and_respects_priority(race_data):\n    \"\"\"\n    SPEC: The function must merge runner lists from duplicate races.\n    - It must create a union of all unique runners.\n    - If a runner exists in multiple sources, the odds from the HIGHER priority\n      source must be used. Priority: FanDuel > SkySports > AtTheRaces.\n    \"\"\"\n    merged_races = smart_merge(race_data)\n    merged_aintree_race = next(r for r in merged_races if r.race_id == \"Aintree_14:30\")\n\n    assert len(merged_aintree_race.runners) == 3\n\n    runner_names = {r.name for r in merged_aintree_race.runners}\n    assert \"Horse A\" in runner_names\n    assert \"Horse B\" in runner_names\n    assert \"Horse C\" in runner_names\n\n    horse_b = next(r for r in merged_aintree_race.runners if r.name == \"Horse B\")\n    assert horse_b.odds == \"10/1\"\n\ndef test_tracks_provenance_correctly(race_data):\n    \"\"\"\n    SPEC: The final merged race must have a 'sources' list containing the names\n    of all contributing adapters, sorted by priority.\n    \"\"\"\n    merged_races = smart_merge(race_data)\n\n    merged_aintree_race = next(r for r in merged_races if r.race_id == \"Aintree_14:30\")\n    assert merged_aintree_race.sources == [\"SkySports\", \"AtTheRaces\"]\n\n    unique_newmarket_race = next(r for r in merged_races if r.race_id == \"Newmarket_15:00\")\n    assert unique_newmarket_race.sources == [\"FanDuel\"]\n\ndef test_prioritizes_metadata_from_best_source(race_data):\n    \"\"\" SPEC: The top-level metadata (like 'venue') of the final merged race\n    should come from the highest-priority source. \"\"\"\n    merged_races = smart_merge(race_data)\n    merged_aintree_race = next(r for r in merged_races if r.race_id == \"Aintree_14:30\")\n    assert merged_aintree_race.venue == \"Aintree\"\n\ndef test_handles_no_duplicates():\n    \"\"\" SPEC: If no duplicates are present, the output should be logically identical to the input. \"\"\"\n    races = [\n        Race(race_id=\"R1\", venue=\"V1\", race_time=\"T1\", race_number=1, source=\"S1\", is_handicap=False, runners=[]),\n        Race(race_id=\"R2\", venue=\"V2\", race_time=\"T2\", race_number=2, source=\"S2\", is_handicap=False, runners=[]),\n    ]\n    merged_races = smart_merge(races)\n    assert len(merged_races) == 2\n    assert merged_races[0].sources == [\"S1\"]\n    assert merged_races[1].sources == [\"S2\"]\n"
}