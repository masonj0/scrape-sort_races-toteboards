{
    "filepath": "./paddock-parser-ng/src/paddock_parser/tests/test_fanduel_adapter.py",
    "content": "import json\nimport unittest\nfrom unittest.mock import patch\nfrom datetime import datetime\nfrom paddock_parser.adapters.fanduel_graphql_adapter import FanDuelGraphQLAdapter\nfrom paddock_parser.adapters.base import NormalizedRace, NormalizedRunner\n\nclass TestFanDuelAdapter(unittest.TestCase):\n\n    def test_parse_data_as_specification(self):\n        \"\"\"\n        This test serves as the specification for the FanDuel adapter.\n        It defines the expected output structure for a given input.\n        The adapter should be implemented to make this test pass.\n        \"\"\"\n        adapter = FanDuelGraphQLAdapter()\n\n        # --- Input Data (The Specification) ---\n        mock_schedule_data = {\n            \"data\": {\n                \"scheduleRaces\": [\n                    {\n                        \"id\": \"SA\",\n                        \"races\": [\n                            {\n                                \"id\": \"SA-5\",\n                                \"tvgRaceId\": 12345,\n                                \"mtp\": 10,\n                                \"number\": \"5\",\n                                \"postTime\": \"2025-09-01T15:30:00Z\",\n                                \"isGreyhound\": False,\n                                \"type\": {\"code\": \"T\"},\n                                \"track\": {\"name\": \"Santa Anita\"}\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n\n        mock_detail_data = {\n            \"data\": {\n                \"races\": [\n                    {\n                        \"id\": \"SA-5\",\n                        \"tvgRaceId\": 12345,\n                        \"bettingInterests\": [\n                            {\n                                \"biNumber\": 1,\n                                \"runners\": [{\"scratched\": False, \"horseName\": \"Speedy Gonzales\", \"jockey\": \"Buggs, B\", \"trainer\": \"Jones, W. E.\"}],\n                                \"currentOdds\": {\"numerator\": 8, \"denominator\": 1}\n                            },\n                            {\n                                \"biNumber\": 2,\n                                \"runners\": [{\"scratched\": False, \"horseName\": \"Road Runner\", \"jockey\": \"Coyote, W\", \"trainer\": \"Acme, Corp\"}],\n                                \"currentOdds\": {\"numerator\": 3, \"denominator\": 1}\n                            },\n                            {\n                                \"biNumber\": 3,\n                                \"runners\": [{\"scratched\": True, \"horseName\": \"Slowpoke Rodriguez\", \"jockey\": \"Mouse, D\", \"trainer\": \"Hanna, B.\"}],\n                                \"currentOdds\": {}\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n\n        raw_data = {\n            \"schedule\": json.dumps(mock_schedule_data),\n            \"detail\": json.dumps(mock_detail_data)\n        }\n\n        # --- Run the parsing logic ---\n        result = adapter.parse_data(raw_data)\n\n        # --- Assertions (The Specification) ---\n        self.assertIsInstance(result, list)\n        self.assertEqual(len(result), 1)\n\n        race = result[0]\n        self.assertIsInstance(race, NormalizedRace)\n\n        self.assertEqual(race.race_id, \"SA-5\")\n        self.assertEqual(race.track_name, \"Santa Anita\")\n        self.assertEqual(race.race_number, 5)\n        self.assertEqual(race.post_time, datetime.fromisoformat(\"2025-09-01T15:30:00+00:00\"))\n        self.assertEqual(race.race_type, \"T\")\n        self.assertEqual(race.minutes_to_post, 10)\n        self.assertEqual(race.number_of_runners, 2)\n\n        self.assertIsInstance(race.runners, list)\n        self.assertEqual(len(race.runners), 2)\n\n        runner1 = race.runners[0]\n        self.assertIsInstance(runner1, NormalizedRunner)\n        self.assertEqual(runner1.name, \"Speedy Gonzales\")\n        self.assertEqual(runner1.program_number, 1)\n        self.assertFalse(runner1.scratched)\n        self.assertEqual(runner1.jockey, \"Buggs, B\")\n        self.assertEqual(runner1.trainer, \"Jones, W. E.\")\n        self.assertEqual(runner1.odds, 8.0)\n\n        runner2 = race.runners[1]\n        self.assertIsInstance(runner2, NormalizedRunner)\n        self.assertEqual(runner2.name, \"Road Runner\")\n        self.assertEqual(runner2.program_number, 2)\n        self.assertFalse(runner2.scratched)\n        self.assertEqual(runner2.jockey, \"Coyote, W\")\n        self.assertEqual(runner2.trainer, \"Acme, Corp\")\n        self.assertEqual(runner2.odds, 3.0)\n\n    @patch('paddock_parser.adapters.fanduel_graphql_adapter.httpx.Client')\n    def test_fetch_data_logic(self, MockClient):\n        \"\"\"\n        Tests the two-stage fetching logic of the fetch_data method, ensuring\n        it makes the correct sequence of API calls.\n        \"\"\"\n        # --- Mock Setup ---\n        mock_client = MockClient.return_value.__enter__.return_value\n\n        mock_schedule_response = unittest.mock.Mock()\n        mock_schedule_response.text = '{\"data\": {\"scheduleRaces\": [{\"races\": [{\"tvgRaceId\": 999}]}]}}'\n        mock_schedule_response.json.return_value = json.loads(mock_schedule_response.text)\n\n        mock_detail_response = unittest.mock.Mock()\n        mock_detail_response.text = '{\"data\": {\"races\": []}}'\n\n        mock_client.post.side_effect = [mock_schedule_response, mock_detail_response]\n\n        adapter = FanDuelGraphQLAdapter()\n\n        # --- Run ---\n        result = adapter.fetch_data()\n\n        # --- Assertions ---\n        self.assertEqual(mock_client.post.call_count, 2)\n\n        schedule_call = mock_client.post.call_args_list[0]\n        self.assertEqual(schedule_call.args[0], adapter.API_ENDPOINT)\n        self.assertEqual(schedule_call.kwargs['json']['operationName'], 'getLhnInfo')\n\n        detail_call = mock_client.post.call_args_list[1]\n        self.assertEqual(detail_call.args[0], adapter.API_ENDPOINT)\n        self.assertEqual(detail_call.kwargs['json']['operationName'], 'getGraphRaceBettingInterest')\n        self.assertEqual(detail_call.kwargs['json']['variables']['tvgRaceIds'], [999])\n\n        self.assertEqual(result['schedule'], mock_schedule_response.text)\n        self.assertEqual(result['detail'], mock_detail_response.text)\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
}