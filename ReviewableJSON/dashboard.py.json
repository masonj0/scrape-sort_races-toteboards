{
    "filepath": "src/checkmate_v7/dashboard.py",
    "content": "import streamlit as st\nimport pandas as pd\nimport requests\nimport time\nfrom datetime import datetime\n\n# --- Page Configuration ---\nst.set_page_config(\n    page_title=\"Checkmate V7 Live Cockpit\",\n    layout=\"wide\",\n)\n\n# --- API Configuration ---\nAPI_URL = \"http://127.0.0.1:8000\"\nPREDICTIONS_ENDPOINT = f\"{API_URL}/predictions/active\"\n\n# --- Helper Functions ---\n\n@st.cache_data(ttl=30)\ndef get_predictions():\n    \"\"\"Fetches active predictions from the API and returns a DataFrame.\"\"\"\n    try:\n        response = requests.get(PREDICTIONS_ENDPOINT)\n        response.raise_for_status()\n        return pd.DataFrame(response.json())\n    except (requests.exceptions.RequestException, ValueError):\n        # Return empty dataframe on error, will be handled in the main loop\n        return pd.DataFrame()\n\ndef score_to_stars(score: float) -> str:\n    \"\"\"Converts a numerical score (0-100) to a 5-star rating.\"\"\"\n    if pd.isna(score):\n        return \"N/A\"\n    filled_stars = int(score / 20)\n    return \"\u2605\" * filled_stars + \"\u2606\" * (5 - filled_stars)\n\ndef style_mtp(val: float) -> str:\n    \"\"\"Applies background color styling to the MTP column.\"\"\"\n    if val < 5:\n        color = '#ffadad'  # Light Red\n    elif 5 <= val <= 10:\n        color = '#ffd6a5'  # Light Orange/Yellow\n    else:\n        color = '#caffbf'  # Light Green\n    return f'background-color: {color}'\n\n# --- Main Page Layout ---\n\nst.title(\"Checkmate V7 Live Cockpit\")\n\nplaceholder = st.empty()\n\nwhile True:\n    with placeholder.container():\n        st.caption(f\"Last updated: {datetime.now().strftime('%H:%M:%S')}\")\n        df = get_predictions()\n        \n        if not df.empty:\n            # --- Data Transformation ---\n            df_display = df[['race_key', 'minutes_to_post', 'score_total']].copy()\n            df_display.rename(columns={\n                'race_key': 'Race',\n                'minutes_to_post': 'MTP',\n                'score_total': 'Score'\n            }, inplace=True)\n            \n            # Sort by MTP\n            df_display.sort_values(by='MTP', inplace=True)\n            \n            # Create visual score column\n            df_display['Rating'] = df_display['Score'].apply(score_to_stars)\n            \n            # --- Display Table with Formatting ---\n            st.dataframe(\n                df_display[['Race', 'MTP', 'Rating', 'Score']].style\n                .map(style_mtp, subset=['MTP'])\n                .format({'MTP': '{:.1f}', 'Score': '{:.2f}'}),\n                use_container_width=True\n            )\n        else:\n            st.warning(\"No active predictions found or API is unavailable.\")\n            \n    time.sleep(30)\n"
}