{
    "filepath": "tests/test_scorer.py",
    "content": "import pytest\nfrom datetime import datetime, timedelta\nfrom src.paddock_parser.models import Race, Runner\nfrom src.paddock_parser.scorer import get_high_roller_races, _convert_odds_to_float, calculate_weighted_score\n\n# --- Test for the Odds Conversion Utility ---\n@pytest.mark.parametrize(\"odds_str, expected_float\", [\n    (\"10/1\", 10.0), (\"5/2\", 2.5), (\"1/2\", 0.5), (\"EVS\", 1.0),\n    (\"SP\", float('inf')), (\"invalid\", float('inf')),\n])\ndef test_convert_odds_to_float(odds_str, expected_float):\n    assert _convert_odds_to_float(odds_str) == expected_float\n\n# --- Tests for the Main High Roller Logic ---\n@pytest.fixture\ndef sample_races():\n    now = datetime.now()\n    return [\n        Race(race_id=\"RACE_PERFECT\", venue=\"Goodwood\", race_time=(now + timedelta(minutes=10)).strftime(\"%H:%M\"), race_number=1, is_handicap=False, runners=[Runner(name=\"Horse A\", odds=\"4/1\")]),\n        Race(race_id=\"RACE_TOO_LATE\", venue=\"Ascot\", race_time=(now + timedelta(minutes=30)).strftime(\"%H:%M\"), race_number=2, is_handicap=True, runners=[Runner(name=\"Horse C\", odds=\"2/1\")]),\n        Race(race_id=\"RACE_TOO_MANY_RUNNERS\", venue=\"York\", race_time=(now + timedelta(minutes=15)).strftime(\"%H:%M\"), race_number=3, is_handicap=False, runners=[Runner(name=f\"Runner {i}\", odds=\"10/1\") for i in range(7)]), # Test edge case of 7 runners\n        Race(race_id=\"RACE_HIGH_ODDS_FAV\", venue=\"Newmarket\", race_time=(now + timedelta(minutes=5)).strftime(\"%H:%M\"), race_number=4, is_handicap=True, runners=[Runner(name=\"Horse E\", odds=\"5/1\")]),\n        Race(race_id=\"RACE_LOW_ODDS_FAV\", venue=\"Cheltenham\", race_time=(now + timedelta(minutes=12)).strftime(\"%H:%M\"), race_number=5, is_handicap=False, runners=[Runner(name=\"Horse G\", odds=\"1/2\")]),\n    ]\n\ndef test_filters_races_correctly(sample_races):\n    now = datetime.now()\n    high_roller_races = get_high_roller_races(sample_races, now)\n    race_ids = {race.race_id for race in high_roller_races}\n    assert len(high_roller_races) == 3\n    assert \"RACE_PERFECT\" in race_ids\n    assert \"RACE_HIGH_ODDS_FAV\" in race_ids\n    assert \"RACE_LOW_ODDS_FAV\" in race_ids\n\ndef test_sorts_races_by_high_roller_score(sample_races):\n    now = datetime.now()\n    sorted_races = get_high_roller_races(sample_races, now)\n    assert len(sorted_races) == 3\n    assert sorted_races[0].race_id == \"RACE_HIGH_ODDS_FAV\"\n    assert sorted_races[1].race_id == \"RACE_PERFECT\"\n    assert sorted_races[2].race_id == \"RACE_LOW_ODDS_FAV\"\n\n\ndef test_calculate_weighted_score():\n    \"\"\"\n    SPEC: The weighted score must correctly apply weights to different race factors.\n    - A lower runner count should increase the score.\n    - Higher odds for the favorite should increase the score.\n    \"\"\"\n    # Arrange: A sample race with a clear favorite\n    race = Race(\n        race_id=\"R1\", venue=\"Test\", race_time=\"14:00\", source=\"Test\", race_number=1, is_handicap=False,\n        runners=[\n            Runner(name=\"Favorite\", odds=\"5/2\"), # Odds = 2.5\n            Runner(name=\"Longshot\", odds=\"10/1\")\n        ]\n    )\n    # Arrange: Sample weights from our V3 strategy\n    weights = {\n        \"FIELD_SIZE_WEIGHT\": 0.6,\n        \"FAVORITE_ODDS_WEIGHT\": 0.4\n    }\n    # Act\n\n    # Act\n    actual_score = calculate_weighted_score(race, weights)\n\n    # Assert\n    assert actual_score == pytest.approx(1.3)\n"
}