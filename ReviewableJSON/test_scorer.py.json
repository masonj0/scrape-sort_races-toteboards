{
    "filepath": "./paddock-parser-ng/src/paddock_parser/tests/test_scorer.py",
    "content": "from paddock_parser.analysis.scorer import RaceScorer\nfrom paddock_parser.adapters.base import NormalizedRace, NormalizedRunner\n\ndef test_race_scorer():\n    \"\"\"\n    Tests the RaceScorer logic.\n    It should give higher scores to races with fewer runners.\n    \"\"\"\n    # 1. Setup\n    scorer = RaceScorer()\n\n    # Create mock races with different numbers of runners\n    # Note: We only need to populate the number_of_runners field for this test\n    small_race = NormalizedRace(\n        race_id=\"test-1\",\n        track_name=\"Test Track\",\n        race_number=1,\n        number_of_runners=6, # Optimal range 5-7\n    )\n\n    medium_race = NormalizedRace(\n        race_id=\"test-2\",\n        track_name=\"Test Track\",\n        race_number=2,\n        number_of_runners=9, # Good range 8-10\n    )\n\n    large_race = NormalizedRace(\n        race_id=\"test-3\",\n        track_name=\"Test Track\",\n        race_number=3,\n        number_of_runners=15, # Low score range\n    )\n\n    # 2. Execution\n    score_small = scorer.score(small_race)\n    score_medium = scorer.score(medium_race)\n    score_large = scorer.score(large_race)\n\n    # 3. Assertions\n\n    # Assert specific scores based on the adapted logic\n    assert score_small == 100.0\n    assert score_medium == 80.0\n    assert score_large == 20.0\n\n    # Assert the relationship between the scores\n    assert score_small > score_medium\n    assert score_medium > score_large\n"
}