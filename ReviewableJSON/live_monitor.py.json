{
    "file_path": "live_monitor.py",
    "content": "#!/usr/bin/env python3\n# ==============================================================================\n#  Fortuna Faucet: The Live Odds Monitor (The Third Pillar)\n# ==============================================================================\n\nimport httpx\nimport structlog\nfrom datetime import datetime\n\nfrom python_service.models import Race, OddsData\nfrom python_service.adapters.betfair_adapter import BetfairAdapter\n\nlog = structlog.get_logger(__name__)\n\nclass LiveOddsMonitor:\n    \"\"\"\n    The 'Third Pillar' of the architecture. This engine uses the BetfairAdapter\n    to get a final, live odds snapshot for a race.\n    \"\"\"\n\n    def __init__(self, config):\n        self.config = config\n        self.adapter = BetfairAdapter(config)\n        log.info(\"LiveOddsMonitor Initialized (Armed with BetfairAdapter)\")\n\n    async def monitor_race(self, race: Race, http_client: httpx.AsyncClient) -> Race:\n        \"\"\"\n        Monitors a single race, fetching live odds and updating the Race object.\n        \"\"\"\n        log.info(\"Monitoring race for live odds\", race_id=race.id, venue=race.venue)\n        if not race.id.startswith('bf_'):\n            log.warning(\"Cannot monitor non-Betfair race\", race_id=race.id, source=race.source)\n            return race # Return original race if not a Betfair market\n\n        market_id = race.id.split('bf_')[1]\n\n        try:\n            live_odds = await self.adapter.get_live_odds_for_market(market_id, http_client)\n            if not live_odds:\n                log.warning(\"No live odds returned from Betfair\", market_id=market_id)\n                return race\n\n            log.info(\"Successfully fetched live odds\", market_id=market_id, odds_count=len(live_odds))\n            # Update the runners in the Race object with the new live odds\n            for runner in race.runners:\n                if runner.selection_id in live_odds:\n                    runner.odds[self.adapter.source_name] = OddsData(\n                        win=live_odds[runner.selection_id],\n                        source=self.adapter.source_name,\n                        last_updated=datetime.now()\n                    )\n            return race\n        except Exception as e:\n            log.error(\"Failed to monitor race\", race_id=race.id, error=e, exc_info=True)\n            return race # Return original race on failure"
}