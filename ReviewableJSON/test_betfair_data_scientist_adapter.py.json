{
    "filepath": "tests/adapters/test_betfair_data_scientist_adapter.py",
    "content": "import pytest\nfrom unittest.mock import patch\nimport pandas as pd\nfrom io import StringIO\n\nfrom src.paddock_parser.adapters.betfair_data_scientist_adapter import BetfairDataScientistAdapter\nfrom src.paddock_parser.base import NormalizedRace\n\n@pytest.fixture\ndef sample_csv_data():\n    \"\"\"Sample CSV data from the Betfair Data Scientist API.\"\"\"\n    csv_data = \"\"\"market_id,selection_id,meetings.races.runners.ratedPrice\n1.234,5678,1.5\n1.234,5679,2.5\n1.235,5680,3.0\n\"\"\"\n    return csv_data\n\n@pytest.mark.anyio\n@patch(\"src.paddock_parser.adapters.betfair_data_scientist_adapter.get_page_content\")\nasync def test_betfair_adapter_fetches_and_parses(mock_get_page_content, sample_csv_data):\n    \"\"\"\n    Tests that the BetfairDataScientistAdapter correctly fetches, parses,\n    and normalizes data from the CSV API.\n    \"\"\"\n    mock_get_page_content.return_value = sample_csv_data\n    \n    adapter = BetfairDataScientistAdapter()\n    races = await adapter.fetch()\n\n    mock_get_page_content.assert_called_once()\n    assert \"presenter=RatingsPresenter\" in mock_get_page_content.call_args[0][0]\n    assert \"csv=true\" in mock_get_page_content.call_args[0][0]\n\n    assert len(races) == 2  # Two unique market_ids\n    \n    race1 = next((r for r in races if r.race_id == \"1.234\"), None)\n    assert race1 is not None\n    assert len(race1.runners) == 2\n    assert race1.runners[0].name == \"5678\"\n    assert race1.runners[0].odds == 1.5\n    assert race1.runners[1].name == \"5679\"\n    assert race1.runners[1].odds == 2.5\n    \n    race2 = next((r for r in races if r.race_id == \"1.235\"), None)\n    assert race2 is not None\n    assert len(race2.runners) == 1\n    assert race2.runners[0].name == \"5680\"\n    assert race2.runners[0].odds == 3.0\n"
}