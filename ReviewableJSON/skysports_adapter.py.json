{
    "filepath": "./paddock-parser-ng/src/paddock_parser/adapters/skysports_adapter.py",
    "content": "import asyncio\nimport re\nfrom typing import List, Optional\n\nfrom bs4 import BeautifulSoup\n\nfrom paddock_parser.adapters.base import BaseAdapterV3, NormalizedRace, NormalizedRunner\nfrom paddock_parser.utils.scraper import fetch_html_content\n\n\nclass SkySportsAdapter(BaseAdapterV3):\n    \"\"\"\n    Adapter for skysports.com, using a 'Minimalist Scraper' approach.\n    Fetches only the summary racecard page to quickly identify races with small fields.\n    \"\"\"\n\n    SOURCE_ID = \"skysports\"\n\n    def __init__(self, config=None):\n        super().__init__(config)\n        self.base_url = \"https://www.skysports.com/racing/racecards\"\n\n    async def fetch(self) -> List[NormalizedRace]:\n        \"\"\"Fetches the main racecards page and parses the summary data.\"\"\"\n        html_content = await fetch_html_content(self.base_url)\n        if not html_content:\n            return []\n        return self._parse_race_summaries(html_content)\n\n    def parse_races(self, html_content: str) -> List[NormalizedRace]:\n        \"\"\"\n        Parses the HTML content to extract race summaries.\n        \"\"\"\n        return self._parse_race_summaries(html_content)\n\n    def _parse_race_summaries(self, html_content: str) -> List[NormalizedRace]:\n        \"\"\"Parses the summary page to extract track names, times, and runner counts.\"\"\"\n        from datetime import datetime, date\n\n        soup = BeautifulSoup(html_content, \"lxml\")\n        races = []\n\n        meeting_blocks = soup.select(\"div.sdc-site-concertina-block\")\n\n        for block in meeting_blocks:\n            track_name_tag = block.select_one(\"h3.sdc-site-concertina-block__title > span.sdc-site-concertina-block__title\")\n            if not track_name_tag:\n                continue\n            track_name = track_name_tag.text.strip()\n\n            race_events = block.select(\"div.sdc-site-racing-meetings__event\")\n            for i, event in enumerate(race_events):\n                time_tag = event.select_one(\"span.sdc-site-racing-meetings__event-time\")\n                race_name_tag = event.select_one(\"span.sdc-site-racing-meetings__event-name\")\n                details_tag = event.select_one(\"span.sdc-site-racing-meetings__event-details\")\n\n                if time_tag and race_name_tag and details_tag:\n                    race_time_str = time_tag.text.strip()\n                    race_name = race_name_tag.text.strip()\n                    details_text = details_tag.text.strip()\n\n                    race_number_from_name = self._parse_race_number_from_name(race_name)\n                    race_number = int(race_number_from_name) if race_number_from_name else i + 1\n\n                    runner_count = self._parse_runner_count(details_text)\n\n                    try:\n                        post_time_dt = datetime.combine(date.today(), datetime.strptime(race_time_str, \"%H:%M\").time())\n                    except ValueError:\n                        post_time_dt = None\n\n                    races.append(\n                        NormalizedRace(\n                            race_id=f\"{track_name.replace(' ', '')}-{race_time_str}\",\n                            track_name=track_name,\n                            race_number=race_number,\n                            post_time=post_time_dt,\n                            number_of_runners=runner_count,\n                            race_type=\"T\"\n                        )\n                    )\n        return races\n\n    def _parse_runner_count(self, text: str) -> Optional[int]:\n        \"\"\"Extracts the number of runners from a string like '9 Runners'.\"\"\"\n        match = re.search(r\"(\\d+)\\s+Runners\", text, re.IGNORECASE)\n        if match:\n            try:\n                return int(match.group(1))\n            except (ValueError, IndexError):\n                return None\n        return None\n\n    def _parse_race_number_from_name(self, text: str) -> Optional[str]:\n        \"\"\"Extracts the race number from a string like 'Race 1 - BetUK...'\"\"\"\n        match = re.search(r\"Race\\s+(\\d+)\", text, re.IGNORECASE)\n        if match:\n            try:\n                return match.group(1)\n            except IndexError:\n                return None\n        return None\n"
}