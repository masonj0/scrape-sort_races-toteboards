{"content": "import unittest\nfrom pathlib import Path\n\nfrom paddock_parser.adapters.greyhound_recorder import GreyhoundRecorderAdapter\n\n\nclass TestGreyhoundRecorderAdapter(unittest.TestCase):\n    def setUp(self):\n        self.adapter = GreyhoundRecorderAdapter()\n        fixture_path = Path(__file__).parent / \"greyhound_recorder_sample.html\"\n        self.html_content = fixture_path.read_text(encoding=\"utf-8\")\n\n    def test_parse_races_from_sample(self):\n        self.assertIn(\"</html>\", self.html_content, \"Sample HTML file could not be read.\")\n        \n        races = self.adapter.parse_races(self.html_content)\n\n        # There are 12 races for 2 tracks in the sample file\n        self.assertEqual(len(races), 12)\n\n        # Test the first race for correct structure and data\n        first_race = races[0]\n        self.assertEqual(first_race.race_id, '1035251')\n        self.assertEqual(first_race.track_name, 'Crayford')\n        self.assertEqual(first_race.race_number, 1)\n        self.assertEqual(len(first_race.runners), 6)\n\n        # Test the first runner of the first race\n        first_runner = first_race.runners[0]\n        self.assertEqual(first_runner.name, 'Deanridge Awesom')\n        self.assertEqual(first_runner.program_number, 1)\n        self.assertEqual(first_runner.trainer, 'A W Kelly')\n\n        # Test the last race (first race of the second track)\n        last_race = races[6]\n        self.assertEqual(last_race.race_id, '1035415')\n        self.assertEqual(last_race.track_name, 'Monmore')\n        self.assertEqual(last_race.race_number, 1)\n        self.assertEqual(len(last_race.runners), 6)\n        self.assertEqual(last_race.runners[0].name, 'Final Bullet')\n"}
