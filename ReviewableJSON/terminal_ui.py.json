{
    "filepath": "./src/paddock_parser/ui/terminal_ui.py",
    "content": "from datetime import datetime\nfrom typing import List, Optional\n\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich.progress import Progress\nfrom rich.logging import RichHandler\n\nfrom ..base import NormalizedRace\nfrom ..pipeline import run_pipeline\nfrom ..scorer import get_high_roller_races\nfrom ..models import Race as ScorerRace, Runner as ScorerRunner\n\n\ndef _convert_normalized_to_scorer_race(norm_race: NormalizedRace) -> Optional[ScorerRace]:\n    \"\"\"Converts a NormalizedRace to the ScorerRace model for use with scorer functions.\"\"\"\n    if not norm_race.post_time:\n        return None\n\n    # The odds in NormalizedRunner and ScorerRunner are both Optional[float], so no conversion is needed.\n    # This conversion also loses program_number, but it's not needed for the high roller report.\n    scorer_runners = [ScorerRunner(name=r.name, odds=r.odds) for r in norm_race.runners]\n    is_handicap = norm_race.race_type and \"handicap\" in norm_race.race_type.lower()\n\n    return ScorerRace(\n        race_id=norm_race.race_id,\n        venue=norm_race.track_name,\n        race_number=norm_race.race_number,\n        race_time=norm_race.post_time.strftime(\"%H:%M\"),\n        number_of_runners=norm_race.number_of_runners,\n        is_handicap=is_handicap,\n        runners=scorer_runners,\n    )\n\n\nclass TerminalUI:\n    \"\"\"\n    A class to handle all terminal output using the rich library.\n    \"\"\"\n    def __init__(self, console: Console = None):\n        self.console = console or Console()\n        self.progress = None\n        self.progress_task = None\n        self.log_handler = None\n\n    def display_races(self, races: List[NormalizedRace]):\n        \"\"\"\n        Displays a list of races in a formatted table.\n        \"\"\"\n        table = Table(title=\"Race Information\")\n        table.add_column(\"Track\", justify=\"left\")\n        table.add_column(\"Race #\", justify=\"left\")\n        table.add_column(\"Post Time\", justify=\"left\")\n        table.add_column(\"Runners\", justify=\"left\")\n        table.add_column(\"Score\", justify=\"left\")\n\n        for race in races:\n            post_time_str = race.post_time.strftime(\"%H:%M\") if race.post_time else \"N/A\"\n            score_str = f\"{race.score:.0f}\" if race.score is not None else \"N/A\"\n            table.add_row(\n                race.track_name,\n                str(race.race_number),\n                post_time_str,\n                str(race.number_of_runners),\n                score_str\n            )\n        self.console.print(table)\n\n    def display_high_roller_report(self, races: List[ScorerRace]):\n        \"\"\"\n        Displays the high roller report in a rich, formatted table.\n        \"\"\"\n        if not races:\n            info_message = (\n                \"[bold yellow]No races met the High Roller criteria.[/bold yellow]\\n\\n\"\n                \"The report is filtered based on the following rules:\\n\"\n                \" - [bold]Time:[/bold] Only includes races starting in the next 25 minutes.\\n\"\n                \" - [bold]Runners:[/bold] Only includes races with Fewer than 7 runners.\"\n            )\n            self.console.print(info_message)\n            return\n\n        table = Table(title=\"[bold green]High Roller Report[/bold green]\")\n        table.add_column(\"Time\", style=\"cyan\")\n        table.add_column(\"Venue\", style=\"magenta\")\n        table.add_column(\"Favorite\", style=\"green\")\n        table.add_column(\"Odds\", style=\"yellow\")\n\n        for race in races:\n            if not race.runners:\n                continue\n\n            # Find the favorite runner (lowest odds)\n            favorite_runner = None\n            min_odds = float('inf')\n            for runner in race.runners:\n                if runner.odds is not None and runner.odds < min_odds:\n                    min_odds = runner.odds\n                    favorite_runner = runner\n\n            if favorite_runner:\n                # Convert float odds back to a string for display\n                odds_str = f\"{favorite_runner.odds:.2f}\" if favorite_runner.odds is not None else \"N/A\"\n                table.add_row(\n                    race.race_time,\n                    race.venue,\n                    favorite_runner.name,\n                    odds_str\n                )\n\n        self.console.print(table)\n\n    def start_fetching_progress(self, num_tasks: int):\n        \"\"\"Initializes and starts a progress bar for fetching races.\"\"\"\n        self.progress = Progress(console=self.console)\n        self.progress.start()\n        self.progress_task = self.progress.add_task(\"Fetching races...\", total=num_tasks)\n\n    def update_fetching_progress(self):\n        \"\"\"Advances the fetching progress bar by one step.\"\"\"\n        if self.progress and self.progress_task is not None:\n            self.progress.update(self.progress_task, advance=1)\n\n    def stop_fetching_progress(self):\n        \"\"\"Stops the progress bar and cleans up.\"\"\"\n        if self.progress:\n            self.progress.stop()\n            self.progress = None\n            self.progress_task = None\n\n    def setup_logging(self):\n        \"\"\"Creates a RichHandler and sets it up.\"\"\"\n        self.log_handler = RichHandler(console=self.console, show_path=False)\n\n    def _display_main_menu(self):\n        \"\"\"Displays the main menu options.\"\"\"\n        self.console.print(\"\\n[bold magenta]Paddock Parser NG - Main Menu[/bold magenta]\")\n        self.console.print(\"1. Get High Roller Report\")\n        self.console.print(\"2. Quit\")\n\n    async def start_interactive_mode(self):\n        \"\"\"Starts the main interactive loop for the UI.\"\"\"\n        while True:\n            self._display_main_menu()\n            choice = self.console.input(\"[bold]Select an option: [/bold]\")\n            if choice == '1':\n                await self._run_high_roller_report()\n            elif choice == '2':\n                self.console.print(\"[yellow]Goodbye![/yellow]\")\n                break\n            else:\n                self.console.print(\"[bold red]Invalid option, please try again.[/bold red]\")\n\n    async def _run_high_roller_report(self):\n        \"\"\"Runs the full pipeline and displays the high roller report.\"\"\"\n        high_roller_races = None\n        with self.console.status(\"Fetching data from providers...\", spinner=\"dots\"):\n            # The pipeline returns the final normalized model. For the high roller report,\n            # we need to convert it to the scorer's model.\n            normalized_races = await run_pipeline(min_runners=0, specific_source=None)\n\n            if not normalized_races:\n                self.console.print(\"[yellow]No races were found by the pipeline.[/yellow]\")\n                return\n\n            # Convert to the ScorerRace model for the high roller function\n            scorer_races = [\n                race for race in\n                (_convert_normalized_to_scorer_race(nr) for nr in normalized_races)\n                if race is not None\n            ]\n\n            now = datetime.now()\n            high_roller_races = get_high_roller_races(scorer_races, now)\n\n        self.display_high_roller_report(high_roller_races)\n"
}