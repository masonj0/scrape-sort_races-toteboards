{
    "filepath": "src/paddock_parser/ui/terminal_ui.py",
    "content": "import asyncio\nfrom datetime import datetime\nfrom typing import List\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich.progress import Progress\nfrom rich.logging import RichHandler\nfrom rich.panel import Panel\n\nfrom ..base import NormalizedRace\nfrom ..pipeline import run_pipeline\nfrom ..scorer import get_high_roller_races\nfrom ..models import Race as ScorerRace, Runner as ScorerRunner\n\nclass TerminalUI:\n    \"\"\"\n    A class to handle all terminal output using the rich library.\n    \"\"\"\n    def __init__(self, console: Console = None):\n        self.console = console or Console()\n        self.progress = None\n        self.progress_task = None\n        self.log_handler = None\n\n    def display_races(self, races: List[NormalizedRace]):\n        \"\"\"\n        Displays a list of races in a formatted table.\n        \"\"\"\n        table = Table(title=\"Race Information\")\n        table.add_column(\"Track\", justify=\"left\")\n        table.add_column(\"Race #\", justify=\"left\")\n        table.add_column(\"Post Time\", justify=\"left\")\n        table.add_column(\"Runners\", justify=\"left\")\n        table.add_column(\"Score\", justify=\"left\")\n\n        for race in races:\n            post_time_str = race.post_time.strftime(\"%H:%M\") if race.post_time else \"N/A\"\n            score_str = f\"{race.score:.2f}\" if race.score is not None else \"N/A\"\n            table.add_row(\n                race.track_name,\n                str(race.race_number),\n                post_time_str,\n                str(race.number_of_runners),\n                score_str\n            )\n        self.console.print(table)\n\n    def _display_high_roller_report(self, races: List[ScorerRace]):\n        \"\"\"\n        Displays the high roller report in a specific format.\n        \"\"\"\n        table = Table(title=\"High Roller Report\")\n        table.add_column(\"Venue\", justify=\"left\")\n        table.add_column(\"Race Time\", justify=\"left\")\n        table.add_column(\"High Roller Score (Fav's Odds)\", justify=\"left\")\n\n        for race in races:\n            score_str = f\"{race.high_roller_score:.2f}/1\"\n            table.add_row(\n                race.venue,\n                race.race_time,\n                score_str\n            )\n        self.console.print(table)\n\n    def start_fetching_progress(self, num_tasks: int):\n        \"\"\"Initializes and starts a progress bar for fetching races.\"\"\"\n        self.progress = Progress(console=self.console)\n        self.progress.start()\n        self.progress_task = self.progress.add_task(\"Fetching races...\", total=num_tasks)\n\n    def update_fetching_progress(self):\n        \"\"\"Advances the fetching progress bar by one step.\"\"\"\n        if self.progress and self.progress_task is not None:\n            self.progress.update(self.progress_task, advance=1)\n\n    def stop_fetching_progress(self):\n        \"\"\"Stops the progress bar and cleans up.\"\"\"\n        if self.progress:\n            self.progress.stop()\n            self.progress = None\n            self.progress_task = None\n\n    def setup_logging(self):\n        \"\"\"Creates a RichHandler and sets it up.\"\"\"\n        self.log_handler = RichHandler(console=self.console, show_path=False)\n\n    def _display_main_menu(self):\n        \"\"\"Displays the main menu options.\"\"\"\n        self.console.print(\"\\n[bold magenta]Paddock Parser NG - Main Menu[/bold magenta]\")\n        self.console.print(\"1. Get High Roller Report\")\n        self.console.print(\"2. Quit\")\n\n    async def start_interactive_mode(self):\n        \"\"\"Starts the main interactive loop for the UI.\"\"\"\n        while True:\n            self._display_main_menu()\n            choice = self.console.input(\"[bold]Select an option: [/bold]\")\n            if choice == '1':\n                await self._run_high_roller_report()\n            elif choice == '2':\n                self.console.print(\"[yellow]Goodbye![/yellow]\")\n                break\n            else:\n                self.console.print(\"[bold red]Invalid option, please try again.[/bold red]\")\n\n    async def _run_high_roller_report(self):\n        \"\"\"Runs the full pipeline and displays the high roller report.\"\"\"\n        self.console.print(Panel(\"[bold green]Generating High Roller Report...[/bold green]\", expand=False))\n        \n        normalized_races = await run_pipeline(min_runners=0, specific_source=None)\n        \n        if not normalized_races:\n            self.console.print(\"[yellow]No races were found by the pipeline.[/yellow]\")\n            return\n\n        # Adapt from NormalizedRace to the ScorerRace model\n        scorer_races = []\n        for norm_race in normalized_races:\n            if norm_race.post_time:\n                # The scorer function now uses the models.py Race/Runner\n                scorer_runners = [ScorerRunner(name=r.name, odds=str(r.odds) if r.odds else \"SP\") for r in norm_race.runners]\n                scorer_races.append(\n                    ScorerRace(\n                        race_id=norm_race.race_id,\n                        venue=norm_race.track_name,\n                        race_time=norm_race.post_time.strftime(\"%H:%M\"),\n                        is_handicap=False,  # This info is not in NormalizedRace, default to False\n                        runners=scorer_runners\n                    )\n                )\n\n        now = datetime.now()\n        high_roller_races = get_high_roller_races(scorer_races, now)\n\n        if not high_roller_races:\n            self.console.print(Panel(\"[bold yellow]No races met the High Roller criteria.[/bold yellow]\", expand=False))\n        else:\n            self._display_high_roller_report(high_roller_races)\n"
}