{"content": "import logging\nfrom typing import List\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich.progress import Progress\nfrom rich.logging import RichHandler\n\nfrom ..base import NormalizedRace\n\nclass TerminalUI:\n    \"\"\"\n    A class to handle all terminal output using the rich library.\n    \"\"\"\n    def __init__(self, console: Console = None):\n        self.console = console or Console()\n        self.progress = None\n        self.progress_task = None\n        self.log_handler = None\n\n    def display_races(self, races: List[NormalizedRace]):\n        \"\"\"\n        Displays a list of races in a formatted table.\n        \"\"\"\n        table = Table(title=\"Race Information\")\n        \n        table.add_column(\"Track\", justify=\"left\")\n        table.add_column(\"Race #\", justify=\"left\")\n        table.add_column(\"Post Time\", justify=\"left\")\n        table.add_column(\"Runners\", justify=\"left\")\n        table.add_column(\"Score\", justify=\"left\")\n\n        for race in races:\n            post_time_str = race.post_time.strftime(\"%H:%M\") if race.post_time else \"N/A\"\n            score_str = f\"{race.score:.0f}\" if race.score is not None else \"N/A\"\n            \n            table.add_row(\n                race.track_name,\n                str(race.race_number),\n                post_time_str,\n                str(race.number_of_runners),\n                score_str\n            )\n            \n        self.console.print(table)\n\n    def start_fetching_progress(self, num_tasks: int):\n        \"\"\"\n        Initializes and starts a progress bar for fetching races.\n        \"\"\"\n        self.progress = Progress(console=self.console)\n        self.progress.start()\n        self.progress_task = self.progress.add_task(\"Fetching races...\", total=num_tasks)\n\n    def update_fetching_progress(self):\n        \"\"\"\n        Advances the fetching progress bar by one step.\n        \"\"\"\n        if self.progress and self.progress_task is not None:\n            self.progress.update(self.progress_task, advance=1)\n\n    def stop_fetching_progress(self):\n        \"\"\"\n        Stops the progress bar and cleans up.\n        \"\"\"\n        if self.progress:\n            self.progress.stop()\n            self.progress = None\n            self.progress_task = None\n            \n    def setup_logging(self):\n        \"\"\"\n        Creates a RichHandler and sets it up.\n        The calling code is responsible for adding it to a logger.\n        \"\"\"\n        self.log_handler = RichHandler(console=self.console, show_path=False, show_level=False, show_time=False)\n"}
