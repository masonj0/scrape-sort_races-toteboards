{
    "file_path": "electron/main.js",
    "content": "// electron/main.js\nconst { app, BrowserWindow, Tray, Menu, nativeImage } = require('electron');\nconst { spawn } = require('child_process');\nconst path = require('path');\n\nclass FortunaDesktopApp {\n  constructor() {\n    this.backendProcess = null;\n    this.frontendProcess = null;\n    this.mainWindow = null;\n    this.tray = null;\n  }\n\n  async startBackend() {\n    return new Promise((resolve, reject) => {\n      // Corrected pathing for a packaged app\n      const isDev = process.env.NODE_ENV !== 'production';\n      const rootPath = isDev ? path.join(__dirname, '..') : process.resourcesPath;\n      const pythonPath = path.join(rootPath, '.venv', 'Scripts', 'python.exe');\n      const apiPath = path.join(rootPath, 'python_service', 'api.py');\n\n      this.backendProcess = spawn(pythonPath, ['-m', 'uvicorn', 'api:app', '--host', '127.0.0.1', '--port', '8000'], {\n        cwd: path.join(rootPath, 'python_service')\n      });\n\n      this.backendProcess.stdout.on('data', (data) => {\n        console.log(`Backend STDOUT: ${data}`);\n        if (data.toString().includes('Uvicorn running')) {\n          console.log('Backend started successfully.');\n          resolve();\n        }\n      });\n\n      this.backendProcess.stderr.on('data', (data) => {\n        console.error(`Backend STDERR: ${data}`);\n      });\n\n      this.backendProcess.on('error', reject);\n    });\n  }\n\n  async startFrontend() {\n    const isDev = process.env.NODE_ENV !== 'production';\n    if (isDev) {\n        // In development, we assume the Next.js dev server is already running.\n        return Promise.resolve();\n    } else {\n        // In production, we would serve the built Next.js app.\n        // This part needs a production-ready server like Express or Next.js's standalone output.\n        // For now, we will assume the build is served and we just load the URL.\n        return Promise.resolve();\n    }\n  }\n\n  createMainWindow() {\n    this.mainWindow = new BrowserWindow({\n      width: 1600,\n      height: 1000,\n      title: 'Fortuna Faucet - Racing Analysis',\n      icon: path.join(__dirname, 'assets', 'icon.ico'),\n      webPreferences: {\n        nodeIntegration: false,\n        contextIsolation: true,\n        preload: path.join(__dirname, 'preload.js')\n      },\n      autoHideMenuBar: true,\n      backgroundColor: '#1a1a2e'\n    });\n\n    // In development, load from the Next.js dev server.\n    this.mainWindow.loadURL('http://localhost:3000');\n  }\n\n  createSystemTray() {\n    const iconPath = path.join(__dirname, 'assets', 'tray-icon.png');\n    const icon = nativeImage.createFromPath(iconPath);\n    this.tray = new Tray(icon.resize({ width: 16, height: 16 }));\n\n    const contextMenu = Menu.buildFromTemplate([\n      { label: 'Open Dashboard', click: () => this.mainWindow.show() },\n      { type: 'separator' },\n      { label: 'Exit', click: () => app.quit() }\n    ]);\n\n    this.tray.setToolTip('Fortuna Faucet - Monitoring Races');\n    this.tray.setContextMenu(contextMenu);\n  }\n\n  async initialize() {\n    console.log('Starting Fortuna Faucet backend...');\n    await this.startBackend();\n\n    console.log('Frontend server is assumed to be running in dev mode...');\n    await this.startFrontend();\n\n    // Wait for frontend to be ready\n    await new Promise(resolve => setTimeout(resolve, 5000));\n\n    this.createMainWindow();\n    this.createSystemTray();\n  }\n\n  cleanup() {\n    console.log('Cleaning up processes...');\n    if (this.backendProcess) this.backendProcess.kill();\n    if (this.frontendProcess) this.frontendProcess.kill();\n  }\n}\n\nlet fortunaApp;\n\napp.whenReady().then(() => {\n  fortunaApp = new FortunaDesktopApp();\n  fortunaApp.initialize();\n});\n\napp.on('window-all-closed', () => {\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (process.platform !== 'darwin') {\n    // Do not quit here, let it run in the tray\n  }\n});\n\napp.on('before-quit', () => {\n  if(fortunaApp) {\n    fortunaApp.cleanup();\n  }\n});\n"
}