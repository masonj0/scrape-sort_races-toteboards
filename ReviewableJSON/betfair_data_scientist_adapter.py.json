{
    "filepath": "src/paddock_parser/adapters/betfair_data_scientist_adapter.py",
    "content": "import asyncio\nimport pandas as pd\nfrom io import StringIO\nfrom datetime import datetime, UTC\nfrom typing import List, Optional\n\nfrom ..base import BaseAdapterV3, NormalizedRace, NormalizedRunner\nfrom ..fetcher import get_page_content\n\n\nclass BetfairDataScientistAdapter(BaseAdapterV3):\n    \"\"\"\n    Adapter for the Betfair Data Scientist API (Iggy-Joey model).\n    \"\"\"\n\n    SOURCE_ID = \"betfair_data_scientist\"\n    BASE_URL = \"https://betfair-data-supplier.herokuapp.com/api/widgets/iggy-joey/datasets\"\n\n    async def fetch(self) -> List[NormalizedRace]:\n        \"\"\"\n        Fetches and parses data from the Betfair Data Scientist API.\n        \"\"\"\n        today = datetime.now(UTC).strftime(\"%Y-%m-%d\")\n        url = f\"{self.BASE_URL}/?date={today}&presenter=RatingsPresenter&csv=true\"\n        csv_data = await get_page_content(url)\n        return self.parse_races(csv_data)\n\n    def parse_races(self, csv_content: str) -> List[NormalizedRace]:\n        \"\"\"\n        Parses the CSV content from the API into a list of NormalizedRace objects.\n        \"\"\"\n        if not csv_content:\n            return []\n\n        # Use pandas to read the CSV data\n        data = StringIO(csv_content)\n        df = pd.read_csv(data, dtype={\"selection_id\": str})\n\n        # Rename columns for easier access\n        df.rename(columns={\"meetings.races.runners.ratedPrice\": \"rating\"}, inplace=True)\n\n        # Keep only the essential columns\n        df = df[[\"market_id\", \"selection_id\", \"rating\"]]\n\n        races = {}\n        for _, row in df.iterrows():\n            race_id = str(row[\"market_id\"])\n            if race_id not in races:\n                races[race_id] = NormalizedRace(\n                    race_id=race_id,\n                    track_name=\"Unknown\", # Not in this API response\n                    race_number=0, # Not in this API response\n                    runners=[],\n                )\n            \n            runner = NormalizedRunner(\n                name=str(row[\"selection_id\"]),\n                program_number=0, # Not in this API response\n                odds=row[\"rating\"],\n            )\n            races[race_id].runners.append(runner)\n\n        return list(races.values())\n"
}