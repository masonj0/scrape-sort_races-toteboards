{
    "filepath": "src/paddock_parser/adapters/attheraces_adapter.py",
    "content": "import re\nfrom datetime import datetime\nfrom typing import List\n\nfrom bs4 import BeautifulSoup\n\nfrom ..base import BaseAdapterV3, NormalizedRace, NormalizedRunner\nfrom .utils import _convert_odds_to_float\n\n\nclass AtTheRacesAdapter(BaseAdapterV3):\n    \"\"\"\n    Adapter for attheraces.com.\n    \"\"\"\n    source_id = 'attheraces'\n\n    async def fetch(self) -> List[NormalizedRace]:\n        \"\"\"Fetches data from attheraces.com.\"\"\"\n        raise NotImplementedError(\"Live fetching for AtTheRacesAdapter is not implemented.\")\n\n    def parse_races(self, html_content: str) -> List[NormalizedRace]:\n        \"\"\"Parses the HTML content to extract race data.\"\"\"\n        if not html_content:\n            return []\n        return self._parse_race_data(html_content)\n\n    def _parse_race_data(self, html_content: str) -> List[NormalizedRace]:\n        \"\"\"\n        Parses the main HTML content to extract all race and runner information.\n        \"\"\"\n        soup = BeautifulSoup(html_content, 'lxml')\n\n        # --- Race-level data extraction ---\n        header_tag = soup.select_one(\"div.race-header h1\")\n        if not header_tag:\n            return []\n\n        header_text = header_tag.text.strip() # \"17:45 Roscommon (IRE) 01 Sep 2025\"\n\n        time_match = re.search(r'(\\d{2}:\\d{2})', header_text)\n        post_time_str = time_match.group(1) if time_match else \"\"\n\n        track_match = re.search(r'\\d{2}:\\d{2}\\s(.*?)\\s\\d{2}', header_text)\n        track_name = track_match.group(1).strip() if track_match else \"Unknown\"\n\n        date_match = re.search(r'(\\d{2}\\s\\w{3}\\s\\d{4})', header_text)\n        date_str = date_match.group(1) if date_match else \"\"\n\n        post_time = None\n        if post_time_str and date_str:\n            try:\n                dt_str = f\"{date_str} {post_time_str}\"\n                post_time = datetime.strptime(dt_str, '%d %b %Y %H:%M')\n            except ValueError:\n                post_time = None\n\n        race_info_tag = soup.select_one(\"div.race-info div\")\n        race_type = race_info_tag.text.strip() if race_info_tag else \"Unknown\"\n\n        # --- Runner-level data extraction ---\n        runners = []\n        runner_cards = soup.select(\"div.runner-card\")\n        for card in runner_cards:\n            name = card.select_one(\".horse-name a\").text.strip()\n            number = int(card.select_one(\".runner-number\").text.strip())\n            jockey = card.select_one(\".jockey\").text.strip().replace(\"J: \", \"\")\n            trainer = card.select_one(\".trainer\").text.strip().replace(\"T: \", \"\")\n            odds = card.select_one(\".odds\").text.strip()\n\n            runners.append(\n                NormalizedRunner(\n                    name=name,\n                    program_number=number,\n                    jockey=jockey,\n                    trainer=trainer,\n                    odds=_convert_odds_to_float(odds)\n                )\n            )\n\n        race = NormalizedRace(\n            race_id=f\"{track_name.replace(' ', '')}_{post_time_str.replace(':', '')}\",\n            track_name=track_name,\n            race_number=1, # Assuming 1 as per test spec\n            post_time=post_time,\n            race_type=race_type,\n            number_of_runners=len(runners),\n            runners=runners\n        )\n\n        return [race]\n"
}