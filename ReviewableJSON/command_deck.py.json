{
    "file_path": "command_deck.py",
    "content": "import streamlit as st\nimport pandas as pd\nimport requests\nimport os\nfrom dotenv import load_dotenv\n\n# --- Configuration ---\nst.set_page_config(layout=\"wide\", page_title=\"Fortuna Faucet Command Deck\")\nload_dotenv() # Load .env file\n\nAPI_BASE_URL = \"http://127.0.0.1:8000\"\nAPI_KEY = os.getenv(\"DEV_API_KEY\", \"test_api_key\")\nHEADERS = {\"X-API-Key\": API_KEY}\n\n# --- Helper Functions ---\n@st.cache_data(ttl=30)\ndef get_api_data(endpoint: str):\n    \"\"\"Fetches data from a given API endpoint.\"\"\"\n    try:\n        url = f\"{API_BASE_URL}{endpoint}\"\n        st.write(f\"*Fetching data from: `{url}`*\")\n        response = requests.get(url, headers=HEADERS)\n        response.raise_for_status()\n        return response.json(), None\n    except requests.exceptions.RequestException as e:\n        return None, str(e)\n\n# --- UI Layout ---\nst.title(\"\ud83d\ude80 Fortuna Faucet Command Deck\")\nst.markdown(\"Real-time operational dashboard for the Fortuna Faucet backend.\")\n\n# --- Sidebar Controls ---\nst.sidebar.header(\"Controls\")\nanalyzer_selection = st.sidebar.selectbox(\n    'Select Analyzer',\n    ['trifecta'] # In the future, this could be populated from an API endpoint\n)\n\nif st.sidebar.button(\"Clear Cache & Refresh Data\"):\n    st.cache_data.clear()\n\n# --- Data Display ---\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.header(f\"\ud83d\udcc8 Qualified Races (`{analyzer_selection}`)\")\n    qualified_data, error = get_api_data(f\"/api/races/qualified/{analyzer_selection}\")\n\n    if error:\n        st.error(f\"**Failed to fetch qualified races:**\\\\n\\\\n{error}\")\n    elif qualified_data:\n        if qualified_data:\n            # Corrected to use 'id' instead of 'race_id' to match the Pydantic model\n            df = pd.json_normalize(qualified_data, record_path=['runners'], meta=['id', 'venue', 'race_number', 'start_time'])\n            st.dataframe(df)\n        else:\n            st.info(f\"No races were qualified by the '{analyzer_selection}' analyzer.\")\n    else:\n        st.info(\"Awaiting data...\")\n\nwith col2:\n    st.header(\"\ud83d\udcca Adapter Status\")\n    status_data, error = get_api_data(\"/api/adapters/status\")\n\n    if error:\n        st.error(f\"**Failed to fetch adapter status:**\\\\n\\\\n{error}\")\n    elif status_data:\n        st.dataframe(pd.DataFrame(status_data))\n    else:\n        st.info(\"Awaiting data...\")"
}