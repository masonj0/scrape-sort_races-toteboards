{
    "file_path": "tests/test_api.py",
    "content": "# tests/test_api.py\nimport pytest\nimport aiosqlite\nfrom unittest.mock import patch, AsyncMock\nfrom datetime import datetime, date\nfrom decimal import Decimal\n\nfrom python_service.models import Race, Runner, OddsData, TipsheetRace\n\n# Note: The 'client' fixture is automatically available from tests/conftest.py\n\n@pytest.mark.asyncio\n@patch('python_service.engine.FortunaEngine.get_races', new_callable=AsyncMock)\nasync def test_get_races_endpoint_success(mock_get_races, client):\n    \"\"\"\n    SPEC: The /api/races endpoint should return data with a valid API key.\n    \"\"\"\n    # ARRANGE\n    today = date.today()\n    now = datetime.now()\n    mock_response_data = {\n        \"races\": [],\n        \"source_info\": []\n    }\n    mock_get_races.return_value = mock_response_data\n    headers = {\"X-API-Key\": \"test_api_key\"}\n\n    # ACT\n    response = client.get(f\"/api/races?date={today.isoformat()}\", headers=headers)\n\n    # ASSERT\n    assert response.status_code == 200\n    mock_get_races.assert_awaited_once()\n\nfrom fastapi.testclient import TestClient\n\n@pytest.mark.asyncio\nasync def test_get_tipsheet_endpoint_success(tmp_path):\n    \"\"\"\n    SPEC: The /api/tipsheet endpoint should return a list of tipsheet races from the database.\n    \"\"\"\n    db_path = tmp_path / \"test.db\"\n    post_time = datetime.now()\n\n    with patch('python_service.api.DB_PATH', db_path):\n        from python_service.api import app\n        with TestClient(app) as client:\n            async with aiosqlite.connect(db_path) as db:\n                await db.execute(\"\"\"\n                    CREATE TABLE tipsheet (\n                        race_id TEXT PRIMARY KEY,\n                        track_name TEXT,\n                        race_number INTEGER,\n                        post_time TEXT,\n                        score REAL,\n                        factors TEXT\n                    )\n                \"\"\")\n                await db.execute(\n                    \"INSERT INTO tipsheet VALUES (?, ?, ?, ?, ?, ?)\",\n                    (\"test_race_1\", \"Test Park\", 1, post_time.isoformat(), 85.5, \"{}\")\n                )\n                await db.commit()\n\n            # ACT\n            response = client.get(f\"/api/tipsheet?date={post_time.date().isoformat()}\")\n\n            # ASSERT\n            assert response.status_code == 200\n            response_data = response.json()\n            assert len(response_data) == 1\n            assert response_data[0][\"raceId\"] == \"test_race_1\"\n            assert response_data[0][\"score\"] == 85.5\n\n# --- Tests resurrected by Operation: The Great Resurrection ---\n\nfrom fastapi.testclient import TestClient\nfrom python_service.api import app\n\ndef test_health_check_unauthenticated():\n    \"\"\"Ensures the /health endpoint is accessible without an API key.\"\"\"\n    with TestClient(app) as client:\n        response = client.get(\"/health\")\n    assert response.status_code == 200\n    json_response = response.json()\n    assert json_response[\"status\"] == \"ok\"\n    assert \"timestamp\" in json_response\n\ndef test_api_key_authentication_failure():\n    \"\"\"Ensures that endpoints are protected and fail with an invalid API key.\"\"\"\n    with TestClient(app) as client:\n        response = client.get(\"/api/races/qualified/trifecta\", headers={\"X-API-KEY\": \"invalid_key\"})\n    assert response.status_code == 403\n    assert response.json() == {\"detail\": \"Invalid or missing API Key\"}\n\ndef test_api_key_authentication_missing():\n    \"\"\"Ensures that endpoints are protected and fail with a missing API key.\"\"\"\n    with TestClient(app) as client:\n        response = client.get(\"/api/races/qualified/trifecta\")\n    assert response.status_code == 403\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n"
}