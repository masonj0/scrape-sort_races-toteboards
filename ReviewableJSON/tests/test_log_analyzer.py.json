{
    "filepath": "./tests/test_log_analyzer.py",
    "content": "import pytest\nfrom pathlib import Path\nfrom src.paddock_parser.log_analyzer import analyze_log_file\n\n@pytest.fixture\ndef sample_log_file(tmp_path: Path) -> Path:\n    \"\"\"Creates a temporary log file with sample content.\"\"\"\n    log_content = \"\"\"\n2025-09-08 10:00:00 - INFO - --- Paddock Parser NG Pipeline Start ---\n2025-09-08 10:00:01 - INFO - Running adapter: skysports...\n2025-09-08 10:00:02 - DEBUG - Fetching URL: https://www.skysports.com/greyhound-racing/racecards\n2025-09-08 10:00:03 - INFO - Parsed 5 races from skysports.\n2025-09-08 10:00:04 - INFO - Running adapter: attheraces...\n2025-09-08 10:00:05 - WARNING - No races found for attheraces.\n2025-09-08 10:00:06 - INFO - Running adapter: fanduel...\n2025-09-08 10:00:07 - ERROR - An error occurred in the 'fanduel' adapter. See details below.\nTraceback (most recent call last):\n  File \"src/paddock_parser/pipeline.py\", line 145, in run_pipeline\n    normalized_races = adapter.parse_data(raw_data)\nKeyError: 'races'\n2025-09-08 10:00:08 - CRITICAL - Pipeline failure. Cannot continue.\n2025-09-08 10:00:09 - DEBUG - Some other debug message.\n\"\"\"\n    log_file = tmp_path / \"test.log\"\n    log_file.write_text(log_content)\n    return log_file\n\ndef test_analyze_log_file_with_sample_data(sample_log_file: Path):\n    \"\"\"\n    SPEC: Must correctly count log levels from a typical log file.\n    \"\"\"\n    # Act\n    counts = analyze_log_file(str(sample_log_file))\n\n    # Assert\n    assert counts == {\n        \"INFO\": 5,\n        \"DEBUG\": 2,\n        \"WARNING\": 1,\n        \"ERROR\": 1,\n        \"CRITICAL\": 1,\n    }\n\ndef test_analyze_log_file_non_existent_file():\n    \"\"\"\n    SPEC: Must return an empty dictionary if the log file does not exist.\n    \"\"\"\n    # Act\n    counts = analyze_log_file(\"non_existent_file.log\")\n\n    # Assert\n    assert counts == {}\n\ndef test_analyze_log_file_empty_file(tmp_path: Path):\n    \"\"\"\n    SPEC: Must return an empty dictionary for an empty log file.\n    \"\"\"\n    # Arrange\n    empty_log_file = tmp_path / \"empty.log\"\n    empty_log_file.write_text(\"\")\n\n    # Act\n    counts = analyze_log_file(str(empty_log_file))\n\n    # Assert\n    assert counts == {}\n\ndef test_analyze_log_file_with_no_log_levels(tmp_path: Path):\n    \"\"\"\n    SPEC: Must return an empty dictionary if the file contains no recognizable log levels.\n    \"\"\"\n    # Arrange\n    no_levels_file = tmp_path / \"no_levels.log\"\n    no_levels_file.write_text(\"This is a line.\\nSo is this.\\nAnd another one.\")\n\n    # Act\n    counts = analyze_log_file(str(no_levels_file))\n\n    # Assert\n    assert counts == {}\n"
}