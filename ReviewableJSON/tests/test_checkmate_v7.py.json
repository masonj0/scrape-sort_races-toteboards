{
    "filepath": "./tests/test_checkmate_v7.py",
    "content": "import pytest\nfrom fastapi.testclient import TestClient\nfrom src.checkmate_v7.api import app\n\nclient = TestClient(app)\n\nfrom unittest.mock import patch, MagicMock\n\n@patch('src.checkmate_v7.api.get_db_session')\n@patch('redis.Redis.from_url')\ndef test_health_check_fully_mocked(mock_redis_from_url, mock_get_db):\n    \"\"\"\n    Tests the health check endpoint with both Redis and the DB fully mocked.\n    \"\"\"\n    # Mock Redis\n    mock_redis_instance = MagicMock()\n    mock_redis_instance.ping.return_value = True\n    mock_redis_from_url.return_value = mock_redis_instance\n\n    # Mock Database Session\n    mock_db_session = MagicMock()\n    mock_get_db.return_value = mock_db_session\n\n    # Execute\n    response = client.get(\"/health\")\n\n    # Assert\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"status\"] == \"ok\"\n    assert data[\"database\"] == \"ok\"\n    assert data[\"celery\"] == \"ok\"\n\n    mock_get_db.assert_called_once()\n    # The application code wraps the SQL in a text() clause, so we need to\n    # assert the call was made and then check the string representation.\n    mock_db_session.execute.assert_called_once()\n    called_arg = mock_db_session.execute.call_args[0][0]\n    assert str(called_arg) == \"SELECT 1\"\n    mock_redis_from_url.assert_called_once()\n\ndef test_get_performance_empty():\n    response = client.get(\"/performance\")\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"total_bets\"] == 0\n    assert data[\"sample_size\"] == 0\n\nfrom unittest.mock import patch, MagicMock, AsyncMock\nfrom src.checkmate_v7 import services\nfrom src.checkmate_v7.models import Race\n\n@pytest.mark.anyio\nasync def test_data_source_orchestrator_v7():\n    \"\"\"\n    Tests the new V7 DataSourceOrchestrator logic by mocking an adapter.\n    \"\"\"\n    mock_session = MagicMock()\n    orchestrator = services.DataSourceOrchestrator(mock_session)\n\n    # Prepare mock race data\n    mock_race = Race(race_id=\"test_race_1\", track_name=\"Test Track\", race_number=1, runners=[])\n\n    # Patch the fetch_races method of the first real adapter in the list\n    with patch(\n        'src.checkmate_v7.services.PointsBetAdapterV7.fetch_races',\n        new_callable=AsyncMock\n    ) as mock_fetch:\n        mock_fetch.return_value = [mock_race]\n\n        # Execute\n        races = await orchestrator.get_races()\n\n        # Assert\n        assert len(races) == 1\n        assert races[0].race_id == \"test_race_1\"\n        mock_fetch.assert_awaited_once()\n"
}