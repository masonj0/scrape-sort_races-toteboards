{
    "filepath": "./tests/test_checkmate_v7.py",
    "content": "import pytest\nfrom fastapi.testclient import TestClient\nfrom src.checkmate_v7.api import app\n\nclient = TestClient(app)\n\nfrom unittest.mock import patch, MagicMock\n\n@patch('src.checkmate_v7.api.get_db_session')\n@patch('redis.Redis.from_url')\ndef test_health_check_fully_mocked(mock_redis_from_url, mock_get_db):\n    \"\"\"\n    Tests the health check endpoint with both Redis and the DB fully mocked.\n    \"\"\"\n    # Mock Redis\n    mock_redis_instance = MagicMock()\n    mock_redis_instance.ping.return_value = True\n    mock_redis_from_url.return_value = mock_redis_instance\n\n    # Mock Database Session\n    mock_db_session = MagicMock()\n    mock_get_db.return_value = mock_db_session\n\n    # Execute\n    response = client.get(\"/health\")\n\n    # Assert\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"status\"] == \"ok\"\n    assert data[\"database\"] == \"ok\"\n    assert data[\"celery\"] == \"ok\"\n\n    mock_get_db.assert_called_once()\n    # The application code wraps the SQL in a text() clause, so we need to\n    # assert the call was made and then check the string representation.\n    mock_db_session.execute.assert_called_once()\n    called_arg = mock_db_session.execute.call_args[0][0]\n    assert str(called_arg) == \"SELECT 1\"\n    mock_redis_from_url.assert_called_once()\n\n@patch('src.checkmate_v7.api.get_db_session')\ndef test_get_performance_empty(mock_get_db):\n    # Mock the session to return an empty list for the query\n    mock_session = MagicMock()\n    mock_session.query.return_value.filter_by.return_value.all.return_value = []\n    mock_get_db.return_value = mock_session\n\n    response = client.get(\"/performance\")\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"totalBets\"] == 0\n    assert data[\"sampleSize\"] == 0\n    mock_get_db.assert_called_once()\n\nfrom unittest.mock import patch, MagicMock\nfrom src.checkmate_v7 import services\nfrom src.checkmate_v7.models import Race\n\ndef test_data_source_orchestrator_v7():\n    \"\"\"\n    Tests the new V7 DataSourceOrchestrator logic by mocking an adapter.\n    \"\"\"\n    mock_session = MagicMock()\n    orchestrator = services.DataSourceOrchestrator(mock_session)\n\n    # Prepare mock race data\n    mock_race = Race(race_id=\"test_race_1\", track_name=\"Test Track\", race_number=1, runners=[])\n\n    # Patch the fetch_races method of an adapter to control its output\n    with patch(\n        'src.checkmate_v7.adapters.AndWereOff.SkySportsAdapter.fetch_races',\n        new_callable=MagicMock\n    ) as mock_fetch:\n        mock_fetch.return_value = [mock_race]\n\n        # Execute\n        races, statuses = orchestrator.get_races()\n\n        # Assert\n        assert len(races) >= 1 # Can be more than one if other adapters run\n        assert races[0].race_id == \"test_race_1\"\n        assert len(statuses) > 0\n        # The first adapter in the list is SkySports\n        assert statuses[0][\"adapter_id\"] == \"SkySportsAdapter\"\n        assert statuses[0][\"status\"] == \"OK\"\n\n@patch('src.checkmate_v7.api.services.DataSourceOrchestrator')\ndef test_get_all_races_endpoint(MockOrchestrator):\n    \"\"\"\n    Tests the /api/v1/races/all endpoint, mocking the data source.\n    \"\"\"\n    # --- Mock Setup ---\n    mock_orchestrator_instance = MagicMock()\n\n    # Configure the mock to return a list of simple Race objects\n    from src.checkmate_v7.models import Race, Runner\n    mock_orchestrator_instance.get_races.return_value = ([\n        Race(\n            race_id=\"R1\",\n            track_name=\"Test Track\",\n            race_number=1,\n            race_type=\"Stakes\",\n            runners=[\n                Runner(name=\"Fav\", odds=2.0),\n                Runner(name=\"SecondFav\", odds=4.0),\n                Runner(name=\"Third\", odds=10.0),\n                Runner(name=\"Fourth\", odds=12.0),\n                Runner(name=\"Fifth\", odds=15.0),\n            ]\n        )\n    ], [])\n    MockOrchestrator.return_value = mock_orchestrator_instance\n\n    # --- Run ---\n    response = client.get(\"/api/v1/races/all\")\n\n    # --- Assertions ---\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, list)\n    assert len(data) == 1\n\n    race_data = data[0]\n    # Check for enrichment fields\n    assert \"checkmateScore\" in race_data\n    assert \"qualified\" in race_data\n    assert \"trifectaFactors\" in race_data\n\n    # Verify the analysis was run correctly for our test case\n    # This race should qualify and have a score of 100\n    assert race_data[\"qualified\"] is True\n    assert race_data[\"checkmateScore\"] == 100\n    assert race_data[\"trifectaFactors\"][\"fieldSize\"][\"ok\"] is True\n"
}