{
    "file_path": "tests/test_analyzer.py",
    "content": "import pytest\nfrom decimal import Decimal\nfrom datetime import datetime\nfrom python_service.models import Race, Runner, OddsData\nfrom python_service.analyzer import AnalyzerEngine, TrifectaAnalyzer, _get_best_win_odds\n\n# Helper to create runners for tests\ndef create_runner(number, odds_val=None, scratched=False):\n    odds_data = {}\n    if odds_val:\n        odds_data[\"TestOdds\"] = OddsData(win=Decimal(str(odds_val)), source=\"TestOdds\", last_updated=datetime.now())\n    return Runner(number=number, name=f\"Runner {number}\", odds=odds_data, scratched=scratched)\n\n@pytest.fixture\ndef sample_races_for_true_trifecta():\n    \"\"\"Provides a list of sample Race objects for the new 'True Trifecta' logic.\"\"\"\n    return [\n        # Race 1: Should PASS all criteria, will have a lower score\n        Race(\n            id=\"race_pass_1\", venue=\"Test Park\", race_number=1, start_time=datetime.now(), source=\"Test\",\n            runners=[\n                create_runner(1, 3.0), # Favorite\n                create_runner(2, 4.5), # Second Favorite\n                create_runner(3, 5.0),\n            ]\n        ),\n        # Race 2: Should FAIL (Field size too large)\n        Race(\n            id=\"race_fail_field_size\", venue=\"Test Park\", race_number=2, start_time=datetime.now(), source=\"Test\",\n            runners=[create_runner(i, 5.0 + i) for i in range(1, 12)] # 11 runners\n        ),\n        # Race 3: Should FAIL (Favorite odds too low)\n        Race(\n            id=\"race_fail_fav_odds\", venue=\"Test Park\", race_number=3, start_time=datetime.now(), source=\"Test\",\n            runners=[create_runner(1, 2.0), create_runner(2, 4.5)]\n        ),\n        # Race 4: Should FAIL (Second favorite odds too low)\n        Race(\n            id=\"race_fail_2nd_fav_odds\", venue=\"Test Park\", race_number=4, start_time=datetime.now(), source=\"Test\",\n            runners=[create_runner(1, 3.0), create_runner(2, 3.5)]\n        ),\n        # Race 5: Should also PASS and have a higher score than race_pass_1\n        Race(\n            id=\"race_pass_2\", venue=\"Test Park\", race_number=5, start_time=datetime.now(), source=\"Test\",\n            runners=[\n                create_runner(1, 4.0), # Favorite\n                create_runner(2, 6.0), # Second Favorite\n                create_runner(3, 8.0),\n                create_runner(4, 12.0),\n                create_runner(5, 15.0),\n            ]\n        ),\n    ]\n\ndef test_analyzer_engine_discovery():\n    \"\"\"Tests that the AnalyzerEngine correctly discovers the TrifectaAnalyzer.\"\"\"\n    engine = AnalyzerEngine()\n    assert 'trifecta' in engine.analyzers\n    assert engine.analyzers['trifecta'] == TrifectaAnalyzer\n\ndef test_analyzer_engine_get_analyzer():\n    \"\"\"Tests that the AnalyzerEngine can instantiate a specific analyzer.\"\"\"\n    engine = AnalyzerEngine()\n    analyzer = engine.get_analyzer('trifecta', max_field_size=8)\n    assert isinstance(analyzer, TrifectaAnalyzer)\n    assert analyzer.max_field_size == 8\n\ndef test_analyzer_engine_get_nonexistent_analyzer():\n    \"\"\"Tests that requesting a non-existent analyzer raises a ValueError.\"\"\"\n    engine = AnalyzerEngine()\n    with pytest.raises(ValueError, match=\"Analyzer 'nonexistent' not found.\"):\n        engine.get_analyzer('nonexistent')\n\ndef test_trifecta_analyzer_plugin_logic(sample_races_for_true_trifecta):\n    \"\"\"\n    Tests the TrifectaAnalyzer's scoring, sorting, and new response structure.\n    \"\"\"\n    engine = AnalyzerEngine()\n    analyzer = engine.get_analyzer('trifecta')  # Use default criteria\n\n    result = analyzer.qualify_races(sample_races_for_true_trifecta)\n\n    # 1. Verify the new response structure\n    assert isinstance(result, dict)\n    assert \"criteria\" in result\n    assert \"races\" in result\n    assert result['criteria']['max_field_size'] == 10\n\n    qualified_races = result['races']\n\n    # 2. Check that the correct number of races were qualified\n    assert len(qualified_races) == 2\n\n    # 3. Check that the scores have been assigned and are valid numbers\n    assert qualified_races[0].qualification_score is not None\n    assert qualified_races[1].qualification_score is not None\n    assert isinstance(qualified_races[0].qualification_score, float)\n\n    # 4. Check that the races are sorted by score in descending order\n    assert qualified_races[0].qualification_score > qualified_races[1].qualification_score\n    assert qualified_races[0].id == \"race_pass_2\"  # This race should have the higher score\n    assert qualified_races[1].id == \"race_pass_1\"\n\ndef test_get_best_win_odds_helper():\n    \"\"\"Tests the helper function for finding the best odds.\"\"\"\n    runner_with_odds = create_runner(1)\n    runner_with_odds.odds = {\n        \"SourceA\": OddsData(win=Decimal(\"3.0\"), source=\"A\", last_updated=datetime.now()),\n        \"SourceB\": OddsData(win=Decimal(\"2.5\"), source=\"B\", last_updated=datetime.now()),\n    }\n    assert _get_best_win_odds(runner_with_odds) == Decimal(\"2.5\")\n\n    runner_no_odds = create_runner(2)\n    assert _get_best_win_odds(runner_no_odds) is None\n\n    runner_no_win = create_runner(3)\n    runner_no_win.odds = {\"SourceA\": OddsData(win=None, source=\"A\", last_updated=datetime.now())}\n    assert _get_best_win_odds(runner_no_win) is None\n\n# Test case added by Operation: Resurrect and Modernize\nfrom python_service.models import Race, Runner\nimport datetime\n\ndef test_trifecta_analyzer_rejects_races_with_too_few_runners(trifecta_analyzer):\n    \"\"\"Ensure analyzer rejects races with < 3 runners for a trifecta.\"\"\"\n    race_with_two_runners = Race(\n        id='test_race_123',\n        venue='TEST',\n        race_number=1,\n        start_time=datetime.datetime.now(),\n        runners=[\n            Runner(number=1, name='Horse A', odds='2/1', scratched=False),\n            Runner(number=2, name='Horse B', odds='3/1', scratched=False)\n        ],\n        source='test'\n    )\n\n    is_qualified = trifecta_analyzer.is_race_qualified(race_with_two_runners)\n    assert not is_qualified, 'Trifecta analyzer should not qualify a race with only two runners.'\n"
}