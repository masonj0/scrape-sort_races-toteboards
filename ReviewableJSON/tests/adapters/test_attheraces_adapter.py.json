{
    "filepath": "./tests/adapters/test_attheraces_adapter.py",
    "content": "import pytest\nfrom unittest.mock import patch, AsyncMock\nfrom src.paddock_parser.adapters.attheraces_adapter import AtTheRacesAdapter\n\n@pytest.fixture\ndef mock_race_card_html():\n    return \"\"\"\n    <section class=\"panel\">\n        <h2 class=\"h6\">Lingfield Park Racecards</h2>\n        <div class=\"meeting-list-entry\">\n            <a href=\"/racecard/Lingfield/1/2025-09-08\" class=\"a--plain\">\n                <span class=\"post__number\">1</span>\n                <span class=\"h7\">13:50 - Sky Sports Racing Open Maiden</span>\n            </a>\n        </div>\n    </section>\n    \"\"\"\n\n@pytest.fixture\ndef mock_race_page_html():\n    return \"\"\"\n    <div class=\"race-header\"><h1>13:50 Lingfield Park 08 Sep 2025</h1></div>\n    <div class=\"race-info\"><div>(4yo+, 6f)</div></div>\n    <div class=\"runner-card\">\n        <div class=\"runner-number\">1</div>\n        <div class=\"horse-name\"><a>Horse One</a></div>\n        <div class=\"odds\">5/1</div>\n    </div>\n    <div class=\"runner-card\">\n        <div class=\"runner-number\">2</div>\n        <div class=\"horse-name\"><a>Horse Two</a></div>\n        <div class=\"odds\">EVS</div>\n    </div>\n    \"\"\"\n\n@pytest.mark.anyio\n@patch('src.paddock_parser.adapters.attheraces_adapter.get_page_content')\nasync def test_fetch_e2e(mock_get_page_content, mock_race_card_html, mock_race_page_html):\n    \"\"\"\n    SPEC: Full end-to-end test of the fetch method.\n    \"\"\"\n    # Mock the two calls to get_page_content\n    mock_get_page_content.side_effect = [\n        mock_race_card_html,\n        mock_race_page_html\n    ]\n\n    adapter = AtTheRacesAdapter()\n    races = await adapter.fetch()\n\n    assert len(races) == 1\n    race = races[0]\n    assert race.track_name == \"Lingfield Park\"\n    assert race.race_number == 1\n    assert race.number_of_runners == 2\n    assert race.runners[0].name == \"Horse One\"\n    assert race.runners[0].odds == pytest.approx(6.0)\n    assert race.runners[1].name == \"Horse Two\"\n    assert race.runners[1].odds == pytest.approx(2.0)\n\ndef test_parse_races_is_not_supported(mock_race_page_html):\n    \"\"\"\n    SPEC: This adapter does not support offline parsing.\n    \"\"\"\n    adapter = AtTheRacesAdapter()\n    races = adapter.parse_races(mock_race_page_html)\n    assert races == []\n"
}