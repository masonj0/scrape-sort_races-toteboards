{
    "filepath": "./tests/adapters/test_atg_adapter.py",
    "content": "import json\nimport unittest\nfrom unittest.mock import patch, MagicMock, AsyncMock\nfrom datetime import datetime, timezone\nimport pytest\nfrom src.paddock_parser.adapters.atg_adapter import AtgAdapter\nfrom src.paddock_parser.base import NormalizedRace, NormalizedRunner\n\nclass TestAtgAdapter:\n\n    @pytest.fixture\n    def adapter(self):\n        return AtgAdapter()\n\n    @pytest.fixture\n    def mock_response_json(self):\n        return {\n            \"data\": {\n                \"game\": {\n                    \"id\": \"V75_2025-09-10\",\n                    \"status\": \"RESULTS\",\n                    \"races\": [\n                        {\n                            \"id\": \"1\",\n                            \"name\": \"Race 1\",\n                            \"startTime\": \"2025-09-10T12:00:00Z\",\n                            \"horses\": [\n                                {\n                                    \"id\": \"1\",\n                                    \"name\": \"Horse A\",\n                                    \"money\": 1000,\n                                    \"results\": { \"place\": 1 },\n                                    \"scratched\": False\n                                },\n                                {\n                                    \"id\": \"2\",\n                                    \"name\": \"Horse B\",\n                                    \"money\": 500,\n                                    \"results\": { \"place\": 2 },\n                                    \"scratched\": False\n                                }\n                            ]\n                        },\n                        {\n                            \"id\": \"2\",\n                            \"name\": \"Race 2\",\n                            \"startTime\": \"2025-09-10T12:30:00Z\",\n                            \"horses\": [\n                                {\n                                    \"id\": \"3\",\n                                    \"name\": \"Horse C\",\n                                    \"money\": 2000,\n                                    \"results\": { \"place\": 1 },\n                                    \"scratched\": False\n                                }\n                            ]\n                        }\n                    ]\n                }\n            }\n        }\n\n    @pytest.mark.anyio\n    async def test_fetch_and_parse(self, adapter, mock_response_json):\n        # 1. Mock the response object that client.post() will return\n        mock_response = AsyncMock()\n        mock_response.json.return_value = mock_response_json\n        mock_response.raise_for_status = MagicMock()\n\n        # 2. Mock the client instance that the 'async with' will yield\n        mock_client_instance = AsyncMock()\n        mock_client_instance.post.return_value = mock_response\n\n        # 3. Patch the AsyncClient class, and configure its __aenter__ to return our mock client instance\n        with patch(\"httpx.AsyncClient\") as mock_async_client_class:\n            mock_async_client_class.return_value.__aenter__.return_value = mock_client_instance\n\n            # 4. Run the fetch method\n            races = await adapter.fetch()\n\n            # 5. Assertions\n            assert len(races) == 2\n\n            race1 = races[0]\n            assert race1.race_id == \"1\"\n            assert race1.race_type == \"Race 1\"\n            assert race1.post_time == datetime(2025, 9, 10, 12, 0, tzinfo=timezone.utc)\n            assert race1.number_of_runners == 2\n            assert len(race1.runners) == 2\n\n            runner1 = race1.runners[0]\n            assert runner1.name == \"Horse A\"\n            assert not runner1.scratched\n\n            race2 = races[1]\n            assert race2.race_id == \"2\"\n            assert race2.number_of_runners == 1\n"
}