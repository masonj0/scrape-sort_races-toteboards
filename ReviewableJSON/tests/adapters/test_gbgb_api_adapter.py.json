{
    "file_path": "tests/adapters/test_gbgb_api_adapter.py",
    "content": "# tests/adapters/test_gbgb_api_adapter.py\n\nimport pytest\nimport respx\nimport httpx\nfrom datetime import date\nfrom decimal import Decimal\n\nfrom python_service.config import get_settings\nfrom python_service.adapters.gbgb_api_adapter import GbgbApiAdapter\n\n@pytest.fixture\ndef gbgb_adapter():\n    \"\"\"Returns a GbgbApiAdapter instance for testing.\"\"\"\n    return GbgbApiAdapter(config=get_settings())\n\n@pytest.mark.asyncio\n@respx.mock\nasync def test_fetch_gbgb_races_successfully(gbgb_adapter):\n    \"\"\"\n    SPEC: The GbgbApiAdapter should correctly parse a standard API response,\n    creating Race and Runner objects with the correct data, including fractional odds.\n    \"\"\"\n    # ARRANGE\n    mock_date = date.today().strftime('%Y-%m-%d')\n    mock_url = f\"{gbgb_adapter.base_url}results/meeting/{mock_date}\"\n\n    mock_api_response = [\n        {\n            \"trackName\": \"Towcester\",\n            \"races\": [\n                {\n                    \"raceId\": 12345,\n                    \"raceNumber\": 1,\n                    \"raceTime\": \"2025-10-09T18:00:00Z\",\n                    \"raceTitle\": \"The October Sprint\",\n                    \"raceDistance\": 500,\n                    \"traps\": [\n                        {\n                            \"trapNumber\": 1,\n                            \"dogName\": \"Rapid Rover\",\n                            \"sp\": \"5/2\"\n                        },\n                        {\n                            \"trapNumber\": 2,\n                            \"dogName\": \"Speedy Sue\",\n                            \"sp\": \"EVS\" # Test even money\n                        },\n                        {\n                            \"trapNumber\": 3,\n                            \"dogName\": \"Lazy Larry\",\n                            \"sp\": \"10/1\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n\n    respx.get(mock_url).mock(return_value=httpx.Response(200, json=mock_api_response))\n\n    # ACT\n    async with httpx.AsyncClient() as client:\n        result = await gbgb_adapter.fetch_races(mock_date, client)\n\n    # ASSERT\n    assert result['source_info']['status'] == 'SUCCESS'\n    assert len(result['races']) == 1\n\n    race = result['races'][0]\n    assert race.venue == \"Towcester\"\n    assert race.race_number == 1\n    assert race.race_name == \"The October Sprint\"\n    assert race.distance == \"500m\"\n    assert len(race.runners) == 3\n\n    runner1 = next(r for r in race.runners if r.number == 1)\n    assert runner1.name == \"Rapid Rover\"\n    assert runner1.odds['GBGB'].win == Decimal(\"3.5\")\n\n    runner2 = next(r for r in race.runners if r.number == 2)\n    assert runner2.name == \"Speedy Sue\"\n    assert runner2.odds['GBGB'].win == Decimal(\"2.0\")\n\n    runner3 = next(r for r in race.runners if r.number == 3)\n    assert runner3.name == \"Lazy Larry\"\n    assert runner3.odds['GBGB'].win == Decimal(\"11.0\")"
}