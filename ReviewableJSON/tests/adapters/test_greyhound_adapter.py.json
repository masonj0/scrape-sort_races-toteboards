{
    "file_path": "tests/adapters/test_greyhound_adapter.py",
    "content": "import pytest\nfrom unittest.mock import AsyncMock, Mock, patch\nfrom datetime import date, datetime\nfrom python_service.adapters.greyhound_adapter import GreyhoundAdapter\nfrom python_service.config import Settings\n\n@pytest.fixture\ndef mock_config():\n    \"\"\"\n    Provides a mock config object for the adapter, ensuring it doesn't\n    load from any .env files, which prevents test pollution.\n    \"\"\"\n    class TestSettings(Settings):\n        class Config:\n            env_file = None\n\n    return TestSettings(\n        BETFAIR_APP_KEY=\"test_key\",\n        BETFAIR_USERNAME=\"test_user\",\n        BETFAIR_PASSWORD=\"test_password\",\n        API_KEY=\"test_api_key\",\n        GREYHOUND_API_URL=\"https://api.example.com\"\n    )\n\n@pytest.mark.asyncio\n@patch('python_service.adapters.greyhound_adapter.GreyhoundAdapter.make_request', new_callable=AsyncMock)\nasync def test_fetch_races_parses_correctly(mock_make_request, mock_config):\n    \"\"\"\n    Tests that the GreyhoundAdapter correctly parses a valid API response.\n    \"\"\"\n    # ARRANGE\n    adapter = GreyhoundAdapter(config=mock_config)\n    today = date.today().strftime('%Y-%m-%d')\n\n    mock_api_response = {\n        \"cards\": [\n            {\n                \"track_name\": \"Test Track\",\n                \"races\": [\n                    {\n                        \"race_id\": \"test_race_123\",\n                        \"race_number\": 1,\n                        \"start_time\": int(datetime.now().timestamp()),\n                        \"runners\": [\n                            {\n                                \"dog_name\": \"Rapid Rover\",\n                                \"trap_number\": 1,\n                                \"odds\": {\"win\": \"2.5\"}\n                            },\n                            {\n                                \"dog_name\": \"Swift Sprint\",\n                                \"trap_number\": 2,\n                                \"scratched\": True\n                            },\n                            {\n                                \"dog_name\": \"Lazy Larry\",\n                                \"trap_number\": 3,\n                                \"odds\": {\"win\": \"10.0\"}\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n    mock_response = Mock()\n    mock_response.json.return_value = mock_api_response\n    mock_make_request.return_value = mock_response\n\n    # ACT\n    result = await adapter.fetch_races(today, AsyncMock())\n\n    # ASSERT\n    assert result is not None\n    assert result['source_info']['status'] == 'SUCCESS'\n    assert result['source_info']['races_fetched'] == 1\n\n    races = result['races']\n    assert len(races) == 1\n\n    race = races[0]\n    assert race.id == 'greyhound_test_race_123'\n    assert race.venue == 'Test Track'\n    assert len(race.runners) == 2 # One was scratched\n\n    runner1 = race.runners[0]\n    assert runner1.name == 'Rapid Rover'\n    assert runner1.number == 1\n    assert runner1.odds['Greyhound Racing'].win == 2.5\n\n@pytest.mark.asyncio\n@patch('python_service.adapters.greyhound_adapter.GreyhoundAdapter.make_request', new_callable=AsyncMock)\nasync def test_fetch_races_handles_empty_response(mock_make_request, mock_config):\n    \"\"\"\n    Tests that the GreyhoundAdapter handles an empty or invalid API response gracefully.\n    \"\"\"\n    # ARRANGE\n    adapter = GreyhoundAdapter(config=mock_config)\n    today = date.today().strftime('%Y-%m-%d')\n    mock_response = Mock()\n    mock_response.json.return_value = {\"cards\": []}\n    mock_make_request.return_value = mock_response\n\n    # ACT\n    result = await adapter.fetch_races(today, AsyncMock())\n\n    # ASSERT\n    assert result is not None\n    assert result['source_info']['status'] == 'SUCCESS'\n    assert result['source_info']['races_fetched'] == 0\n    assert result['source_info']['error_message'] == \"No race cards found for date.\"\n    assert len(result['races']) == 0"
}