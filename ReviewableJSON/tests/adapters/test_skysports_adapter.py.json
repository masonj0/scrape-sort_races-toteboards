{
    "filepath": "./tests/adapters/test_skysports_adapter.py",
    "content": "import pytest\nfrom pathlib import Path\nfrom unittest.mock import patch, AsyncMock\nfrom src.paddock_parser.adapters.skysports_adapter import SkySportsAdapter\n\n@pytest.fixture\ndef mock_race_card_html():\n    # A simplified version of the racecards index page\n    return \"\"\"\n    <div class=\"sdc-site-concertina-block\">\n        <h3 class=\"sdc-site-concertina-block__title\">\n            <span class=\"sdc-site-concertina-block__title\">Chelmsford City</span>\n        </h3>\n        <div class=\"sdc-site-racing-meetings__event\">\n            <a class=\"sdc-site-racing-meetings__event-link\" href=\"/racing/results/full-result/12345\"></a>\n        </div>\n    </div>\n    \"\"\"\n\n@pytest.fixture\ndef mock_race_detail_html():\n    # A simplified version of a race detail page\n    return Path(__file__).parent.joinpath(\"skysports_race_detail_sample.html\").read_text()\n\nimport sys\n\n@pytest.mark.anyio\n@patch(\"src.paddock_parser.adapters.skysports_adapter.get_page_content\")\nasync def test_skysports_adapter_fetches_and_parses(mock_get_page_content, mock_race_card_html, mock_race_detail_html):\n    \"\"\"\n    Tests the full end-to-end fetch and parse process for SkySportsAdapter,\n    mocking the new resilient fetcher.\n    \"\"\"\n    if 'trio' in sys.modules:\n        pytest.skip(\"Skipping skysports test on trio due to asyncio.gather conflict.\")\n    # --- Setup ---\n    # Configure the mock to return the index page on the first call,\n    # and the detail page on the second call.\n    mock_get_page_content.side_effect = [\n        mock_race_card_html,\n        mock_race_detail_html\n    ]\n\n    adapter = SkySportsAdapter()\n\n    # --- Run ---\n    races = await adapter.fetch()\n\n    # --- Assertions ---\n    # The adapter should make one call for the index, and one for the single race link found.\n    assert mock_get_page_content.call_count == 2\n\n    # We should have parsed exactly one race.\n    assert len(races) == 1\n    race = races[0]\n\n    # Assert details from the parsed race.\n    assert race.track_name == \"Chelmsford City\"\n    assert race.race_number == 1\n    assert race.race_type == \"Handicap\" # from \"Handicap\" in the h2 title\n    assert len(race.runners) == 2\n\n    runner1 = race.runners[0]\n    assert runner1.name == \"Horse One\"\n    assert runner1.program_number == 1\n    assert runner1.odds == pytest.approx(6.0) # 5/1\n\n    runner2 = race.runners[1]\n    assert runner2.name == \"Horse Two\"\n    assert runner2.program_number == 2\n    assert runner2.odds == pytest.approx(2.0) # EVENS\n"
}