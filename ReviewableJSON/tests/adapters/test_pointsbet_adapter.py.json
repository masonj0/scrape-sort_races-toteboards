{
    "filepath": "./tests/adapters/test_pointsbet_adapter.py",
    "content": "import json\nimport pytest\nfrom pathlib import Path\nfrom datetime import datetime\nfrom unittest.mock import patch, AsyncMock\n\nfrom src.paddock_parser.adapters.pointsbet_adapter import PointsBetAdapter\nfrom src.paddock_parser.base import NormalizedRace, NormalizedRunner\n\n@pytest.fixture\ndef mock_pointsbet_json():\n    \"\"\"Loads the mock PointsBet API response.\"\"\"\n    fixture_path = Path(__file__).parent / \"mock_data\" / \"pointsbet_sample.json\"\n    with open(fixture_path, 'r') as f:\n        return json.load(f)\n\ndef test_pointsbet_adapter_parse_method(mock_pointsbet_json):\n    \"\"\"\n    Tests that the PointsBetAdapter's parse method correctly processes\n    a raw JSON response into a list of NormalizedRace objects.\n    This test acts as the specification for the parsing logic.\n    \"\"\"\n    # 1. Setup\n    adapter = PointsBetAdapter()\n    events_data = mock_pointsbet_json['events']\n\n    # 2. Execution\n    parsed_races = adapter.parse(events_data)\n\n    # 3. Assertions\n    assert isinstance(parsed_races, list)\n    # The mock data has 4 events, but only 2 are valid races with runners.\n    assert len(parsed_races) == 2\n\n    # --- Detailed assertions for the first race ---\n    first_race = parsed_races[0]\n    assert isinstance(first_race, NormalizedRace)\n    assert first_race.race_id == \"PB-12345\"\n    assert first_race.track_name == \"Flemington\"\n    assert first_race.race_number == 1\n    assert first_race.post_time == datetime.fromisoformat(\"2025-09-12T13:00:00+00:00\")\n    assert first_race.number_of_runners == 3\n    assert len(first_race.runners) == 3\n\n    # --- Detailed assertions for the first runner of the first race ---\n    first_runner = first_race.runners[0]\n    assert isinstance(first_runner, NormalizedRunner)\n    assert first_runner.name == \"Speedy Steed\"\n    assert first_runner.program_number == 1\n    assert first_runner.odds == 4.50\n\n    # --- Check another runner to be sure ---\n    third_runner = first_race.runners[2]\n    assert third_runner.name == \"Wired Winner\"\n    assert third_runner.program_number == 3\n    assert third_runner.odds == 3.20\n\n    # --- Detailed assertions for the second race ---\n    second_race = parsed_races[1]\n    assert second_race.track_name == \"Flemington\"\n    assert second_race.race_number == 2\n    assert len(second_race.runners) == 2\n\n@pytest.mark.anyio\n@patch('src.paddock_parser.adapters.pointsbet_adapter.get_page_content', new_callable=AsyncMock)\nasync def test_pointsbet_adapter_fetch_method(mock_get_page_content, mock_pointsbet_json):\n    \"\"\"\n    Tests that the PointsBetAdapter's fetch method correctly calls the fetcher,\n    parses the content, and returns a list of NormalizedRace objects.\n    \"\"\"\n    # 1. Setup\n    mock_get_page_content.return_value = json.dumps(mock_pointsbet_json)\n    adapter = PointsBetAdapter()\n\n    # 2. Execution\n    fetched_races = await adapter.fetch()\n\n    # 3. Assertions\n    mock_get_page_content.assert_called_once_with(\n        \"https://api.au.pointsbet.com/api/v2/racing/races/today\"\n    )\n\n    assert isinstance(fetched_races, list)\n    assert len(fetched_races) == 2\n    assert fetched_races[0].track_name == \"Flemington\"\n"
}