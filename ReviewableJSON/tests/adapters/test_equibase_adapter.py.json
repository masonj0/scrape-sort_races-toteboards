{
    "filepath": "./tests/adapters/test_equibase_adapter.py",
    "content": "import pytest\nfrom datetime import date\nfrom unittest.mock import patch, MagicMock\nfrom src.paddock_parser.adapters.equibase_adapter import EquibaseAdapter\n\n@pytest.fixture\ndef adapter():\n    return EquibaseAdapter()\n\n@pytest.fixture\ndef sample_html():\n    with open(\"tests/adapters/mock_data/equibase_test_sample.html\", \"r\") as f:\n        return f.read()\n\ndef test_parse_race_schedule(adapter, sample_html):\n    \"\"\"\n    Tests that the parse_races method correctly extracts race numbers and track names\n    from the sample HTML.\n    \"\"\"\n    races = adapter.parse_races(sample_html)\n\n    assert len(races) == 3\n\n    assert races[0].track == \"Saratoga\"\n    assert races[0].race_number == 1\n\n    assert races[1].track == \"Saratoga\"\n    assert races[1].race_number == 2\n\n    assert races[2].track == \"Gulfstream Park\"\n    assert races[2].race_number == 8\n\n@patch('src.paddock_parser.adapters.equibase_adapter.get_page_content')\ndef test_fetch_races(mock_get_page_content, adapter, sample_html):\n    \"\"\"\n    Tests that the fetch method correctly calls get_page_content and\n    the parse_races method.\n    \"\"\"\n    # Create an async mock for get_page_content\n    async_mock = MagicMock()\n    async_mock.return_value = sample_html\n    mock_get_page_content.return_value = async_mock()\n\n    # Since fetch is async, we need to run it in an event loop.\n    # Pytest-asyncio would handle this automatically, but we can do it manually.\n    import asyncio\n    fetch_date = date(2025, 8, 22)\n    races = asyncio.run(adapter.fetch(fetch_date))\n\n    # Verify get_page_content was called with the correct URL\n    expected_url = \"http://www.equibase.com/entries/ENT_082225.html?COUNTRY=USA\"\n    mock_get_page_content.assert_called_once_with(expected_url)\n\n    # Verify the parsing result\n    assert len(races) == 3\n    assert races[0].track == \"Saratoga\"\n    assert races[2].race_number == 8\n\ndef test_parse_with_no_content(adapter):\n    \"\"\"\n    Tests that the parser returns an empty list when given no HTML content.\n    \"\"\"\n    races = adapter.parse_races(\"\")\n    assert len(races) == 0\n\n@patch('src.paddock_parser.adapters.equibase_adapter.get_page_content')\ndef test_fetch_with_no_content(mock_get_page_content, adapter):\n    \"\"\"\n    Tests that fetch returns an empty list if no content is retrieved.\n    \"\"\"\n    async_mock = MagicMock()\n    async_mock.return_value = None\n    mock_get_page_content.return_value = async_mock()\n\n    import asyncio\n    fetch_date = date(2025, 8, 22)\n    races = asyncio.run(adapter.fetch(fetch_date))\n\n    assert len(races) == 0\n"
}