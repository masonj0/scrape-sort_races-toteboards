{
    "filepath": "./tests/adapters/test_timeform_adapter.py",
    "content": "import pytest\nfrom pathlib import Path\nfrom unittest.mock import patch, AsyncMock\nimport sys\nfrom src.paddock_parser.adapters.timeform_adapter import TimeformAdapter\nfrom src.paddock_parser.base import NormalizedRace, NormalizedRunner\n\n@pytest.fixture\ndef mock_html():\n    path = Path(__file__).parent / \"timeform.html\"\n    return path.read_text()\n\n@pytest.fixture\ndef mock_race_detail_html():\n    path = Path(__file__).parent / \"mock_data\" / \"timeform_race_detail_sample.html\"\n    return path.read_text()\n\n@pytest.mark.anyio\n@patch(\"src.paddock_parser.adapters.timeform_adapter.ForagerClient.fetch\")\nasync def test_fetch(mock_fetch, mock_html, mock_race_detail_html):\n    \"\"\"\n    Tests the full end-to-end fetch and parse process for TimeformAdapter.\n    \"\"\"\n    if 'trio' in sys.modules:\n        pytest.skip(\"Skipping timeform test on trio due to potential event loop conflicts.\")\n\n    # The first call to fetch will be for the index page.\n    # The subsequent 35 calls will be for the race detail pages.\n    mock_fetch.side_effect = [mock_html] + ([mock_race_detail_html] * 35)\n\n    adapter = TimeformAdapter()\n    races = await adapter.fetch()\n\n    assert mock_fetch.call_count == 36\n    assert len(races) == 35\n\n    # Check a sample race from the mocked detail pages\n    a_race = races[0]\n    assert a_race.track_name == \"HAYDOCK PARK\"\n    assert a_race.number_of_runners == 9\n    assert len(a_race.runners) == 9\n\n    co_runner = next((r for r in a_race.runners if r.name == \"COMMANDING OFFICER (GER)\"), None)\n    assert co_runner is not None\n    assert co_runner.program_number == 2\n    assert co_runner.odds == pytest.approx(10/3 + 1)\n\ndef test_extract_race_links(mock_html):\n    adapter = TimeformAdapter()\n    links = adapter._extract_race_links(mock_html)\n    assert len(links) == 35\n    assert \"https://www.timeform.com/horse-racing/racecards/haydock-park/2025-09-04/1430/22/2/mccoys-racing-lounge-ebf-novice-stakes\" in links\n\ndef test_parse_race_details(mock_race_detail_html):\n    adapter = TimeformAdapter()\n    race = adapter.parse_race_details(mock_race_detail_html, \"http://example.com\")\n\n    assert race is not None\n    assert race.track_name == \"HAYDOCK PARK\"\n    assert race.number_of_runners == 9\n    assert len(race.runners) == 9\n\n    co_runner = next((r for r in race.runners if r.name == \"COMMANDING OFFICER (GER)\"), None)\n    assert co_runner is not None\n    assert co_runner.program_number == 2\n    assert co_runner.odds == pytest.approx(10/3 + 1)\n"
}