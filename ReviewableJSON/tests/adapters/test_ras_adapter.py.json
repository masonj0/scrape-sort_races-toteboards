{
    "filepath": "./tests/adapters/test_ras_adapter.py",
    "content": "import json\nimport unittest\nfrom pathlib import Path\nfrom src.paddock_parser.adapters.ras_adapter import RasAdapter\nfrom src.paddock_parser.base import NormalizedRace\n\nclass TestRasAdapter(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Load the sample JSON data from the fixture file.\"\"\"\n        self.adapter = RasAdapter()\n        fixture_path = Path(__file__).parent / \"racingandsports_sample.json\"\n        self.sample_json = fixture_path.read_text()\n\n    def test_parse_races_specification(self):\n        \"\"\"\n        This test serves as the specification for the RasAdapter based on\n        the provided racingandsports_sample.json.\n        \"\"\"\n        races = self.adapter.parse_races(self.sample_json)\n\n        self.assertIsNotNone(races)\n        # The sample file contains thoroughbred, harness, and greyhound meetings.\n        # T: 20, H: 11, G: 20 => Total 51\n        self.assertEqual(len(races), 51)\n\n        # Find a specific harness race to verify parsing\n        harness_race = next((r for r in races if r.track_name == \"Riverina Paceway\"), None)\n        self.assertIsNotNone(harness_race)\n        self.assertEqual(harness_race.race_number, 1)\n        self.assertEqual(harness_race.number_of_runners, 0)\n\n        # Find a specific thoroughbred race\n        thoroughbred_race = next((r for r in races if r.track_name == \"Canberra\"), None)\n        self.assertIsNotNone(thoroughbred_race)\n        self.assertEqual(thoroughbred_race.race_number, 1)\n\n        # Find a specific greyhound race\n        greyhound_race = next((r for r in races if r.track_name == \"Healesville\"), None)\n        self.assertIsNotNone(greyhound_race)\n        self.assertEqual(greyhound_race.race_number, 1)\n"
}