{
    "file_path": "tests/adapters/test_the_racing_api_adapter.py",
    "content": "import pytest\nfrom unittest.mock import AsyncMock, Mock, patch\nfrom datetime import date, datetime\nfrom decimal import Decimal\n\nfrom python_service.adapters.the_racing_api_adapter import TheRacingApiAdapter\nfrom python_service.config import Settings\n\n@pytest.fixture\ndef mock_config():\n    \"\"\"\n    Provides a mock config object for the adapter, ensuring it doesn't\n    load from any .env files and provides the necessary API key.\n    \"\"\"\n    class TestSettings(Settings):\n        class Config:\n            env_file = None\n\n    return TestSettings(\n        API_KEY=\"test_api_key\",\n        THE_RACING_API_KEY=\"test_racing_api_key\"\n    )\n\n@pytest.fixture\ndef mock_config_no_key():\n    \"\"\"Provides a mock config with the API key explicitly set to None.\"\"\"\n    class TestSettings(Settings):\n        class Config:\n            env_file = None\n\n    return TestSettings(\n        API_KEY=\"test_api_key\",\n        THE_RACING_API_KEY=None\n    )\n\n@pytest.mark.asyncio\n@patch('python_service.adapters.the_racing_api_adapter.TheRacingApiAdapter.make_request', new_callable=AsyncMock)\nasync def test_fetch_races_parses_correctly(mock_make_request, mock_config):\n    \"\"\"\n    Tests that TheRacingApiAdapter correctly parses a valid API response.\n    \"\"\"\n    # ARRANGE\n    adapter = TheRacingApiAdapter(config=mock_config)\n    today = date.today().strftime('%Y-%m-%d')\n    off_time_str = datetime.utcnow().isoformat() + \"Z\"\n\n\n    mock_api_response = {\n        \"racecards\": [\n            {\n                \"race_id\": \"12345\",\n                \"course\": \"Newbury\",\n                \"race_no\": 3,\n                \"off_time\": off_time_str,\n                \"race_name\": \"The Great Race\",\n                \"distance_f\": \"1m 2f\",\n                \"runners\": [\n                    {\n                        \"horse\": \"Speedy Steed\",\n                        \"number\": 1,\n                        \"jockey\": \"T. Rider\",\n                        \"trainer\": \"A. Trainer\",\n                        \"odds\": [{\"odds_decimal\": \"5.50\"}]\n                    },\n                    {\n                        \"horse\": \"Gallant Gus\",\n                        \"number\": 2,\n                        \"jockey\": \"J. Jockey\",\n                        \"trainer\": \"B. Builder\",\n                        \"odds\": [{\"odds_decimal\": \"3.25\"}]\n                    }\n                ]\n            }\n        ]\n    }\n    mock_response = Mock()\n    mock_response.json.return_value = mock_api_response\n    mock_make_request.return_value = mock_response\n\n    # ACT\n    result = await adapter.fetch_races(today, AsyncMock())\n\n    # ASSERT\n    assert result is not None\n    assert result['source_info']['status'] == 'SUCCESS'\n    assert result['source_info']['races_fetched'] == 1\n\n    races = result['races']\n    assert len(races) == 1\n\n    race = races[0]\n    assert race.id == 'tra_12345'\n    assert race.venue == \"Newbury\"\n    assert race.race_number == 3\n    assert race.race_name == \"The Great Race\"\n    assert race.distance == \"1m 2f\"\n\n    assert len(race.runners) == 2\n\n    runner1 = race.runners[0]\n    assert runner1.name == \"Speedy Steed\"\n    assert runner1.number == 1\n    assert runner1.jockey == \"T. Rider\"\n    assert runner1.trainer == \"A. Trainer\"\n    assert runner1.odds[adapter.source_name].win == Decimal(\"5.50\")\n\n@pytest.mark.asyncio\n@patch('python_service.adapters.the_racing_api_adapter.TheRacingApiAdapter.make_request', new_callable=AsyncMock)\nasync def test_fetch_races_handles_empty_response(mock_make_request, mock_config):\n    \"\"\"\n    Tests that the adapter handles an API response with no racecards.\n    \"\"\"\n    # ARRANGE\n    adapter = TheRacingApiAdapter(config=mock_config)\n    today = date.today().strftime('%Y-%m-%d')\n    mock_response = Mock()\n    mock_response.json.return_value = {\"racecards\": []}\n    mock_make_request.return_value = mock_response\n\n    # ACT\n    result = await adapter.fetch_races(today, AsyncMock())\n\n    # ASSERT\n    assert result is not None\n    assert result['source_info']['status'] == 'SUCCESS'\n    assert result['source_info']['races_fetched'] == 0\n    assert result['source_info']['error_message'] == \"No racecards found in API response.\"\n    assert len(result['races']) == 0\n\n@pytest.mark.asyncio\nasync def test_fetch_races_handles_auth_failure(mock_config_no_key):\n    \"\"\"\n    Tests that the adapter returns a configuration error if the API key is not set.\n    \"\"\"\n    # ARRANGE\n    adapter = TheRacingApiAdapter(config=mock_config_no_key)\n    today = date.today().strftime('%Y-%m-%d')\n\n    # ACT\n    result = await adapter.fetch_races(today, AsyncMock())\n\n    # ASSERT\n    assert result is not None\n    assert result['source_info']['status'] == 'FAILED'\n    assert result['source_info']['races_fetched'] == 0\n    assert result['source_info']['error_message'] == \"ConfigurationError: THE_RACING_API_KEY not set\"\n    assert len(result['races']) == 0"
}