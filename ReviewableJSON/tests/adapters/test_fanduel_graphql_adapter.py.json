{
    "filepath": "./tests/adapters/test_fanduel_graphql_adapter.py",
    "content": "import pytest\nfrom unittest.mock import patch\nfrom src.paddock_parser.adapters.fanduel_graphql_adapter import FanDuelGraphQLAdapter\nfrom src.paddock_parser.base import NormalizedRace, NormalizedRunner\n\n@pytest.fixture\ndef mock_graphql_response():\n    \"\"\"Provides a mock of the raw GraphQL API response.\"\"\"\n    return {\n        \"data\": {\n            \"allRaces\": {\n                \"edges\": [\n                    {\n                        \"node\": {\n                            \"trackName\": \"Saratoga\",\n                            \"raceNumber\": 1,\n                            \"postTime\": \"2025-09-08T18:00:00.000Z\",\n                            \"runners\": [\n                                {\"runnerName\": \"Horse A\", \"odds\": \"5/2\", \"scratched\": False},\n                                {\"runnerName\": \"Horse B\", \"odds\": \"3/1\", \"scratched\": True},\n                                {\"runnerName\": \"Horse C\", \"odds\": \"10/1\", \"scratched\": False},\n                            ]\n                        }\n                    },\n                    {\n                        \"node\": {\n                            \"trackName\": \"Del Mar\",\n                            \"raceNumber\": 5,\n                            \"postTime\": \"2025-09-08T20:30:00.000Z\",\n                            \"runners\": [\n                                {\"runnerName\": \"Horse D\", \"odds\": \"1/1\", \"scratched\": False}\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    }\n\ndef test_parse_races(mock_graphql_response):\n    \"\"\"\n    SPEC: `parse_races` should correctly parse the GraphQL JSON into NormalizedRace objects.\n    \"\"\"\n    adapter = FanDuelGraphQLAdapter()\n    races = adapter.parse_races(mock_graphql_response)\n\n    assert len(races) == 2\n\n    # Test Race 1 (Saratoga)\n    saratoga_race = races[0]\n    assert saratoga_race.track_name == \"Saratoga\"\n    assert saratoga_race.race_number == 1\n    assert saratoga_race.number_of_runners == 2 # Horse B is scratched\n    assert len(saratoga_race.runners) == 2\n\n    # Test Runner A\n    runner_a = saratoga_race.runners[0]\n    assert runner_a.name == \"Horse A\"\n    assert runner_a.odds == pytest.approx(3.5) # 5/2 + 1\n\n    # Test Race 2 (Del Mar)\n    delmar_race = races[1]\n    assert delmar_race.track_name == \"Del Mar\"\n    assert delmar_race.race_number == 5\n    assert delmar_race.runners[0].odds == pytest.approx(2.0) # 1/1 + 1\n\n@patch('src.paddock_parser.adapters.fanduel_graphql_adapter.post_page_content')\ndef test_fetch_uses_sync_fetcher(mock_post_page_content, mock_graphql_response):\n    \"\"\"\n    SPEC: The `fetch` method must use the `post_page_content` sync_fetcher.\n    \"\"\"\n    mock_post_page_content.return_value = mock_graphql_response\n    adapter = FanDuelGraphQLAdapter()\n\n    # Since fetch is async but calls sync code, we need to run it in an event loop\n    import asyncio\n    races = asyncio.run(adapter.fetch())\n\n    mock_post_page_content.assert_called_once()\n    assert len(races) == 2\n    assert races[0].track_name == \"Saratoga\"\n"
}