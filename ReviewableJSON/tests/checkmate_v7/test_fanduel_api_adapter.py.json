{
    "filepath": "./tests/checkmate_v7/test_fanduel_api_adapter.py",
    "content": "import pytest\nimport json\nimport os\nfrom unittest.mock import MagicMock, call\n\nfrom src.checkmate_v7.adapters.AndWereOff import FanDuelApiAdapter as FanDuelApiAdapterV7\nfrom src.checkmate_v7.base import DefensiveFetcher\n\n# Determine the absolute path to the fixture files\nFIXTURE_PATH = os.path.join(os.path.dirname(__file__), \"fixtures\", \"fanduel\")\n\n# --- Fixtures ---\n\n@pytest.fixture\ndef mock_fetcher():\n    \"\"\"Provides a MagicMock for the DefensiveFetcher.\"\"\"\n    return MagicMock(spec=DefensiveFetcher)\n\n@pytest.fixture\ndef adapter(mock_fetcher):\n    \"\"\"Provides an adapter instance with a mocked fetcher.\"\"\"\n    return FanDuelApiAdapterV7(mock_fetcher)\n\n@pytest.fixture\ndef mock_schedule_response():\n    \"\"\"Provides a mock API response for the race schedule.\"\"\"\n    with open(os.path.join(FIXTURE_PATH, \"schedule.json\"), \"r\") as f:\n        return json.load(f)\n\n# --- Tests ---\n\ndef test_fetch_races_end_to_end(adapter, mock_fetcher, mock_schedule_response):\n    \"\"\"\n        Tests the end-to-end flow of the fetch_races method, mocking the single post call.\n    \"\"\"\n    # Given\n    mock_fetcher.post.return_value = mock_schedule_response\n\n    # When\n    races = adapter.fetch_races()\n\n    # Then\n    mock_fetcher.post.assert_called_once()\n\n    # Check the call arguments\n    schedule_call_args = mock_fetcher.post.call_args_list[0]\n    assert \"GetRacingSchedule\" in schedule_call_args.kwargs['json_data']['query']\n\n    # Assert the parsing logic produced the expected number of races\n    assert len(races) == 2\n    assert races[0].race_id == \"66268\"\n    assert len(races[0].runners) == 8\n    assert races[1].race_id == \"66269\"\n    assert len(races[1].runners) == 7\n    assert races[0].runners[0].name == \"Strong Odor\"\n    assert races[0].runners[0].program_number == 1"
}