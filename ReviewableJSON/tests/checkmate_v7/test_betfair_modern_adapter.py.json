{
    "filepath": "./tests/checkmate_v7/test_betfair_modern_adapter.py",
    "content": "import pytest\nimport os\nfrom unittest.mock import MagicMock\n\nfrom src.checkmate_v7.adapters.AndWereOff import BetfairDataScientistAdapter as BetfairModernAdapter\nfrom src.checkmate_v7.base import DefensiveFetcher\n\n# --- Fixtures ---\n\n@pytest.fixture\ndef mock_fetcher():\n    \"\"\"Provides a MagicMock for the DefensiveFetcher.\"\"\"\n    return MagicMock(spec=DefensiveFetcher)\n\n@pytest.fixture\ndef adapter(mock_fetcher):\n    \"\"\"Provides an adapter instance with a mocked fetcher.\"\"\"\n    return BetfairModernAdapter(mock_fetcher)\n\n@pytest.fixture\ndef mock_csv_data():\n    \"\"\"Provides mock CSV data for race details.\"\"\"\n    return 'market_id,selection_id,meetings.races.runners.ratedPrice\\n1.123,1001,1.5\\n1.123,1002,3.2\\n1.123,1003,10.0\\n1.456,2001,2.0\\n1.456,2002,4.5\\n'\n\n# --- Tests ---\n\ndef test_fetch_races_end_to_end(adapter, mock_fetcher, mock_csv_data):\n    \"\"\"\n    Tests the end-to-end flow of the fetch_races method, mocking the fetcher call.\n    \"\"\"\n    # Given\n    mock_fetcher.get.return_value = mock_csv_data\n\n    # When\n    races = adapter.fetch_races()\n\n    # Then\n    mock_fetcher.get.assert_called_once()\n    assert len(races) == 2\n    assert races[0].race_id == \"1.123\"\n    assert len(races[0].runners) == 3\n    assert races[1].race_id == \"1.456\"\n    assert len(races[1].runners) == 2\n    assert races[0].runners[0].name == \"1001\"\n    assert races[0].runners[0].odds == 1.5"
}