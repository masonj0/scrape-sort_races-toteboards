{
    "filepath": "./tests/checkmate_v7/test_models.py",
    "content": "import pytest\nfrom src.checkmate_v7.models import HorseSchema, RaceDataSchema, TrifectaFactorsSchema, PerformanceMetricsSchema\n\ndef test_horse_schema():\n    \"\"\"Tests that the HorseSchema can be instantiated correctly.\"\"\"\n    horse_data = {\n        \"id\": \"1\",\n        \"name\": \"Speedy\",\n        \"number\": 1,\n        \"jockey\": \"J. Doe\",\n        \"trainer\": \"T. Smith\",\n        \"odds\": 5.0,\n        \"morningLine\": 4.0,\n        \"speed\": 90,\n        \"class_rating\": 95,\n        \"form\": \"1-2-3\",\n        \"lastRaced\": \"10 days ago\"\n    }\n    horse = HorseSchema(**horse_data)\n    assert horse.name == \"Speedy\"\n    assert horse.class_rating == 95\n\ndef test_race_data_schema():\n    \"\"\"Tests that the RaceDataSchema can be instantiated with nested models.\"\"\"\n    race_data = {\n        \"id\": \"R1\",\n        \"track\": \"Santa Anita\",\n        \"raceNumber\": 1,\n        \"postTime\": \"2025-09-18T14:00:00Z\",\n        \"horses\": [{\n            \"id\": \"1\", \"name\": \"Speedy\", \"number\": 1, \"jockey\": \"J. Doe\",\n            \"trainer\": \"T. Smith\", \"odds\": 5.0, \"morningLine\": 4.0,\n            \"speed\": 90, \"class_rating\": 95, \"form\": \"1-2-3\", \"lastRaced\": \"10 days ago\"\n        }],\n        \"conditions\": \"Clear\",\n        \"distance\": \"6f\",\n        \"surface\": \"Dirt\",\n        \"checkmateScore\": 8.5,\n        \"qualified\": True,\n        \"trifectaFactors\": {\n            \"speedAdvantage\": True,\n            \"classEdge\": True,\n            \"valueOdds\": False\n        }\n    }\n    race = RaceDataSchema(**race_data)\n    assert race.track == \"Santa Anita\"\n    assert len(race.horses) == 1\n    assert race.horses[0].name == \"Speedy\"\n    assert race.trifectaFactors.speedAdvantage is True\n\ndef test_performance_metrics_schema():\n    \"\"\"Tests that the new PerformanceMetricsSchema can be instantiated.\"\"\"\n    metrics_data = {\n        \"totalBets\": 100,\n        \"wins\": 20,\n        \"winRate\": 20.0,\n        \"roi\": 15.5,\n        \"profit\": 1550.0,\n        \"confidenceInterval\": [10.0, 21.0],\n        \"sampleSize\": 100\n    }\n    metrics = PerformanceMetricsSchema(**metrics_data)\n    assert metrics.totalBets == 100\n    assert metrics.roi == 15.5\n"
}