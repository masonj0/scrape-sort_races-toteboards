{
    "filepath": "./tests/checkmate_v7/test_services.py",
    "content": "import pytest\nfrom unittest.mock import MagicMock\n\nfrom src.checkmate_v7.services import DataSourceOrchestrator\nfrom src.checkmate_v7.adapters.AndWereOff import FanDuelApiAdapter as FanDuelApiAdapterV7\nfrom src.checkmate_v7.models import Race\n\n@pytest.fixture\ndef mock_session():\n    \"\"\"Provides a mock database session.\"\"\"\n    return MagicMock()\n\n@pytest.mark.parametrize(\n    \"adapter_return_value, adapter_side_effect, expected_note, expected_status\",\n    [\n        ([Race(race_id=\"r1\", track_name=\"TrackA\", runners=[])], None, \"Successfully parsed 1 races.\", \"OK\"),\n        ([], None, \"No upcoming races found on source.\", \"OK\"),\n        (None, ValueError(\"Test API Error\"), \"API Error: Test API Error\", \"ERROR\"),\n    ],\n    ids=[\"success\", \"no_races\", \"error\"]\n)\ndef test_get_races_returns_status_with_notes(\n    mock_session, adapter_return_value, adapter_side_effect, expected_note, expected_status\n):\n    \"\"\"\n    SPEC: The status dictionary returned by get_races must contain a 'notes' field\n    with a human-readable description of the outcome for all scenarios.\n    \"\"\"\n    # Arrange\n    orchestrator = DataSourceOrchestrator(mock_session)\n\n    mock_adapter_instance = MagicMock(spec=FanDuelApiAdapterV7)\n    mock_adapter_instance.fetch_races = MagicMock(\n        return_value=adapter_return_value,\n        side_effect=adapter_side_effect\n    )\n    mock_adapter_instance.__class__.__name__ = \"MockAdapter\"\n\n    # The orchestrator should break on the first success, so for the empty and error\n    # cases, we need a successful adapter to follow it.\n    mock_successful_adapter = MagicMock(spec=FanDuelApiAdapterV7)\n    mock_successful_adapter.fetch_races = MagicMock(return_value=[Race(race_id=\"r2\", track_name=\"TrackB\", runners=[])])\n    mock_successful_adapter.__class__.__name__ = \"SuccessAdapter\"\n\n    if expected_status == \"OK\" and not adapter_return_value:\n        orchestrator.adapters = [mock_adapter_instance, mock_successful_adapter]\n    elif expected_status == \"ERROR\":\n        orchestrator.adapters = [mock_adapter_instance, mock_successful_adapter]\n    else:\n        orchestrator.adapters = [mock_adapter_instance]\n\n\n    # Act\n    _, statuses = orchestrator.get_races()\n\n    # Assert\n    assert len(statuses) >= 1\n    status = statuses[0]\n\n    assert \"notes\" in status\n    assert status[\"notes\"] == expected_note\n    assert status[\"status\"] == expected_status\n    if expected_status == \"ERROR\":\n        assert status[\"error_message\"] == \"Test API Error\"\n"
}