{
    "filepath": "./tests/checkmate_v7/test_betfair_adapter.py",
    "content": "import pytest\nimport os\nfrom unittest.mock import AsyncMock\nfrom src.checkmate_v7.services import BetfairDataScientistAdapterV7, DefensiveFetcher\n\n# Determine the absolute path to the fixture file\nFIXTURE_PATH = os.path.join(os.path.dirname(__file__), 'fixtures', 'betfair_data.csv')\n\n@pytest.fixture\ndef mock_fetcher():\n    \"\"\"Pytest fixture for a mock DefensiveFetcher.\"\"\"\n    return AsyncMock(spec=DefensiveFetcher)\n\n@pytest.fixture\ndef adapter(mock_fetcher):\n    \"\"\"Pytest fixture for the BetfairDataScientistAdapterV7.\"\"\"\n    return BetfairDataScientistAdapterV7(defensive_fetcher=mock_fetcher)\n\n@pytest.fixture\ndef mock_csv_content():\n    \"\"\"Reads the mock CSV content from the fixture file.\"\"\"\n    with open(FIXTURE_PATH, 'r') as f:\n        return f.read()\n\ndef test_parse_races(adapter, mock_csv_content):\n    \"\"\"\n    Tests that the adapter can successfully parse races and runners\n    from the mock CSV data.\n    \"\"\"\n    # When\n    parsed_races = adapter._parse_races(mock_csv_content)\n\n    # Then\n    assert len(parsed_races) == 2\n\n    # --- Test Race 1 (market_id 1.123) ---\n    # The order is not guaranteed, so we find the race by its ID\n    race1 = next((r for r in parsed_races if r.race_id == \"1.123\"), None)\n    assert race1 is not None\n    assert race1.track_name == \"Unknown\"\n    assert len(race1.runners) == 3\n\n    # Check runner details\n    assert race1.runners[0].name == \"1001\"\n    assert race1.runners[0].odds == 1.5\n    assert race1.runners[2].name == \"1003\"\n    assert race1.runners[2].odds == 10.0\n\n    # --- Test Race 2 (market_id 1.456) ---\n    race2 = next((r for r in parsed_races if r.race_id == \"1.456\"), None)\n    assert race2 is not None\n    assert len(race2.runners) == 2\n    assert race2.runners[1].name == \"2002\"\n    assert race2.runners[1].odds == 4.5\n\n@pytest.mark.anyio\nasync def test_fetch_races_end_to_end(adapter, mock_fetcher, mock_csv_content):\n    \"\"\"\n    Tests the end-to-end flow of the fetch_races method.\n    \"\"\"\n    # Given\n    mock_fetcher.fetch.return_value = mock_csv_content\n\n    # When\n    races = await adapter.fetch_races()\n\n    # Then\n    mock_fetcher.fetch.assert_called_once()\n    assert \"betfair-data-supplier.herokuapp.com\" in mock_fetcher.fetch.call_args[0][0]\n\n    # Assert the parsing logic produced the expected number of races\n    assert len(races) == 2\n    race1 = next((r for r in races if r.race_id == \"1.123\"), None)\n    assert len(race1.runners) == 3\n"
}