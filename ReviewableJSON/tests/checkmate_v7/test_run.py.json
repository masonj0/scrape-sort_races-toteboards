{
    "filepath": "./tests/checkmate_v7/test_run.py",
    "content": "import pytest\nimport sys\nfrom unittest.mock import patch, MagicMock\nimport json\nimport re\n\nfrom src.checkmate_v7 import run\nfrom src.checkmate_v7.models import Race, Runner, RaceDataSchema, HorseSchema, TrifectaFactorsSchema\n\n@pytest.fixture\ndef mock_services():\n    \"\"\"Mocks the services used by the run.py script.\"\"\"\n    with patch('src.checkmate_v7.run.get_db_session') as mock_get_db, \\\n         patch('src.checkmate_v7.run.DataSourceOrchestrator') as mock_orchestrator, \\\n         patch('src.checkmate_v7.run.TrifectaAnalyzer') as mock_analyzer:\n\n        # Configure Orchestrator Mock\n        mock_orchestrator_instance = MagicMock()\n        mock_race = Race(\n            race_id=\"R1\",\n            track_name=\"Test Track\",\n            race_number=1,\n            post_time=None,\n            runners=[Runner(name=\"Horse 1\", odds=2.0, program_number=1)]\n        )\n        mock_orchestrator_instance.get_races.return_value = ([mock_race], [])\n        mock_orchestrator.return_value = mock_orchestrator_instance\n\n        # Configure Analyzer Mock\n        mock_analyzer_instance = MagicMock()\n        mock_analyzer_instance.analyze_race.return_value = {\n            \"qualified\": True,\n            \"checkmateScore\": 85,\n            \"trifectaFactors\": {} # Not needed for this test's assertions\n        }\n        mock_analyzer.return_value = mock_analyzer_instance\n\n        yield mock_get_db, mock_orchestrator, mock_analyzer\n\ndef test_run_script_json_output(capsys, mock_services):\n    \"\"\"\n    Tests the run.py script with JSON output.\n    \"\"\"\n    # Arrange\n    test_args = ['run.py', '--output', 'json']\n    with patch.object(sys, 'argv', test_args), patch('builtins.open', MagicMock()) as mock_file:\n        # Act\n        run.main()\n\n        # Assert\n        captured = capsys.readouterr()\n        assert \"Writing 1 qualified races to\" in captured.out\n        mock_file.assert_called_once()\n        # Check that the filename contains the timestamp format\n        assert re.search(r'tipsheet_\\d{4}_\\d{2}h\\d{2}\\.json', mock_file.call_args[0][0])\n"
}