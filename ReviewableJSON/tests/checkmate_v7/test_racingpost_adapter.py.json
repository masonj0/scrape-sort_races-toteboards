{
    "filepath": "./tests/checkmate_v7/test_racingpost_adapter.py",
    "content": "import pytest\nimport os\nimport json\nfrom unittest.mock import AsyncMock\nfrom src.checkmate_v7.services import RacingPostAdapterV7, DefensiveFetcher\n\n# Determine the absolute path to the fixture file\nFIXTURE_PATH = os.path.join(os.path.dirname(__file__), 'fixtures', 'racingpost_racecard.html')\n\n@pytest.fixture\ndef mock_fetcher():\n    \"\"\"Pytest fixture for a mock DefensiveFetcher.\"\"\"\n    return AsyncMock(spec=DefensiveFetcher)\n\n@pytest.fixture\ndef adapter(mock_fetcher):\n    \"\"\"Pytest fixture for the RacingPostAdapterV7.\"\"\"\n    return RacingPostAdapterV7(defensive_fetcher=mock_fetcher)\n\n@pytest.fixture\ndef mock_html_content():\n    \"\"\"Reads the mock HTML content from the fixture file.\"\"\"\n    with open(FIXTURE_PATH, 'r') as f:\n        return f.read()\n\ndef test_parse_races_with_runners(adapter, mock_html_content):\n    \"\"\"\n    Tests that the adapter can successfully parse a race including its runners\n    from the mock fixture file.\n    \"\"\"\n    # When\n    parsed_races = adapter._parse_races(mock_html_content)\n\n    # Then\n    assert len(parsed_races) == 1\n\n    race = parsed_races[0]\n    assert race.race_id == \"rp_12345\"\n    assert race.track_name == \"Newmarket\"\n\n    # Check that the disabled runner was skipped\n    assert len(race.runners) == 3\n\n    # Check details of the parsed runners\n    assert race.runners[0].name == \"Speedy Gonzales\"\n    assert race.runners[0].program_number == 1\n\n    assert race.runners[1].name == \"Slow Poke\"\n    assert race.runners[1].program_number == 2\n\n    assert race.runners[2].name == \"Just a Horse\"\n    assert race.runners[2].program_number == 4\n\n@pytest.mark.anyio\nasync def test_fetch_races_end_to_end(adapter, mock_fetcher, mock_html_content):\n    \"\"\"\n    Tests the end-to-end flow of the fetch_races method using the detailed fixture.\n    \"\"\"\n    # Given a mock URL\n    mock_url = \"https://www.racingpost.com/some-race\"\n    # Configure the mock fetcher to return the mock HTML\n    mock_fetcher.fetch.return_value = mock_html_content\n\n    # When\n    races = await adapter.fetch_races(url=mock_url)\n\n    # Then\n    mock_fetcher.fetch.assert_called_once_with(mock_url)\n\n    # Assert the parsing logic produced the expected race and runners\n    assert len(races) == 1\n    assert len(races[0].runners) == 3\n    assert races[0].runners[0].name == \"Speedy Gonzales\"\n"
}