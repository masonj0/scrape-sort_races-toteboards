{
    "filepath": "./tests/checkmate_v7/test_fanduel_adapter.py",
    "content": "import pytest\nimport json\nimport os\nfrom unittest.mock import AsyncMock\nfrom src.checkmate_v7.services import FanDuelGraphQLAdapterV7, DefensiveFetcher\n\n# Determine the absolute path to the fixture file\nFIXTURE_PATH = os.path.join(os.path.dirname(__file__), 'fixtures', 'fanduel_graphql_response.json')\n\n@pytest.fixture\ndef mock_fetcher():\n    \"\"\"Pytest fixture for a mock DefensiveFetcher.\"\"\"\n    return AsyncMock(spec=DefensiveFetcher)\n\n@pytest.fixture\ndef adapter(mock_fetcher):\n    \"\"\"Pytest fixture for the FanDuelGraphQLAdapterV7.\"\"\"\n    return FanDuelGraphQLAdapterV7(defensive_fetcher=mock_fetcher)\n\n@pytest.fixture\ndef mock_graphql_response():\n    \"\"\"Reads the mock JSON content from the fixture file.\"\"\"\n    with open(FIXTURE_PATH, 'r') as f:\n        return json.load(f)\n\ndef test_parse_races(adapter, mock_graphql_response):\n    \"\"\"\n    Tests that the adapter can successfully parse races and runners\n    from the mock GraphQL JSON response.\n    \"\"\"\n    # When\n    parsed_races = adapter._parse_races(mock_graphql_response)\n\n    # Then\n    assert len(parsed_races) == 2\n\n    # --- Test Race 1 ---\n    race1 = parsed_races[0]\n    assert race1.track_name == \"Saratoga\"\n    assert race1.race_number == 5\n    # Check that the scratched runner was skipped\n    assert len(race1.runners) == 2\n\n    # Check runner details\n    assert race1.runners[0].name == \"Secretariat\"\n    assert race1.runners[0].odds == 3.0  # 2/1 + 1\n    assert race1.runners[1].name == \"Man o' War\"\n    assert race1.runners[1].odds == 6.0  # 5/1 + 1\n\n    # --- Test Race 2 ---\n    race2 = parsed_races[1]\n    assert race2.track_name == \"Belmont Park\"\n    assert len(race2.runners) == 1\n    assert race2.runners[0].name == \"Seabiscuit\"\n    assert race2.runners[0].odds == 1.5 # 1/2 + 1\n\n@pytest.mark.anyio\nasync def test_fetch_races_end_to_end(adapter, mock_fetcher, mock_graphql_response):\n    \"\"\"\n    Tests the end-to-end flow of the fetch_races method, mocking the post call.\n    \"\"\"\n    # Given\n    # Configure the mock fetcher to return the mock JSON\n    mock_fetcher.post.return_value = mock_graphql_response\n\n    # When\n    races = await adapter.fetch_races()\n\n    # Then\n    mock_fetcher.post.assert_called_once()\n    assert \"query AllRaces\" in mock_fetcher.post.call_args[1]['json_data']['query']\n\n    # Assert the parsing logic produced the expected number of races and runners\n    assert len(races) == 2\n    assert len(races[0].runners) == 2\n    assert races[1].runners[0].name == \"Seabiscuit\"\n"
}