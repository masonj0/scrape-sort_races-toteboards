{
    "filepath": "./tests/checkmate_v7/test_logic.py",
    "content": "import pytest\nfrom src.checkmate_v7.logic import TrifectaAnalyzer\nfrom src.checkmate_v7.models import RaceDataSchema, HorseSchema\nfrom src.checkmate_v7.settings import settings\n\n@pytest.fixture\ndef analyzer():\n    \"\"\"Provides a TrifectaAnalyzer instance.\"\"\"\n    return TrifectaAnalyzer()\n\n@pytest.fixture\ndef base_horses():\n    \"\"\"Provides a base list of horses with neutral odds for testing.\"\"\"\n    return [\n        HorseSchema(id=\"1\", name=\"Horse A\", number=1, jockey=\"J1\", trainer=\"T1\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n        HorseSchema(id=\"2\", name=\"Horse B\", number=2, jockey=\"J2\", trainer=\"T2\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n        HorseSchema(id=\"3\", name=\"Horse C\", number=3, jockey=\"J3\", trainer=\"T3\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n        HorseSchema(id=\"4\", name=\"Horse D\", number=4, jockey=\"J4\", trainer=\"T4\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n        HorseSchema(id=\"5\", name=\"Horse E\", number=5, jockey=\"J5\", trainer=\"T5\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n        HorseSchema(id=\"6\", name=\"Horse F\", number=6, jockey=\"J6\", trainer=\"T6\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n        HorseSchema(id=\"7\", name=\"Horse G\", number=7, jockey=\"J7\", trainer=\"T7\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n        HorseSchema(id=\"8\", name=\"Horse H\", number=8, jockey=\"J8\", trainer=\"T8\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n        HorseSchema(id=\"9\", name=\"Horse I\", number=9, jockey=\"J9\", trainer=\"T9\", odds=5.0, morningLine=5.0, speed=80, class_rating=80, form=\"\", lastRaced=\"\"),\n    ]\n\ndef test_perfect_score_is_qualified(analyzer, base_horses):\n    \"\"\"\n    SPEC: A race with optimal conditions should receive a perfect score and be qualified.\n    - Field Size: 5 runners (+30)\n    - Favorite Odds: <= 3.5 (+30)\n    - Second Favorite Odds: >= 4.0 (+40)\n    Total: 30 + 30 + 40 = 100\n    \"\"\"\n    horses = base_horses[:5]\n    horses[0].odds = 2.0 # Favorite\n    horses[1].odds = 4.0 # Second Favorite\n    race = RaceDataSchema(id=\"R1\", track=\"Test\", raceNumber=1, postTime=\"1PM\", horses=horses, conditions=\"Stakes\", distance=\"1m\", surface=\"Turf\")\n\n    result = analyzer.analyze_race(race)\n\n    assert result[\"checkmateScore\"] == settings.FIELD_SIZE_OPTIMAL_POINTS + settings.FAV_ODDS_POINTS + settings.SECOND_FAV_ODDS_POINTS\n    assert result[\"qualified\"] is True\n    assert result[\"trifectaFactors\"][\"fieldSize\"][\"points\"] == settings.FIELD_SIZE_OPTIMAL_POINTS\n    assert result[\"trifectaFactors\"][\"favoriteOdds\"][\"points\"] == settings.FAV_ODDS_POINTS\n    assert result[\"trifectaFactors\"][\"secondFavoriteOdds\"][\"points\"] == settings.SECOND_FAV_ODDS_POINTS\n\ndef test_field_size_scoring(analyzer, base_horses):\n    \"\"\"\n    SPEC: Field size should award points correctly based on settings.\n    \"\"\"\n    # Test optimal case (5 runners)\n    race_optimal = RaceDataSchema(id=\"R_opt\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=base_horses[:5], conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_optimal = analyzer.analyze_race(race_optimal)\n    assert res_optimal[\"trifectaFactors\"][\"fieldSize\"][\"points\"] == settings.FIELD_SIZE_OPTIMAL_POINTS\n    assert \"Optimal field size (5 runners)\" in res_optimal[\"reasons\"][0]\n\n    # Test acceptable case (7 runners)\n    race_acceptable = RaceDataSchema(id=\"R_acc\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=base_horses[:7], conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_acceptable = analyzer.analyze_race(race_acceptable)\n    assert res_acceptable[\"trifectaFactors\"][\"fieldSize\"][\"points\"] == settings.FIELD_SIZE_ACCEPTABLE_POINTS\n    assert \"Acceptable field size (7 runners)\" in res_acceptable[\"reasons\"][0]\n\n    # Test penalty case (9 runners)\n    race_penalty = RaceDataSchema(id=\"R_pen\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=base_horses[:9], conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_penalty = analyzer.analyze_race(race_penalty)\n    assert res_penalty[\"trifectaFactors\"][\"fieldSize\"][\"points\"] == settings.FIELD_SIZE_PENALTY_POINTS\n    assert \"Field size not ideal (9 runners)\" in res_penalty[\"reasons\"][0]\n\ndef test_favorite_odds_scoring(analyzer, base_horses):\n    \"\"\"\n    SPEC: Favorite's odds score should be correct based on settings.\n    \"\"\"\n    horses = base_horses[:5]\n    # Test good odds (<= MAX_FAV_ODDS)\n    horses[0].odds = settings.MAX_FAV_ODDS - 0.1\n    race_good = RaceDataSchema(id=\"R_good\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=horses, conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_good = analyzer.analyze_race(race_good)\n    assert res_good[\"trifectaFactors\"][\"favoriteOdds\"][\"points\"] == settings.FAV_ODDS_POINTS\n    assert f\"Favorite odds OK ({settings.MAX_FAV_ODDS - 0.1})\" in res_good[\"reasons\"][1]\n\n    # Test poor odds (> MAX_FAV_ODDS)\n    horses[0].odds = settings.MAX_FAV_ODDS + 0.1\n    race_poor = RaceDataSchema(id=\"R_poor\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=horses, conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_poor = analyzer.analyze_race(race_poor)\n    assert res_poor[\"trifectaFactors\"][\"favoriteOdds\"][\"points\"] == 0\n    assert f\"Favorite odds too high ({settings.MAX_FAV_ODDS + 0.1})\" in res_poor[\"reasons\"][1]\n\ndef test_second_favorite_odds_scoring(analyzer, base_horses):\n    \"\"\"\n    SPEC: Second favorite's odds should be correct based on settings.\n    \"\"\"\n    horses = base_horses[:5]\n    horses[0].odds = 2.0 # Set favorite to ensure sorting\n\n    # Test good odds (>= MIN_2ND_FAV_ODDS)\n    horses[1].odds = settings.MIN_2ND_FAV_ODDS + 1.0\n    race_good = RaceDataSchema(id=\"R_good\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=horses, conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_good = analyzer.analyze_race(race_good)\n    assert res_good[\"trifectaFactors\"][\"secondFavoriteOdds\"][\"points\"] == settings.SECOND_FAV_ODDS_POINTS\n    assert f\"2nd Favorite odds OK ({settings.MIN_2ND_FAV_ODDS + 1.0})\" in res_good[\"reasons\"][2]\n\n    # Test poor odds (< MIN_2ND_FAV_ODDS)\n    horses[1].odds = settings.MIN_2ND_FAV_ODDS - 1.0\n    race_poor = RaceDataSchema(id=\"R_poor\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=horses, conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_poor = analyzer.analyze_race(race_poor)\n    assert res_poor[\"trifectaFactors\"][\"secondFavoriteOdds\"][\"points\"] == 0\n    assert f\"2nd Favorite odds too low ({settings.MIN_2ND_FAV_ODDS - 1.0})\" in res_poor[\"reasons\"][2]\n\ndef test_qualification_threshold(analyzer, base_horses):\n    \"\"\"\n    SPEC: A race is qualified if checkmateScore is >= QUALIFICATION_SCORE.\n    \"\"\"\n    # Score = 30 (size) + 30 (fav) + 40 (2nd fav) = 100. Should qualify.\n    horses_qual = base_horses[:5]\n    horses_qual[0].odds = 2.0\n    horses_qual[1].odds = 4.0\n    race_qual = RaceDataSchema(id=\"R_qual\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=horses_qual, conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_qual = analyzer.analyze_race(race_qual)\n    assert res_qual[\"checkmateScore\"] >= settings.QUALIFICATION_SCORE\n    assert res_qual[\"qualified\"] is True\n\n    # Score = -20 (size) + 0 (fav) + 0 (2nd fav) = -20. Should not qualify.\n    horses_no_qual = base_horses[:9] # 9 runners = -20 points\n    horses_no_qual[0].odds = 4.0 # > 3.5 = 0 points\n    horses_no_qual[1].odds = 3.0 # < 4.0 = 0 points\n    race_no_qual = RaceDataSchema(id=\"R_no_qual\", track=\"T\", raceNumber=1, postTime=\"1PM\", horses=horses_no_qual, conditions=\"C\", distance=\"D\", surface=\"S\")\n    res_no_qual = analyzer.analyze_race(race_no_qual)\n    assert res_no_qual[\"checkmateScore\"] < settings.QUALIFICATION_SCORE\n    assert res_no_qual[\"qualified\"] is False"
}