{"content": "from abc import ABC, abstractmethod\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\nfrom typing import List, Optional, Dict, Any\n\n\n# --- Normalized Data Models ---\n\n@dataclass\nclass NormalizedRunner:\n    \"\"\"\n    A standardized representation of a single runner in a race.\n    \"\"\"\n    name: str\n    program_number: int\n    scratched: bool = False\n    jockey: Optional[str] = None\n    trainer: Optional[str] = None\n    odds: Optional[float] = None\n\n\n@dataclass\nclass NormalizedRace:\n    \"\"\"\n    A standardized representation of a single race.\n    \"\"\"\n    race_id: str\n    track_name: str\n    race_number: int\n    post_time: Optional[datetime] = None\n    race_type: Optional[str] = None\n    minutes_to_post: Optional[int] = None\n    number_of_runners: Optional[int] = None\n    score: Optional[float] = None\n    runners: List[NormalizedRunner] = field(default_factory=list)\n\n\n# --- Base Adapters ---\n\nclass BaseAdapter(ABC):\n    \"\"\"\n    Abstract base class for data source adapters (V1 & V2 style).\n    \"\"\"\n    def __init__(self, config: Optional[Dict[str, Any]] = None):\n        self.config = config or {}\n\n    @abstractmethod\n    def fetch_data(self):\n        pass\n\n    @abstractmethod\n    def parse_data(self, raw_data):\n        pass\n\n\nclass BaseAdapterV3(ABC):\n    \"\"\"\n    V3 of the Base Adapter for parsing complex, multi-race pages.\n    \"\"\"\n    def __init__(self, config: Optional[Dict[str, Any]] = None):\n        self.config = config or {}\n\n    @abstractmethod\n    async def fetch(self) -> List[NormalizedRace]:\n        \"\"\"\n        Fetches and parses data to return a list of normalized races.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def parse_races(self, html_content: str) -> List[NormalizedRace]:\n        \"\"\"\n        Parses the full HTML content of a race day page.\n        \"\"\"\n        pass\n"}
