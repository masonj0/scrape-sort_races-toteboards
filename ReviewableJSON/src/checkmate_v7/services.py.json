{
    "filepath": "./src/checkmate_v7/services.py",
    "content": "# src/checkmate_v7/services.py\nimport logging\nfrom typing import List\nfrom .base import BaseAdapterV7, DefensiveFetcher\nfrom .models import Race\nfrom .adapters import PRODUCTION_ADAPTERS, DEVELOPMENT_ADAPTERS\nfrom .database import get_db_session\n\nclass DataSourceOrchestrator:\n    def __init__(self, use_all_adapters=False):\n        self.fetcher = DefensiveFetcher()\n        if use_all_adapters:\n            adapters_to_use = PRODUCTION_ADAPTERS + DEVELOPMENT_ADAPTERS\n            logging.info(f\"Initializing orchestrator with ALL {len(adapters_to_use)} adapters.\")\n        else:\n            adapters_to_use = PRODUCTION_ADAPTERS\n            logging.info(f\"Initializing orchestrator with {len(adapters_to_use)} PRODUCTION adapters.\")\n\n        self.adapters: List[BaseAdapterV7] = [Adapter(self.fetcher) for Adapter in adapters_to_use]\n\n    def get_races(self) -> tuple[list[Race], list[dict]]:\n        all_races, statuses = [], []\n        for adapter in self.adapters:\n            adapter_id = adapter.__class__.__name__\n            races = []\n            error_message = None\n            status = \"OK\"\n            notes = \"\"\n            try:\n                races = adapter.fetch_races()\n                if races:\n                    notes = f\"Successfully parsed {len(races)} races.\"\n                else:\n                    notes = \"No upcoming races found on source.\"\n                statuses.append({\"adapter_id\": adapter_id, \"status\": status, \"races_found\": len(races), \"notes\": notes, \"error_message\": None})\n                if races:\n                    all_races.extend(races)\n            except Exception as e:\n                logging.error(f\"Adapter {adapter_id} failed: {e}\", exc_info=True)\n                status = \"ERROR\"\n                error_message = str(e)\n                notes = f\"API Error: {error_message}\"\n                statuses.append({\"adapter_id\": adapter_id, \"status\": status, \"error_message\": error_message, \"notes\": notes, \"races_found\": 0})\n        return all_races, statuses"
}