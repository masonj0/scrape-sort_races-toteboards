{
    "filepath": "./src/checkmate_v7/base.py",
    "content": "# src/checkmate_v7/base.py\nimport logging\nimport json\nimport subprocess\nfrom abc import ABC, abstractmethod\nfrom typing import List, Union\nfrom .models import Race\n\nclass DefensiveFetcher:\n    \"\"\"The battle-tested, subprocess curl-based fetcher.\"\"\"\n\n    def get(self, url: str, headers: dict = None, response_type: str = 'auto') -> Union[dict, str, None]:\n        try:\n            command = [\"curl\", \"-s\", \"-L\", \"--tlsv1.2\", \"--http1.1\"] # Enforce modern standards\n            if headers:\n                for key, value in headers.items():\n                    command.extend([\"-H\", f\"{key}: {value}\"])\n            command.append(url)\n\n            result = subprocess.run(command, capture_output=True, text=True, check=True, timeout=30)\n            response_text = result.stdout\n\n            if response_type == 'text':\n                return response_text\n            if response_type == 'json':\n                return json.loads(response_text)\n\n            # Auto-detect for 'auto'\n            try:\n                return json.loads(response_text)\n            except json.JSONDecodeError:\n                return response_text\n\n        except (subprocess.CalledProcessError, subprocess.TimeoutExpired, FileNotFoundError) as e:\n            logging.error(f\"CRITICAL: curl GET failed for {url}. Details: {e}\")\n            return None\n\n    def post(self, url: str, json_data: dict, headers: dict = None, response_type: str = 'json') -> Union[dict, str, None]:\n        try:\n            command = [\"curl\", \"-s\", \"-L\", \"-X\", \"POST\", \"--tlsv1.2\", \"--http1.1\"]\n            final_headers = headers.copy() if headers else {}\n            final_headers['Content-Type'] = 'application/json'\n\n            for key, value in final_headers.items():\n                command.extend([\"-H\", f\"{key}: {value}\"])\n\n            command.extend([\"-d\", json.dumps(json_data)])\n            command.append(url)\n\n            result = subprocess.run(command, capture_output=True, text=True, check=True, timeout=30)\n            response_text = result.stdout\n\n            return json.loads(response_text) if response_type == 'json' else response_text\n\n        except (subprocess.CalledProcessError, json.JSONDecodeError, subprocess.TimeoutExpired, FileNotFoundError) as e:\n            logging.error(f\"CRITICAL: curl POST failed for {url}. Details: {e}\")\n            return None\n\nclass BaseAdapterV7(ABC):\n    def __init__(self, defensive_fetcher: DefensiveFetcher):\n        self.fetcher = defensive_fetcher\n\n    @abstractmethod\n    def fetch_races(self) -> List[Race]:\n        raise NotImplementedError"
}