{
    "filepath": "./src/checkmate_v7/run.py",
    "content": "\"\"\"\nCheckmate V7: run.py - The \"One-Shot\" CLI Entrypoint\n\"\"\"\nimport argparse\nimport json\nimport logging\nfrom datetime import datetime\n\nfrom .services import DataSourceOrchestrator, get_db_session\nfrom .logic import TrifectaAnalyzer\nfrom .models import Race, RaceDataSchema, HorseSchema\n\ndef setup_logging():\n    \"\"\"Sets up basic logging for the CLI tool.\"\"\"\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(asctime)s - [%(levelname)s] - %(message)s\",\n    )\n\ndef convert_race_to_schema(race: Race) -> RaceDataSchema:\n    \"\"\"\n    Safely converts the internal Race dataclass to the RaceDataSchema Pydantic model.\n    Provides default values for fields that may be missing from various adapters.\n    \"\"\"\n    horses = []\n    for r in race.runners:\n        # The analyzer requires odds, so skip runners without them.\n        if r.odds is None:\n            continue\n\n        horses.append(\n            HorseSchema(\n                name=r.name,\n                number=r.program_number,\n                jockey=r.jockey,\n                trainer=r.trainer,\n                odds=r.odds\n                # Other fields like id, morningLine, etc., will use Pydantic's default None\n            )\n        )\n\n    return RaceDataSchema(\n        id=race.race_id,\n        track=race.track_name,\n        raceNumber=race.race_number,\n        postTime=race.post_time.isoformat() if race.post_time else None,\n        horses=horses\n    )\n\n\ndef main():\n    \"\"\"\n    Main execution function for the CLI.\n    Fetches live race data, analyzes it, and generates a tipsheet.\n    \"\"\"\n    parser = argparse.ArgumentParser(description=\"Checkmate V7 - Jealousy Engine CLI\")\n    parser.add_argument(\n        \"--output\",\n        choices=[\"json\"],\n        default=\"json\",\n        help=\"Specify the output format (only json is supported).\",\n    )\n    args = parser.parse_args()\n\n    setup_logging()\n    logging.info(\"--- Starting Checkmate V7 Showcase Run ---\")\n\n    session = None\n    try:\n        logging.info(\"Initializing database session and orchestrator...\")\n        session = get_db_session()\n        orchestrator = DataSourceOrchestrator(session)\n        analyzer = TrifectaAnalyzer()\n\n        logging.info(\"Fetching live race data...\")\n        races, statuses = orchestrator.get_races()\n        logging.info(f\"Orchestrator status: {statuses}\")\n\n        tipsheet = []\n        if not races:\n            logging.warning(\"No races were found by the orchestrator.\")\n        else:\n            logging.info(f\"Found {len(races)} races. Analyzing for Checkmate opportunities...\")\n            for race in races:\n                race_schema = convert_race_to_schema(race)\n                analysis = analyzer.analyze_race(race_schema)\n\n                if analysis[\"qualified\"]:\n                    logging.info(f\"Checkmate QUALIFIED: {race.track_name} - Race {race.race_number} (Score: {analysis['checkmateScore']})\")\n                    tipsheet.append({\n                        \"trackName\": race.track_name,\n                        \"raceNumber\": race.race_number,\n                        \"postTime\": race.post_time.isoformat() if race.post_time else None,\n                        \"checkmateScore\": analysis[\"checkmateScore\"],\n                        \"analysis\": analysis,\n                        \"runners\": [r.model_dump() for r in race_schema.horses]\n                    })\n                else:\n                    logging.info(f\"Checkmate SKIPPED: {race.track_name} - Race {race.race_number} (Score: {analysis['checkmateScore']})\")\n\n        if args.output == \"json\":\n            timestamp = datetime.now().strftime(\"%m%d_%Hh%M\")\n            output_filename = f\"tipsheet_{timestamp}.json\"\n            logging.info(f\"Writing {len(tipsheet)} qualified races to {output_filename}...\")\n            print(f\"DEBUG: Writing {len(tipsheet)} qualified races to {output_filename}...\") # DEBUG\n            with open(output_filename, \"w\") as f:\n                json.dump(tipsheet, f, indent=2)\n            logging.info(\"Successfully generated tipsheet.\")\n\n    except Exception as e:\n        logging.error(f\"An unexpected error occurred during the run: {e}\", exc_info=True)\n    finally:\n        if session:\n            session.close()\n        logging.info(\"--- Checkmate V7 Showcase Run Finished ---\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
}