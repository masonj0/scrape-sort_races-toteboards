{
    "filepath": "./src/checkmate_v7/dashboard.py",
    "content": "import streamlit as st\nimport requests\nimport pandas as pd\nimport time\nfrom datetime import datetime\n\n# --- Configuration ---\nAPI_URL = \"http://127.0.0.1:8000\" # As per architectural mandate\nst.set_page_config(layout=\"wide\", page_title=\"Checkmate V3 Live Cockpit\")\n\n# --- Helper Functions ---\ndef get_mtp_style(mtp):\n    \"\"\"Returns a CSS color style based on minutes to post.\"\"\"\n    if mtp is None:\n        return 'color: grey'\n    if mtp <= 5:\n        return 'color: red; font-weight: bold;'\n    if mtp <= 15:\n        return 'color: orange;'\n    return 'color: green;'\n\ndef score_to_stars(score):\n    \"\"\"Converts a 0-100 score to a 5-star rating.\"\"\"\n    if score is None:\n        return \"N/A\"\n    return \"\u2605\" * int(score / 20) if score is not None else \"\"\n\n# --- Main Application ---\nst.title(\"Checkmate V3 - Live Cockpit\")\n\n# Sidebar for controls and status\nwith st.sidebar:\n    st.header(\"System Health\")\n    health_container = st.empty()\n    st.header(\"Performance\")\n    perf_container = st.empty()\n\n# Main content area for the live predictions table\nst.header(\"Live Predictions\")\nplaceholder = st.empty()\n\n# --- Auto-refresh Loop ---\nwhile True:\n    try:\n        # Update Health\n        health_response = requests.get(f\"{API_URL}/health\")\n        if health_response.status_code == 200:\n            health_data = health_response.json()\n            health_container.json(health_data)\n        else:\n            health_container.error(f\"Failed to fetch health data. Status: {health_response.status_code}\")\n\n        # Update Performance\n        perf_response = requests.get(f\"{API_URL}/performance\")\n        if perf_response.status_code == 200:\n            perf_data = perf_response.json()\n            perf_container.json(perf_data)\n        else:\n            perf_container.error(f\"Failed to fetch performance data. Status: {perf_response.status_code}\")\n        \n        # Update Live Predictions\n        preds_response = requests.get(f\"{API_URL}/predictions/active\")\n        if preds_response.status_code == 200:\n            preds_data = preds_response.json()\n            if preds_data:\n                df = pd.DataFrame(preds_data)\n                \n                # Create display columns\n                df['MTP'] = df['minutes_to_post'].round(1)\n                df['Score'] = df['score_total'].apply(score_to_stars)\n                \n                # Select and reorder columns for display\n                display_df = df[['race_key', 'MTP', 'Score', 'status', 'qualified_flag', 'stake_used']]\n                \n                # Apply styling\n                styled_df = display_df.style.map(get_mtp_style, subset=['MTP'])\n                \n                placeholder.dataframe(styled_df)\n            else:\n                placeholder.info(\"No active predictions found.\")\n        else:\n            placeholder.error(f\"Failed to fetch active predictions. Status: {preds_response.status_code}\")\n\n    except requests.exceptions.ConnectionError:\n        placeholder.error(\"Connection Error: Could not connect to the Checkmate API.\")\n        health_container.error(\"API Unreachable\")\n        perf_container.error(\"API Unreachable\")\n    except Exception as e:\n        placeholder.error(f\"An unexpected error occurred: {e}\")\n\n    # Add timestamp and sleep\n    st.sidebar.write(f\"Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    time.sleep(30)\n"
}