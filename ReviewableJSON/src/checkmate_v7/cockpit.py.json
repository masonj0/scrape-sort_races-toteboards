{
    "filepath": "./src/checkmate_v7/cockpit.py",
    "content": "import dash\nfrom dash import dcc, html\nfrom dash.dependencies import Input, Output\nimport dash_bootstrap_components as dbc\nimport requests\nimport pandas as pd\nimport datetime\nimport argparse\n\n# --- App Definition with Bootstrap Theme ---\napp = dash.Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])\n\n# --- Global variable for API URL ---\nAPI_URL_BASE = \"http://127.0.0.1:8001\" # Default value\n\n# --- Helper Functions ---\ndef make_metric_card(title, value):\n    \"\"\"Creates a styled metric card.\"\"\"\n    return dbc.Card(\n        dbc.CardBody([\n            html.H4(title, className=\"card-title\"),\n            html.P(value, className=\"card-text\", style={'fontSize': '24px', 'fontWeight': 'bold'})\n        ]),\n        className=\"mb-3\",\n    )\n\ndef make_tipsheet_card(race):\n    \"\"\"Creates an enhanced, styled card for a single race on the tipsheet.\"\"\"\n    factors = race.get('trifectaFactors', {})\n    badges = []\n    if factors.get('speedAdvantage', {}).get('ok'):\n        badges.append(dbc.Badge(\"Speed Advantage\", color=\"success\", className=\"me-1\"))\n    if factors.get('classEdge', {}).get('ok'):\n        badges.append(dbc.Badge(\"Class Edge\", color=\"info\", className=\"me-1\"))\n    if factors.get('valueOdds', {}).get('ok'):\n        badges.append(dbc.Badge(\"Value Odds\", color=\"warning\", className=\"me-1\"))\n\n    top_horses = race.get('horses', [])[:3]\n    horse_list_items = []\n    if top_horses:\n        for horse in top_horses:\n            horse_list_items.append(html.Li(\n                f\"#{horse.get('number', 'N/A')} {horse.get('name', 'N/A')} ({horse.get('odds', 0.0):.1f}/1)\"\n            ))\n    else:\n        horse_list_items.append(html.Li(\"No horse data available.\"))\n\n    return dbc.Card(\n        dbc.CardBody([\n            html.H3(f\"{race.get('track')} - Race {race.get('raceNumber')}\", className=\"card-title\"),\n            html.P(f\"Post Time: {datetime.datetime.fromisoformat(race.get('postTime').replace('Z', '+00:00')).strftime('%H:%M')} | Score: {race.get('checkmateScore', 0):.2f}\"),\n            html.Div(badges, className=\"mb-3\"),\n            html.Hr(),\n            html.H4(\"Top Contenders\"),\n            html.Ul(horse_list_items)\n        ]),\n        className=\"mb-3\",\n    )\n\n# --- App Layout ---\napp.layout = dbc.Container(fluid=True, children=[\n    dbc.Row(dbc.Col(html.H1(\"Checkmate V7 - Cockpit\", className=\"text-center my-4\"), width=12)),\n    dbc.Row([\n        dbc.Col(dbc.Card(dbc.CardBody(id='tipsheet-container')), width=8),\n        dbc.Col([\n            dbc.Card(dbc.CardBody(id='metric-cards-container'), className=\"mb-3\"),\n            dbc.Card(dbc.CardBody(id='feed-status-container'))\n        ], width=4)\n    ]),\n    dcc.Interval(id='interval-component', interval=5*1000, n_intervals=0)\n])\n\n# --- Callbacks ---\n@app.callback(\n    [Output('metric-cards-container', 'children'),\n     Output('tipsheet-container', 'children'),\n     Output('feed-status-container', 'children')],\n    [Input('interval-component', 'n_intervals')]\n)\ndef update_live_data(n):\n    try:\n        races_response = requests.get(f'{API_URL_BASE}/api/v1/races/all')\n        races_response.raise_for_status()\n        races = races_response.json()\n\n        status_response = requests.get(f'{API_URL_BASE}/api/v1/adapters/status')\n        status_response.raise_for_status()\n        statuses = status_response.json()\n\n        qualified_races = [race for race in races if race.get('qualified', False)]\n\n        metric_cards = [\n            html.H2('Metrics', className=\"card-title\"),\n            make_metric_card('Total Races Analyzed', len(races)),\n            make_metric_card('Qualified Races', len(qualified_races))\n        ]\n\n        if qualified_races:\n            tipsheet_cards = [make_tipsheet_card(race) for race in qualified_races]\n            tipsheet = [html.H2('Live Tipsheet', className=\"card-title\"), *tipsheet_cards]\n        else:\n            tipsheet = [html.H2('Live Tipsheet', className=\"card-title\"), html.P('No qualified races at the moment.')]\n\n        status_items = []\n        for status in statuses:\n            color = \"success\" if status.get('status') == \"OK\" else \"danger\"\n            status_text = f\"{status.get('adapter_id')}: {status.get('status')} ({status.get('races_found')} found)\"\n            notes = status.get('notes')\n            if notes:\n                status_text += f\" - {notes}\"\n            status_items.append(dbc.ListGroupItem(status_text, color=color))\n\n        feed_status = [\n            html.H2('Feed Status', className=\"card-title\"),\n            html.P(f\"Last Update: {datetime.datetime.now().strftime('%H:%M:%S')}\"),\n            dbc.ListGroup(status_items, flush=True)\n        ]\n        return metric_cards, tipsheet, feed_status\n\n    except requests.exceptions.RequestException as e:\n        error_message = str(e)\n        metric_cards_error = [html.H2('Metrics'), html.P('Error')]\n        tipsheet_error = [html.H2('Live Tipsheet'), html.P(f\"API Error: {error_message}\")]\n        status_display_error = [\n            html.H2('Feed Status'),\n            html.P(f\"Last Update Attempt: {datetime.datetime.now().strftime('%H:%M:%S')}\"),\n            html.P(f\"Status: API Connection Failed - {error_message}\", className=\"text-danger\")\n        ]\n        return metric_cards_error, tipsheet_error, status_display_error\n\n# --- Main Execution ---\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description=\"Run the Checkmate Cockpit Dash app.\")\n    parser.add_argument('--port', type=int, default=8050, help='Port to run the app on.')\n    parser.add_argument('--api-url', type=str, default=\"http://127.0.0.1:8001\", help='URL of the backend API.')\n    args = parser.parse_args()\n\n    API_URL_BASE = args.api_url\n\n    app.run(debug=True, host='0.0.0.0', port=args.port)\n"
}