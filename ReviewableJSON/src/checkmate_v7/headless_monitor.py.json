{
    "filepath": "./src/checkmate_v7/headless_monitor.py",
    "content": "import requests\nimport time\nimport datetime\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich.panel import Panel\nfrom rich.live import Live\nimport pandas as pd\n\nAPI_URL = \"http://127.0.0.1:8000\" # Corrected API URL\nconsole = Console()\n\ndef get_mtp_style_rich(mtp):\n    \"\"\"Returns a rich style string based on minutes to post.\"\"\"\n    if mtp is None:\n        return \"grey\"\n    if mtp <= 5:\n        return \"bold red\"\n    if mtp <= 15:\n        return \"orange3\"\n    return \"green\"\n\ndef score_to_stars(score):\n    \"\"\"Converts a 0-100 score to a 5-star rating.\"\"\"\n    if score is None:\n        return \"N/A\"\n    return \"\u2605\" * int(score / 20) if score is not None else \"\"\n\ndef generate_layout() -> Panel:\n    \"\"\"Fetches all data from the API and builds a rich layout.\"\"\"\n    try:\n        health_data = requests.get(f\"{API_URL}/health\").json()\n        perf_data = requests.get(f\"{API_URL}/performance\").json()\n        preds_data = requests.get(f\"{API_URL}/predictions/active\").json()\n    except requests.exceptions.ConnectionError:\n        return Panel(\"Error: Cannot connect to the Checkmate API. Is it running?\", style=\"bold red\")\n    except requests.exceptions.JSONDecodeError:\n        return Panel(\"Error: Failed to decode JSON from API.\", style=\"bold red\")\n\n    # Build Health Panel\n    health_panel = Panel(f\"DB: {health_data.get('database', 'N/A')} | Worker: {health_data.get('celery', 'N/A')}\", title=\"System Health\")\n\n    # Build Performance Panel\n    metrics = perf_data\n    roi = metrics.get('roi_percent', 0)\n    n = metrics.get('sample_size', 0)\n    display_string = f\"ROI: {roi:.2f}% (n={n})\"\n    perf_panel = Panel(display_string, title=\"Performance\")\n\n    # Build Predictions Table\n    preds_table = Table(\"Race Key\", \"MTP\", \"Score\", \"Status\", \"Qualified\", \"Stake\")\n    if preds_data:\n        df = pd.DataFrame(preds_data)\n        for _, pred in df.iterrows():\n            mtp = pred.get('minutes_to_post')\n            mtp_display = f\"[{get_mtp_style_rich(mtp)}]{mtp:.1f}[/]\" if mtp is not None else \"N/A\"\n\n            score = pred.get('score_total')\n            score_display = score_to_stars(score)\n\n            stake = pred.get('stake_used', 0)\n            stake_display = f\"${stake:.2f}\" if stake is not None else \"N/A\"\n\n            preds_table.add_row(\n                pred['race_key'],\n                mtp_display,\n                score_display,\n                pred['status'],\n                str(pred.get('qualified_flag', 'N/A')),\n                stake_display\n            )\n\n    # Combine into a master layout\n    main_panel_content = f\"{health_panel}\\n{perf_panel}\\n{preds_table}\"\n    layout = Panel(\n        main_panel_content,\n        title=f\"[b]Checkmate V3 Headless Monitor[/b] - Last Updated: {datetime.datetime.now().strftime('%H:%M:%S')}\",\n        border_style=\"blue\"\n    )\n    return layout\n\nif __name__ == \"__main__\":\n    with Live(generate_layout(), screen=True, redirect_stderr=False, refresh_per_second=0.1) as live:\n        try:\n            while True:\n                time.sleep(10)\n                live.update(generate_layout())\n        except KeyboardInterrupt:\n            console.print(\"Monitor stopped.\")\n"
}