{
    "filepath": "./src/checkmate_v7/models.py",
    "content": "\"\"\"\nCheckmate V7: `models.py` - THE BLUEPRINT\n\"\"\"\nfrom datetime import datetime\nfrom typing import List, Optional, Dict\nfrom sqlalchemy import (Column, Integer, String, Float, DateTime, Boolean, JSON,\n ForeignKey)\nfrom sqlalchemy.orm import declarative_base, relationship\nfrom pydantic import BaseModel\n\nBase = declarative_base()\n\n# --- ORM Models ---\n\nclass PredictionORM(Base):\n    __tablename__ = 'predictions'\n    prediction_id = Column(String, primary_key=True)\n    race_key = Column(String, nullable=False, index=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    model_version = Column(String, nullable=False)\n    status = Column(String, default='pending', index=True)\n    favorite_candidate_selection_id = Column(String)\n    favorite_candidate_name = Column(String)\n    odds_snapshots = Column(JSON)\n    score_components = Column(JSON)\n    qualitative_analysis = Column(JSON)\n    score_total = Column(Float)\n    qualified_flag = Column(Boolean)\n    confidence = Column(Float)\n    stake_used = Column(Float)\n    race_local_datetime = Column(DateTime, nullable=True)\n\n    join = relationship(\"JoinORM\", back_populates=\"prediction\", uselist=False)\n\nclass ResultORM(Base):\n    __tablename__ = 'results'\n    result_id = Column(String, primary_key=True)\n    race_key = Column(String, nullable=False, index=True)\n    exact_time_off = Column(DateTime)\n    result_source_adapter = Column(String)\n    audit_version = Column(Integer)\n    post_time_favorite_selection_id = Column(String)\n    post_time_favorite_name = Column(String)\n    finish_position = Column(Integer)\n    place_paid_flag = Column(Boolean)\n    place_payout_native = Column(Float)\n    payout_unit = Column(Float)\n    audit_status = Column(String, default='pending', index=True)\n    validation_issues = Column(JSON)\n\n    join = relationship(\"JoinORM\", back_populates=\"result\", uselist=False)\n\nclass JoinORM(Base):\n    __tablename__ = 'joins'\n    join_id = Column(String, primary_key=True)\n    prediction_id = Column(String, ForeignKey('predictions.prediction_id'))\n    result_id = Column(String, ForeignKey('results.result_id'))\n    pnl_native = Column(Float)\n    pnl_usd = Column(Float)\n    stake_used = Column(Float)\n    roi = Column(Float)\n    audit_status = Column(String, default='pending', index=True)\n    audit_notes = Column(JSON)\n\n    prediction = relationship(\"PredictionORM\", back_populates=\"join\")\n    result = relationship(\"ResultORM\", back_populates=\"join\")\n\nclass SettingsORM(Base):\n    __tablename__ = 'settings'\n    key = Column(String, primary_key=True)\n    value = Column(JSON)\n\nclass AdapterStatusORM(Base):\n    __tablename__ = 'adapters_status'\n    adapter_id = Column(String, primary_key=True)\n    status = Column(String, nullable=False)\n    last_ok_at = Column(DateTime)\n    rate_limit_until = Column(DateTime)\n\n# --- Pydantic Schemas ---\n\nclass PredictionSchema(BaseModel):\n    prediction_id: str\n    race_key: str\n    status: str\n    qualified_flag: Optional[bool] = None\n    stake_used: Optional[float] = None\n    score_total: Optional[float] = None\n    minutes_to_post: Optional[float] = None\n\n    class Config:\n        orm_mode = True\n\nclass PerformanceMetricsSchema(BaseModel):\n    total_bets: int\n    win_rate: float\n    roi_percent: float\n    net_profit: float\n    confidence_interval: List[float]\n    p_value: float\n    sample_size: int\n\nclass ActionStatusSchema(BaseModel):\n    status: str\n    message: str\n    job_id: Optional[str] = None\n\nclass HealthCheckResponse(BaseModel):\n    status: str\n    database: str\n    celery: str\n\n# --- Adapter Data Models ---\n\nclass Runner(BaseModel):\n    name: str\n    odds: Optional[float] = None\n    program_number: Optional[int] = None\n    jockey: Optional[str] = None\n    trainer: Optional[str] = None\n\nclass Race(BaseModel):\n    race_id: str\n    track_name: str\n    race_number: Optional[int] = None\n    post_time: Optional[datetime] = None\n    race_type: Optional[str] = None\n    number_of_runners: Optional[int] = None\n    runners: List[Runner]\n"
}