{
    "filepath": "./src/checkmate_v7/database.py",
    "content": "# src/checkmate_v7/database.py\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom .settings import settings\nfrom .models import Base\n\nclass DatabaseManager:\n    \"\"\"A singleton manager for the application's database engine and sessions.\"\"\"\n    _engine = None\n    _SessionLocal = None\n\n    @classmethod\n    def get_engine(cls):\n        \"\"\"\n        Returns the singleton SQLAlchemy engine instance, creating it if necessary.\n        Implements production-grade connection pooling.\n        \"\"\"\n        if cls._engine is None:\n            cls._engine = create_engine(\n                settings.DATABASE_URL,\n                pool_size=20,          # Production-ready pool size\n                max_overflow=30,       # Allow for burst connections\n                pool_pre_ping=True,      # Check connections before use\n                pool_recycle=3600,       # Recycle connections hourly\n                connect_args={\"check_same_thread\": False} # Required for SQLite\n            )\n            # Create tables if they don't exist\n            Base.metadata.create_all(bind=cls._engine)\n        return cls._engine\n\n    @classmethod\n    def get_session(cls):\n        \"\"\"\n        Returns a new SQLAlchemy session from our session factory.\n        \"\"\"\n        if cls._SessionLocal is None:\n            engine = cls.get_engine()\n            cls._SessionLocal = sessionmaker(\n                autocommit=False,\n                autoflush=False,\n                bind=engine\n            )\n        return cls._SessionLocal()\n\n# Convenience function for dependency injection\ndef get_db_session():\n    return DatabaseManager.get_session()"
}