{
    "filepath": "./src/paddock_parser/fetcher.py",
    "content": "import asyncio\nimport random\nimport httpx\nfrom tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type\n\nUSER_AGENTS = [\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4\",\n]\n\n@retry(\n    stop=stop_after_attempt(5),\n    wait=wait_exponential(multiplier=1, min=2, max=60),\n    retry=retry_if_exception_type((httpx.RequestError, httpx.HTTPStatusError)),\n    reraise=True\n)\nasync def get_page_content(url: str, post_data: dict = None) -> str:\n    \"\"\"\n    Asynchronously fetches the content of a web page with retries and realistic headers.\n    Can perform either a GET or a POST request.\n    \"\"\"\n    headers = {\n        \"User-Agent\": random.choice(USER_AGENTS),\n        \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n        \"Accept-Language\": \"en-US,en;q=0.5\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"DNT\": \"1\",\n        \"Connection\": \"keep-alive\",\n        \"Upgrade-Insecure-Requests\": \"1\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        if post_data:\n            response = await client.post(url, headers=headers, json=post_data, timeout=30.0)\n        else:\n            response = await client.get(url, headers=headers, timeout=30.0)\n\n        response.raise_for_status()\n        return response.text\n"
}