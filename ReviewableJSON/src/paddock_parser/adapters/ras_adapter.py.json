{
    "filepath": "./src/paddock_parser/adapters/ras_adapter.py",
    "content": "import json\nimport logging\nfrom typing import List, Dict, Any, Optional\nfrom datetime import datetime\n\nfrom ..base import BaseAdapterV3, NormalizedRace\nfrom ..http_client import ForagerClient\n\nclass RasAdapter(BaseAdapterV3):\n    \"\"\"\n    Adapter for the Racing and Sports (RAS) JSON feed.\n    This adapter fetches and parses multi-discipline (Thoroughbred, Harness, Greyhound)\n    race data from a single endpoint.\n    \"\"\"\n\n    SOURCE_ID = \"ras\"\n    BASE_URL = \"https://www.racingandsports.com.au\"\n\n    def __init__(self, config: Optional[Dict[str, Any]] = None):\n        super().__init__(config)\n        self.forager = ForagerClient()\n\n    async def fetch(self) -> List[NormalizedRace]:\n        \"\"\"\n        Fetches the JSON data from the RAS endpoint and parses it.\n        \"\"\"\n        url = f\"{self.BASE_URL}/todays-racing-json-v2\"\n        json_text = await self.forager.fetch(url)\n        if not json_text:\n            logging.error(f\"Failed to fetch data from {url}\")\n            return []\n        return self.parse_races(json_text)\n\n    def parse_races(self, json_text: str) -> List[NormalizedRace]:\n        \"\"\"\n        Parses the JSON response from the RAS endpoint into a list of NormalizedRace objects.\n        \"\"\"\n        races = []\n        if not json_text:\n            return races\n\n        try:\n            payload = json.loads(json_text)\n            for discipline_group in payload or []:\n                for country_group in discipline_group.get(\"Countries\", []):\n                    for meeting in country_group.get(\"Meetings\", []):\n                        course = (meeting.get(\"Course\") or \"\").strip()\n                        if not course:\n                            continue\n\n                        race_number = int(meeting.get(\"RaceNumber\", 0))\n\n                        races.append(\n                            NormalizedRace(\n                                race_id=f\"{self.SOURCE_ID}-{course}-{race_number}\",\n                                track_name=course,\n                                race_number=race_number,\n                                number_of_runners=0,\n                                runners=[]\n                            )\n                        )\n        except json.JSONDecodeError as e:\n            logging.error(f\"Failed to decode JSON from RAS feed: {e}\")\n        except Exception as e:\n            logging.error(f\"An unexpected error occurred while parsing RAS data: {e}\")\n\n        return races\n"
}