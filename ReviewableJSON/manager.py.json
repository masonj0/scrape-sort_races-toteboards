{
    "filepath": "./src/paddock_parser/database/manager.py",
    "content": "import sqlite3\nfrom typing import List\nfrom collections import defaultdict\nfrom src.paddock_parser.models import Race, Runner\n\nclass DatabaseManager:\n    def __init__(self, db_path: str):\n        \"\"\"Initializes the DatabaseManager and connects to the database.\"\"\"\n        self.conn = sqlite3.connect(db_path)\n        self.conn.row_factory = sqlite3.Row # Allows accessing columns by name\n        self.conn.execute(\"PRAGMA foreign_keys = 1\")\n\n    def create_tables(self):\n        \"\"\"Creates the necessary tables if they don't already exist.\"\"\"\n        cursor = self.conn.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS races (\n                race_id TEXT PRIMARY KEY,\n                venue TEXT NOT NULL,\n                race_time TEXT NOT NULL,\n                race_number INTEGER NOT NULL,\n                is_handicap INTEGER NOT NULL,\n                source TEXT,\n                sources TEXT\n            )\n        \"\"\")\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS runners (\n                runner_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                race_id TEXT NOT NULL,\n                name TEXT NOT NULL,\n                odds TEXT NOT NULL,\n                is_winner INTEGER NOT NULL DEFAULT 0,\n                FOREIGN KEY (race_id) REFERENCES races (race_id) ON DELETE CASCADE\n            )\n        \"\"\")\n        self.conn.commit()\n\n    def save_race(self, race: Race):\n        \"\"\"Saves a race and its runners to the database using an upsert logic.\"\"\"\n        cursor = self.conn.cursor()\n        try:\n            sources_json = \",\".join(race.sources) if race.sources else \"\"\n            cursor.execute(\"\"\"\n                INSERT OR REPLACE INTO races (race_id, venue, race_time, race_number, is_handicap, source, sources)\n                VALUES (?, ?, ?, ?, ?, ?, ?)\n            \"\"\", (race.race_id, race.venue, race.race_time, race.race_number, race.is_handicap, race.source, sources_json))\n\n            cursor.execute(\"DELETE FROM runners WHERE race_id = ?\", (race.race_id,))\n\n            if race.runners:\n                runner_data = [(race.race_id, r.name, r.odds, r.is_winner) for r in race.runners]\n                cursor.executemany(\"\"\"\n                    INSERT INTO runners (race_id, name, odds, is_winner)\n                    VALUES (?, ?, ?, ?)\n                \"\"\", runner_data)\n\n            self.conn.commit()\n        except sqlite3.Error as e:\n            print(f\"Database error: {e}\")\n            self.conn.rollback()\n\n    def get_all_races(self) -> List[Race]:\n        \"\"\"Retrieves all races and their runners from the database.\"\"\"\n        cursor = self.conn.cursor()\n\n        # Fetch all runners and group them by race_id\n        cursor.execute(\"SELECT * FROM runners\")\n        runners_by_race = defaultdict(list)\n        for row in cursor.fetchall():\n            runner = Runner(\n                name=row['name'],\n                odds=row['odds'],\n                is_winner=bool(row['is_winner'])\n            )\n            runners_by_race[row['race_id']].append(runner)\n\n        # Fetch all races and attach the grouped runners\n        cursor.execute(\"SELECT * FROM races\")\n        races = []\n        for row in cursor.fetchall():\n            race_id = row['race_id']\n            race = Race(\n                race_id=race_id,\n                venue=row['venue'],\n                race_time=row['race_time'],\n                race_number=row['race_number'],\n                is_handicap=bool(row['is_handicap']),\n                source=row['source'],\n                sources=row['sources'].split(',') if row['sources'] else [],\n                runners=runners_by_race.get(race_id, [])\n            )\n            races.append(race)\n\n        return races\n\n    def close(self):\n        \"\"\"Closes the database connection.\"\"\"\n        if self.conn:\n            self.conn.close()\n"
}