{
    "filepath": "src/paddock_parser/database/manager.py",
    "content": "import sqlite3\nfrom src.paddock_parser.models import Race\n\nclass DatabaseManager:\n    def __init__(self, db_path: str):\n        \"\"\"Initializes the DatabaseManager and connects to the database.\"\"\"\n        self.conn = sqlite3.connect(db_path)\n        self.conn.execute(\"PRAGMA foreign_keys = 1\") # Enforce foreign key constraints\n\n    def create_tables(self):\n        \"\"\"Creates the necessary tables if they don't already exist.\"\"\"\n        cursor = self.conn.cursor()\n        # Create races table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS races (\n                race_id TEXT PRIMARY KEY,\n                venue TEXT NOT NULL,\n                race_time TEXT NOT NULL,\n                is_handicap INTEGER NOT NULL\n            )\n        \"\"\")\n        # Create runners table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS runners (\n                runner_id INTEGER PRIMARY KEY AUTOINCREMENT,\n                race_id TEXT NOT NULL,\n                name TEXT NOT NULL,\n                odds TEXT NOT NULL,\n                FOREIGN KEY (race_id) REFERENCES races (race_id) ON DELETE CASCADE\n            )\n        \"\"\")\n        self.conn.commit()\n\n    def save_race(self, race: Race):\n        \"\"\"\n        Saves a race and its runners to the database.\n        Uses an \"upsert\" logic: inserts a new race or updates an existing one.\n        When a race is updated, its associated runners are replaced.\n        \"\"\"\n        cursor = self.conn.cursor()\n\n        # Use a transaction to ensure atomicity\n        try:\n            # Upsert the race details.\n            # The INTEGER type for is_handicap is handled by sqlite3 library bool conversion.\n            cursor.execute(\"\"\"\n                INSERT OR REPLACE INTO races (race_id, venue, race_time, is_handicap)\n                VALUES (?, ?, ?, ?)\n            \"\"\", (race.race_id, race.venue, race.race_time, race.is_handicap))\n\n            # Delete old runners for this race to ensure a clean slate before adding new ones.\n            # ON DELETE CASCADE on the foreign key would also handle this if we deleted the race,\n            # but since we are replacing, an explicit DELETE is clearer and safer.\n            cursor.execute(\"DELETE FROM runners WHERE race_id = ?\", (race.race_id,))\n\n            # Insert the new list of runners\n            if race.runners:\n                runner_data = [(race.race_id, r.name, r.odds) for r in race.runners]\n                cursor.executemany(\"\"\"\n                    INSERT INTO runners (race_id, name, odds)\n                    VALUES (?, ?, ?)\n                \"\"\", runner_data)\n\n            self.conn.commit()\n        except sqlite3.Error as e:\n            print(f\"Database error: {e}\")\n            self.conn.rollback()\n\n\n    def close(self):\n        \"\"\"Closes the database connection.\"\"\"\n        if self.conn:\n            self.conn.close()\n"
}