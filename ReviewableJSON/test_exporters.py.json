{
    "filepath": "./tests/api/test_exporters.py",
    "content": "\"\"\"\nTest-as-Spec for the API Exporter Endpoints\nPath: tests/api/test_exporters.py\n\"\"\"\n\nimport pytest\nimport csv\nfrom io import StringIO\nfrom unittest.mock import patch\nfrom fastapi.testclient import TestClient\nfrom datetime import datetime\n\n# Assume these data structures will be imported from the project\nfrom src.paddock_parser.base import NormalizedRace, NormalizedRunner\n\n# The FastAPI app\nfrom src.paddock_parser.api.main import app\n\n# Create a TestClient instance for making API requests in tests\nclient = TestClient(app)\n\n@pytest.fixture\ndef mock_pipeline_data():\n    \"\"\"Provides a sample list of NormalizedRace objects for mocking.\"\"\"\n    # This is duplicated from test_main.py for simplicity.\n    # In a larger project, this could be moved to a shared conftest.py\n    return [\n        NormalizedRace(\n            race_id=\"AQU_20250901_1\",\n            track_name=\"Aqueduct\",\n            race_number=1,\n            post_time=datetime(2025, 9, 1, 13, 0, 0),\n            number_of_runners=8,\n            runners=[\n                NormalizedRunner(name=\"Speedster\", program_number=1),\n                NormalizedRunner(name=\"Galloper\", program_number=2),\n            ],\n            score=95,\n        ),\n        NormalizedRace(\n            race_id=\"SA_20250901_3\",\n            track_name=\"Santa Anita\",\n            race_number=3,\n            post_time=datetime(2025, 9, 1, 15, 30, 0),\n            number_of_runners=10,\n            runners=[],\n            score=110,\n        ),\n    ]\n\nclass TestExporterEndpoints:\n    @patch('src.paddock_parser.api.main.run_pipeline')\n    def test_get_races_json_endpoint(self, mock_run_pipeline, mock_pipeline_data):\n        \"\"\"\n        SPEC: The /api/v1/races.json endpoint should return a JSON array of race objects,\n        behaving identically to the main /api/v1/races endpoint.\n        \"\"\"\n        mock_run_pipeline.return_value = mock_pipeline_data\n\n        response = client.get(\"/api/v1/races.json\")\n\n        assert response.status_code == 200\n        response_data = response.json()\n\n        assert isinstance(response_data, list)\n        assert len(response_data) == 2\n        assert response_data[0][\"race_id\"] == \"AQU_20250901_1\"\n        assert response_data[1][\"track_name\"] == \"Santa Anita\"\n\n    @patch('src.paddock_parser.api.main.run_pipeline')\n    def test_get_races_csv_endpoint(self, mock_run_pipeline, mock_pipeline_data):\n        \"\"\"\n        SPEC: The /api/v1/races.csv endpoint should return race data as a CSV file.\n        \"\"\"\n        mock_run_pipeline.return_value = mock_pipeline_data\n\n        response = client.get(\"/api/v1/races.csv\")\n\n        assert response.status_code == 200\n        assert response.headers['content-type'] == 'text/csv; charset=utf-8'\n\n        # Parse the CSV content\n        csv_content = response.text\n        reader = csv.reader(StringIO(csv_content))\n\n        rows = list(reader)\n\n        # Check header\n        expected_header = [\"race_id\", \"track_name\", \"race_number\", \"post_time\", \"number_of_runners\", \"score\"]\n        assert rows[0] == expected_header\n\n        # Check data rows\n        assert len(rows) == 3 # 1 header + 2 data rows\n\n        # Check first data row content\n        assert rows[1][0] == \"AQU_20250901_1\"\n        assert rows[1][1] == \"Aqueduct\"\n        assert rows[1][2] == \"1\"\n        assert rows[1][3] == \"2025-09-01T13:00:00\"\n        assert rows[1][4] == \"8\"\n        assert rows[1][5] == \"95\"\n\n        # Check second data row content\n        assert rows[2][0] == \"SA_20250901_3\"\n        assert rows[2][1] == \"Santa Anita\"\n"
}