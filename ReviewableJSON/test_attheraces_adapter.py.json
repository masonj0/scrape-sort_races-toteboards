{
    "filepath": "tests/adapters/test_attheraces_adapter.py",
    "content": "\"\"\"\nTest-as-Spec for AtTheRaces Adapter\n\nThis file serves as both specification and test suite for the modernized AtTheRacesAdapter class.\nIt defines the expected behavior and interface for parsing HTML content from attheraces.com\ninto normalized data structures, based on actual HTML structure analysis.\n\nPath: tests/adapters/test_attheraces_adapter.py\n\"\"\"\n\nimport pytest\nfrom unittest.mock import patch\nfrom datetime import datetime\n\n# Import the modern data structures\nfrom paddock_parser.base import NormalizedRace, NormalizedRunner\n\n\n\nclass TestAtTheRacesAdapterInitialization:\n    \"\"\"Test suite for AtTheRacesAdapter initialization and basic setup.\"\"\"\n\n    def test_adapter_can_be_initialized(self):\n        \"\"\"\n        SPEC: AtTheRacesAdapter class can be instantiated.\n        \"\"\"\n        from src.paddock_parser.adapters.attheraces_adapter import AtTheRacesAdapter\n\n        adapter = AtTheRacesAdapter()\n\n        assert adapter is not None\n        assert adapter.source_id == 'attheraces'\n\nclass TestHTMLParsing:\n    \"\"\"Test suite for HTML content parsing.\"\"\"\n\n    @pytest.fixture\n    def real_attheraces_html(self):\n        \"\"\"\n        Fixture providing actual At The Races HTML structure.\n        Based on https://www.attheraces.com/racecard/Roscommon/01-September-2025/1745\n        \"\"\"\n        return \"\"\"\n        <!DOCTYPE html>\n        <html>\n        <body>\n            <div class=\"race-header\"><h1>17:45 Roscommon (IRE) 01 Sep 2025</h1><div class=\"race-info\"><div>Lecarrow Race</div></div></div>\n            <div class=\"runner-card\" data-horse=\"In My Teens\"><div class=\"runner-info\"><div class=\"horse-name\"><a>In My Teens</a></div><div class=\"runner-number\">72</div><div class=\"connections\"><div class=\"jockey\">J: G F Carroll</div><div class=\"trainer\">T: G P Cromwell</div></div><div class=\"odds\">7/2</div></div></div>\n            <div class=\"runner-card\" data-horse=\"Vorfreude\"><div class=\"runner-info\"><div class=\"horse-name\"><a>Vorfreude</a></div><div class=\"runner-number\">11</div><div class=\"connections\"><div class=\"jockey\">J: B M Coen</div><div class=\"trainer\">T: J G Murphy</div></div><div class=\"odds\">11/4</div></div></div>\n        </body>\n        </html>\n        \"\"\"\n\n    def test_parse_races_returns_list_of_normalized_races(self, real_attheraces_html):\n        \"\"\"\n        SPEC: parse_races() method accepts HTML content and returns List[NormalizedRace].\n        \"\"\"\n        from src.paddock_parser.adapters.attheraces_adapter import AtTheRacesAdapter\n\n        adapter = AtTheRacesAdapter()\n\n        # This is a placeholder for the real implementation\n        with patch.object(adapter, '_parse_race_data', return_value=[NormalizedRace(race_id=\"test_id\", race_number=1, track_name=\"Roscommon\", number_of_runners=2)]):\n             result = adapter.parse_races(real_attheraces_html)\n\n        assert isinstance(result, list)\n        assert len(result) == 1\n        assert isinstance(result[0], NormalizedRace)\n        assert result[0].track_name == \"Roscommon\"\n        assert result[0].number_of_runners == 2\n\n    def test_parse_races_extracts_correct_data(self, real_attheraces_html):\n        \"\"\"\n        SPEC: All runner and race data should be correctly extracted.\n        \"\"\"\n        from src.paddock_parser.adapters.attheraces_adapter import AtTheRacesAdapter\n        adapter = AtTheRacesAdapter()\n\n        # Placeholder for the real implementation\n        runners_data = [\n            NormalizedRunner(name=\"In My Teens\", program_number=72, jockey=\"G F Carroll\", trainer=\"G P Cromwell\", odds=\"7/2\"),\n            NormalizedRunner(name=\"Vorfreude\", program_number=11, jockey=\"B M Coen\", trainer=\"J G Murphy\", odds=\"11/4\")\n        ]\n        race_data = NormalizedRace(\n            race_id=\"1745_ROS\",\n            track_name=\"Roscommon\",\n            race_number=1, # Assuming 1 as it is the only one on the page\n            post_time=datetime(2025, 9, 1, 17, 45),\n            race_type=\"Lecarrow Race\",\n            number_of_runners=2,\n            runners=runners_data\n        )\n\n        with patch.object(adapter, '_parse_race_data', return_value=[race_data]):\n            races = adapter.parse_races(real_attheraces_html)\n\n        race = races[0]\n        assert race.track_name == \"Roscommon\"\n        assert race.post_time.hour == 17\n        assert race.number_of_runners == 2\n\n        in_my_teens = race.runners[0]\n        assert in_my_teens.name == \"In My Teens\"\n        assert in_my_teens.jockey == \"G F Carroll\"\n        assert in_my_teens.odds == \"7/2\"\n"
}