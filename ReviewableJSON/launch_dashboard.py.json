{
    "filepath": "./launch_dashboard.py",
    "content": "import streamlit as st\nimport pandas as pd\nimport asyncio\nfrom src.paddock_parser.pipeline import run_pipeline\n\nst.set_page_config(layout=\"wide\")\n\nst.title(\"Paddock Parser NG - Enlightened Scorer Dashboard\")\n\nst.markdown(\"\"\"\nThis dashboard allows you to run the Paddock Parser pipeline and view the results of the **Enlightened Scorer**.\nThe scorer analyzes races based on a \"Trifecta of Factors\": field size, favorite's odds, and contention.\nClick the button below to fetch and analyze the latest race data.\n\"\"\")\n\nif 'race_data' not in st.session_state:\n    st.session_state.race_data = None\n\nif st.button(\"Run Analysis\", type=\"primary\"):\n    with st.spinner(\"Running pipeline... This may take a moment.\"):\n        # Streamlit runs in its own event loop, so we need to be careful.\n        # The `asyncio.run` approach is simple for this proof-of-concept.\n        try:\n            races = asyncio.run(run_pipeline(min_runners=0, specific_source=None))\n\n            if races:\n                # Convert the list of NormalizedRace objects to a list of dictionaries\n                race_list = []\n                for race in races:\n                    race_list.append({\n                        \"Track\": race.track_name,\n                        \"Time\": race.post_time.strftime(\"%H:%M\") if race.post_time else \"N/A\",\n                        \"Race #\": race.race_number,\n                        \"Runners\": race.number_of_runners,\n                        \"Score\": round(race.score, 2) if race.score is not None else 0.0,\n                        \"Fav Odds\": round(race.scores.get('favorite_odds_score', 0), 2),\n                        \"Contention\": round(race.scores.get('contention_score', 0), 2),\n                        \"Field Size\": round(race.scores.get('field_size_score', 0), 3),\n                    })\n\n                # Create a pandas DataFrame\n                df = pd.DataFrame(race_list)\n                st.session_state.race_data = df\n            else:\n                st.session_state.race_data = pd.DataFrame() # Empty dataframe\n                st.warning(\"No races were found by the pipeline.\")\n\n        except Exception as e:\n            st.session_state.race_data = None\n            st.error(f\"An error occurred while running the pipeline: {e}\")\n\nif st.session_state.race_data is not None:\n    if not st.session_state.race_data.empty:\n        st.success(\"Analysis complete!\")\n        st.dataframe(st.session_state.race_data, use_container_width=True)\n    else:\n        # This handles the case where the button was clicked, but no data was returned.\n        # We don't want to show a success message or an empty table without context.\n        pass\n"
}