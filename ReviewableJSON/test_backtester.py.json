{
    "filepath": "tests/test_backtester.py",
    "content": "import pytest\nfrom typing import List, Callable\n\n# These updated models reflect the changes you will make in src/paddock_parser/models.py\nfrom paddock_parser.models import Race, Runner\n\n# The components you will be interacting with and creating\nfrom paddock_parser.database.manager import DatabaseManager\nfrom paddock_parser.backtester import Backtester\n\n# --- Test Setup & Fixtures ---\n\n@pytest.fixture\ndef historical_db_manager():\n    \"\"\"\n    Sets up an in-memory SQLite database populated with historical race data,\n    including designated winners for testing.\n    \"\"\"\n    manager = DatabaseManager(db_path=\":memory:\")\n    manager.create_tables() # Assumes this method exists from Operation Chronicle\n\n    # Create historical races with clear winners\n    races_to_save = [\n        Race(race_id=\"R1\", venue=\"VenueA\", race_time=\"14:00\", source=\"Test\", is_handicap=False, runners=[\n            Runner(name=\"Horse A (Fav)\", odds=\"2/1\", is_winner=False),\n            Runner(name=\"Horse B (Winner)\", odds=\"5/1\", is_winner=True)\n        ]),\n        Race(race_id=\"R2\", venue=\"VenueB\", race_time=\"15:00\", source=\"Test\", is_handicap=False, runners=[\n            Runner(name=\"Horse C (Winner, Fav)\", odds=\"1/1\", is_winner=True),\n            Runner(name=\"Horse D\", odds=\"8/1\", is_winner=False)\n        ]),\n        Race(race_id=\"R3\", venue=\"VenueC\", race_time=\"16:00\", source=\"Test\", is_handicap=False, runners=[\n            Runner(name=\"Horse E (Fav)\", odds=\"3/1\", is_winner=False),\n            Runner(name=\"Horse F\", odds=\"10/1\", is_winner=False) # Race with no winner in data\n        ]),\n    ]\n\n    for race in races_to_save:\n        manager.save_race(race) # Assumes save_race is idempotent and handles winners\n\n    yield manager\n    manager.close()\n\ndef simple_favorite_picker(races: List[Race]) -> List[Race]:\n    \"\"\" A simple scoring/selection algorithm for testing that picks the favorite. \"\"\"\n    # (A real algorithm would be more complex, but this is perfect for a test)\n    for race in races:\n        # Simplistic favorite identification\n        race.runners.sort(key=lambda r: (r.odds == 'SP', float(r.odds.split('/')[0]) / float(r.odds.split('/')[1]) if '/' in r.odds else float('inf')))\n    # Assume the strategy is to \"bet\" on the first runner (the favorite) of each race\n    return races\n\n# --- Test Cases for Operation Backtest ---\n\ndef test_backtester_initialization(historical_db_manager):\n    \"\"\" SPEC: The Backtester should initialize correctly with a DatabaseManager instance. \"\"\"\n    backtester = Backtester(db_manager=historical_db_manager)\n    assert backtester.db_manager is not None\n\ndef test_backtester_run_calculates_performance_correctly(historical_db_manager):\n    \"\"\"\n    SPEC: The run method must execute a given strategy against all historical data,\n    compare the top-ranked runner to the actual winner, and calculate the win rate.\n    \"\"\"\n    # Arrange\n    backtester = Backtester(db_manager=historical_db_manager)\n    \n    # Act\n    # Run the backtest using our simple \"pick the favorite\" strategy\n    results = backtester.run(strategy_func=simple_favorite_picker)\n\n    # Assert\n    # The backtester should have analyzed the 3 historical races.\n    # The simple_favorite_picker strategy would have picked:\n    # - R1: Horse A (Fav) -> Not a winner\n    # - R2: Horse C (Winner, Fav) -> WINNER\n    # - R3: Horse E (Fav) -> Not a winner\n    \n    assert \"bets_placed\" in results\n    assert \"winners_found\" in results\n    assert \"win_rate\" in results\n\n    assert results[\"bets_placed\"] == 3\n    assert results[\"winners_found\"] == 1\n    assert results[\"win_rate\"] == pytest.approx(1/3 * 100) # Check for approx. 33.33%\n\ndef test_backtester_handles_no_historical_data():\n    \"\"\" SPEC: The backtester should not fail if the database is empty. \"\"\"\n    # Arrange\n    empty_manager = DatabaseManager(db_path=\":memory:\")\n    empty_manager.create_tables()\n    backtester = Backtester(db_manager=empty_manager)\n\n    # Act\n    results = backtester.run(strategy_func=simple_favorite_picker)\n\n    # Assert\n    assert results[\"bets_placed\"] == 0\n    assert results[\"winners_found\"] == 0\n    assert results[\"win_rate\"] == 0.0\n"
}