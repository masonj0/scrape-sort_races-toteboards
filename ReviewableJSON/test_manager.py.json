{
    "filepath": "./tests/database/test_manager.py",
    "content": "import sqlite3\nimport pytest\n\n# Import the data models from their new, dedicated file\nfrom paddock_parser.models import Race, Runner\n\n# This is the class Jules will need to implement in src/paddock_parser/database/manager.py\n# The test is written as if this class already exists.\nfrom paddock_parser.database.manager import DatabaseManager\n\n@pytest.fixture\ndef db_manager():\n    \"\"\" Fixture to set up an in-memory SQLite database for each test. \"\"\"\n    manager = DatabaseManager(db_path=\":memory:\")\n    yield manager\n    manager.close()\n\n@pytest.fixture\ndef sample_race():\n    \"\"\" Fixture to provide a sample Race object for testing. \"\"\"\n    return Race(\n        race_id=\"2025-09-03_Aintree_1\",\n        venue=\"Aintree\",\n        race_time=\"14:30\",\n        race_number=1,\n        is_handicap=True,\n        runners=[\n            Runner(name=\"Horse A\", odds=\"10/1\"),\n            Runner(name=\"Horse B\", odds=\"5/2\"),\n        ]\n    )\n\ndef test_database_manager_initialization(db_manager):\n    \"\"\" SPEC: The DatabaseManager should initialize a connection to the database. \"\"\"\n    assert db_manager.conn is not None\n    assert isinstance(db_manager.conn, sqlite3.Connection)\n\ndef test_create_tables(db_manager):\n    \"\"\" SPEC: The create_tables method should create the 'races' and 'runners' tables. \"\"\"\n    db_manager.create_tables()\n    cursor = db_manager.conn.cursor()\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='races';\")\n    assert cursor.fetchone() is not None, \"The 'races' table was not created.\"\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='runners';\")\n    assert cursor.fetchone() is not None, \"The 'runners' table was not created.\"\n\ndef test_save_race_inserts_new_data(db_manager, sample_race):\n    \"\"\" SPEC: The save_race method should insert a new race and its runners into the database. \"\"\"\n    db_manager.create_tables()\n    db_manager.save_race(sample_race)\n\n    # Verify the race was inserted\n    cursor = db_manager.conn.cursor()\n    cursor.execute(\"SELECT venue, race_time, is_handicap FROM races WHERE race_id=?\", (sample_race.race_id,))\n    race_data = cursor.fetchone()\n    assert race_data is not None\n    assert tuple(race_data) == (\"Aintree\", \"14:30\", 1)\n\n    # Verify the runners were inserted\n    cursor.execute(\"SELECT name, odds FROM runners WHERE race_id=?\", (sample_race.race_id,))\n    runners_data = cursor.fetchall()\n    runners_as_tuples = [tuple(row) for row in runners_data]\n    assert len(runners_as_tuples) == 2\n    assert (\"Horse A\", \"10/1\") in runners_as_tuples\n    assert (\"Horse B\", \"5/2\") in runners_as_tuples\n\ndef test_save_race_is_idempotent_and_updates(db_manager, sample_race):\n    \"\"\"\n    SPEC: The save_race method should be an \"upsert.\"\n    - It should NOT create duplicate rows for the same race.\n    - It SHOULD update the race and runner details if they change.\n    \"\"\"\n    db_manager.create_tables()\n    # First save\n    db_manager.save_race(sample_race)\n\n    # Modify the race details\n    updated_race = Race(\n        race_id=\"2025-09-03_Aintree_1\", # Same ID\n        venue=\"Aintree\",\n        race_time=\"14:35\", # Updated time\n        race_number=1, # Same race number\n        is_handicap=False, # Updated handicap status\n        runners=[\n            Runner(name=\"Horse A\", odds=\"12/1\"), # Updated odds\n            Runner(name=\"Horse C\", odds=\"8/1\"), # New runner\n        ]\n    )\n    # Second save\n    db_manager.save_race(updated_race)\n\n    cursor = db_manager.conn.cursor()\n\n    # Verify there is still only ONE race with this ID\n    cursor.execute(\"SELECT COUNT(*) FROM races WHERE race_id=?\", (sample_race.race_id,))\n    assert cursor.fetchone()[0] == 1, \"save_race created a duplicate race.\"\n\n    # Verify the race details were UPDATED\n    cursor.execute(\"SELECT race_time, is_handicap FROM races WHERE race_id=?\", (sample_race.race_id,))\n    race_data = cursor.fetchone()\n    assert tuple(race_data) == (\"14:35\", 0)\n\n    # Verify the runners were UPDATED (old ones removed, new ones added)\n    cursor.execute(\"SELECT name, odds FROM runners WHERE race_id=?\", (sample_race.race_id,))\n    runners_data = cursor.fetchall()\n    runners_as_tuples = [tuple(row) for row in runners_data]\n    assert len(runners_as_tuples) == 2\n    assert (\"Horse A\", \"12/1\") in runners_as_tuples\n    assert (\"Horse C\", \"8/1\") in runners_as_tuples\n    assert (\"Horse B\", \"5/2\") not in runners_as_tuples\n"
}