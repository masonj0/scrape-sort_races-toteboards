{
    "file_path": "python_service/config.py",
    "content": "# python_service/config.py\nimport os\nfrom pathlib import Path\nfrom typing import Optional, List\nfrom pydantic_settings import BaseSettings\nfrom functools import lru_cache\nimport structlog\n\n# --- Encryption Setup ---\ntry:\n    from cryptography.fernet import Fernet\n    ENCRYPTION_ENABLED = True\nexcept ImportError:\n    ENCRYPTION_ENABLED = False\n\nKEY_FILE = Path('.key')\nCIPHER = None\nif ENCRYPTION_ENABLED and KEY_FILE.exists():\n    with open(KEY_FILE, 'rb') as f:\n        key = f.read()\n    CIPHER = Fernet(key)\n\ndef decrypt_value(value: Optional[str]) -> Optional[str]:\n    \"\"\"If a value is encrypted, decrypts it. Otherwise, returns it as is.\"\"\"\n    if value and value.startswith('encrypted:') and CIPHER:\n        try:\n            return CIPHER.decrypt(value[10:].encode()).decode()\n        except Exception:\n            # Return the corrupted value for debugging, but it will likely fail later\n            return value\n    return value\n\nfrom .credentials_manager import SecureCredentialsManager\n\nclass Settings(BaseSettings):\n    API_KEY: str = \"\"\n\n    def __init__(self, **data):\n        super().__init__(**data)\n        # If .env doesn't have API_KEY, try to load from credential manager\n        if not self.API_KEY:\n            self.API_KEY = SecureCredentialsManager.get_api_key() or \"MISSING\"\n\n    # --- Optional Betfair Credentials ---\n    BETFAIR_APP_KEY: Optional[str] = None\n    BETFAIR_USERNAME: Optional[str] = None\n    BETFAIR_PASSWORD: Optional[str] = None\n\n    # --- Caching & Performance ---\n    REDIS_URL: str = \"redis://localhost:6379\"\n    CACHE_TTL_SECONDS: int = 1800  # 30 minutes\n    MAX_CONCURRENT_REQUESTS: int = 10\n    HTTP_POOL_CONNECTIONS: int = 100\n    HTTP_POOL_MAXSIZE: int = 100\n    HTTP_MAX_KEEPALIVE: int = 50\n    DEFAULT_TIMEOUT: int = 30\n    ADAPTER_TIMEOUT: int = 20\n\n    # --- Logging ---\n    LOG_LEVEL: str = \"INFO\"\n\n    # --- Optional Adapter Keys ---\n    TVG_API_KEY: Optional[str] = None\n    RACING_AND_SPORTS_TOKEN: Optional[str] = None\n    POINTSBET_API_KEY: Optional[str] = None\n    GREYHOUND_API_URL: Optional[str] = None\n    THE_RACING_API_KEY: Optional[str] = None\n\n    # --- CORS Configuration ---\n    ALLOWED_ORIGINS: List[str] = [\"http://localhost:3000\", \"http://localhost:3001\"]\n\n    model_config = {\"env_file\": \".env\", \"case_sensitive\": True}\n\n    def __init__(self, **values):\n        super().__init__(**values)\n        # Decrypt sensitive fields after initial loading\n        self.BETFAIR_APP_KEY = decrypt_value(self.BETFAIR_APP_KEY)\n        self.BETFAIR_USERNAME = decrypt_value(self.BETFAIR_USERNAME)\n        self.BETFAIR_PASSWORD = decrypt_value(self.BETFAIR_PASSWORD)\n\n\n@lru_cache()\ndef get_settings() -> Settings:\n    \"\"\"Loads settings and performs a proactive check for legacy paths.\"\"\"\n    log = structlog.get_logger(__name__)\n    if ENCRYPTION_ENABLED and not KEY_FILE.exists():\n        log.warning(\"encryption_key_not_found\", file=str(KEY_FILE), recommendation=\"Run 'python manage_secrets.py' to generate a key.\")\n\n    settings = Settings()\n\n    # --- Legacy Path Detection ---\n    legacy_paths = [\"attic/\", \"checkmate_web/\", \"vba_source/\"]\n    for path in legacy_paths:\n        if os.path.exists(path):\n            log.warning(\n                \"legacy_path_detected\",\n                path=path,\n                recommendation=\"This directory is obsolete and should be removed for optimal performance and security.\"\n            )\n\n    return settings"
}