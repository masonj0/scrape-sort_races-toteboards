{
    "file_path": "python_service/windows_service_wrapper.py",
    "content": "# windows_service_wrapper.py\n\nimport logging\nimport os\nimport sys\n\nimport servicemanager\nimport win32event\nimport win32service\nimport win32serviceutil\n\n# Add the service's directory to the Python path\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\nfrom checkmate_service import CheckmateBackgroundService\n\n\nclass CheckmateWindowsService(win32serviceutil.ServiceFramework):\n    _svc_name_ = \"CheckmateV8Service\"\n    _svc_display_name_ = \"Checkmate V8 Racing Analysis Service\"\n    _svc_description_ = \"Continuously fetches and analyzes horse racing data.\"\n\n    def __init__(self, args):\n        win32serviceutil.ServiceFramework.__init__(self, args)\n        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)\n        self.checkmate_service = CheckmateBackgroundService()\n        # Configure logging to use the Windows Event Log\n        logging.basicConfig(\n            level=logging.INFO, format=\"%(name)s - %(levelname)s - %(message)s\", handlers=[servicemanager.LogHandler()]\n        )\n\n    def SvcStop(self):\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n        self.checkmate_service.stop()\n        win32event.SetEvent(self.hWaitStop)\n        self.ReportServiceStatus(win32service.SERVICE_STOPPED)\n\n    def SvcDoRun(self):\n        servicemanager.LogMsg(\n            servicemanager.EVENTLOG_INFORMATION_TYPE, servicemanager.PYS_SERVICE_STARTED, (self._svc_name_, \"\")\n        )\n        self.main()\n\n    def main(self):\n        self.checkmate_service.start()\n        win32event.WaitForSingleObject(self.hWaitStop, win32event.INFINITE)\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 1:\n        servicemanager.Initialize()\n        servicemanager.PrepareToHostSingle(CheckmateWindowsService)\n        servicemanager.StartServiceCtrlDispatcher()\n    else:\n        win32serviceutil.HandleCommandLine(CheckmateWindowsService)\n"
}