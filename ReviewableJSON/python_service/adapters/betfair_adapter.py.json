{
    "filepath": "python_service/adapters/betfair_adapter.py",
    "content": "# python_service/adapters/betfair_adapter.py\n\nimport os\nimport requests\nimport logging\nfrom datetime import datetime, timedelta\n\nclass BetfairAdapter:\n    def __init__(self):\n        self.logger = logging.getLogger(self.__class__.__name__)\n        self.base_url = \"https://api.betfair.com/exchange/betting/rest/v1.0/\"\n        self.auth_url = \"https://identitysso.betfair.com/api/login\"\n        self.app_key = os.getenv('BETFAIR_APP_KEY')\n        self.username = os.getenv('BETFAIR_USERNAME')\n        self.password = os.getenv('BETFAIR_PASSWORD')\n        self.session_token = None\n        self.token_expires_at = None\n\n    def _authenticate(self):\n        \"\"\"Authenticate with Betfair API and get a session token.\"\"\"\n        if not all([self.app_key, self.username, self.password]):\n            self.logger.warning(\"Betfair credentials not fully configured. Skipping auth.\")\n            return False\n        \n        headers = {'X-Application': self.app_key, 'Content-Type': 'application/x-www-form-urlencoded'}\n        payload = f'username={self.username}&password={self.password}'\n        \n        try:\n            response = requests.post(self.auth_url, headers=headers, data=payload, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n            if data.get('status') == 'SUCCESS':\n                self.session_token = data.get('token')\n                self.token_expires_at = datetime.now() + timedelta(hours=4)\n                self.logger.info(\"Successfully authenticated with Betfair.\")\n                return True\n            else:\n                self.logger.error(f\"Betfair authentication failed: {data.get('error')}\")\n                return False\n        except requests.RequestException as e:\n            self.logger.error(f\"Error during Betfair authentication: {e}\")\n            return False\n\n    def _ensure_authenticated(self):\n        \"\"\"Check token validity and refresh if needed.\"\"\"\n        if not self.session_token or datetime.now() >= self.token_expires_at:\n            self.logger.info(\"Betfair session token expired or missing. Re-authenticating...\")\n            return self._authenticate()\n        return True\n\n    def fetch_races(self):\n        \"\"\"Fetch races from Betfair.\"\"\"\n        if not self._ensure_authenticated():\n            return [] # Cannot proceed without authentication\n\n        # Placeholder for actual race fetching logic\n        # This part would use the session_token to make authenticated calls\n        self.logger.info(\"Betfair adapter is authenticated and would fetch races here.\")\n        return [] # Returning empty list until race fetch logic is implemented"
}