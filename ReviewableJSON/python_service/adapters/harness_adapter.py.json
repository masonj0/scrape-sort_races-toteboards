{
    "file_path": "python_service/adapters/harness_adapter.py",
    "content": "# python_service/adapters/harness_adapter.py\nfrom datetime import datetime\nfrom typing import AsyncGenerator\n\nfrom ..models import OddsData\nfrom ..models import Race\nfrom ..models import Runner\nfrom ..utils.odds import parse_odds_to_decimal\nfrom .base import BaseAdapter\n\n\nclass HarnessAdapter(BaseAdapter):\n    \"\"\"Adapter for fetching US harness racing data from data.ustrotting.com.\"\"\"\n\n    SOURCE_NAME = \"USTrotting\"\n    BASE_URL = \"https://data.ustrotting.com/api/racenet/racing/\"\n\n    def __init__(self, config=None):\n        super().__init__(self.SOURCE_NAME, self.BASE_URL)\n\n    async def fetch_races(self, date: str) -> AsyncGenerator[Race, None]:\n        \"\"\"Fetches all harness races for a given date.\"\"\"\n        card_data = await self.make_request(method=\"get\", url=f\"{self.BASE_URL}card/{date}\")\n        if not card_data or not card_data.get(\"meetings\"):\n            return\n\n        for meeting in card_data[\"meetings\"]:\n            track_name = meeting.get(\"track\", {}).get(\"name\")\n            for race_data in meeting.get(\"races\", []):\n                yield self._parse_race(race_data, track_name, date)\n\n    def _parse_race(self, race_data: dict, track_name: str, date: str) -> Race:\n        \"\"\"Parses a single race from the USTA API into a Race object.\"\"\"\n        race_number = race_data.get(\"raceNumber\", 0)\n        post_time_str = race_data.get(\"postTime\", \"00:00 AM\")\n        start_time = self._parse_post_time(date, post_time_str)\n\n        runners = []\n        for runner_data in race_data.get(\"runners\", []):\n            odds_str = runner_data.get(\"morningLineOdds\", \"\")\n            # Ensure odds are fractional for parsing\n            if \"/\" not in odds_str and odds_str.isdigit():\n                odds_str = f\"{odds_str}/1\"\n\n            odds = {}\n            win_odds = parse_odds_to_decimal(odds_str)\n            if win_odds and win_odds < 999:\n                odds = {self.SOURCE_NAME: OddsData(win=win_odds, source=self.SOURCE_NAME, last_updated=datetime.now())}\n\n            runners.append(\n                Runner(\n                    number=runner_data.get(\"postPosition\", 0),\n                    name=runner_data.get(\"horse\", {}).get(\"name\", \"Unknown Horse\"),\n                    odds=odds,\n                    scratched=runner_data.get(\"scratched\", False),\n                )\n            )\n\n        return Race(\n            id=f\"ust_{track_name.lower().replace(' ', '')}_{date}_{race_number}\",\n            venue=track_name,\n            race_number=race_number,\n            start_time=start_time,\n            runners=runners,\n            source=self.SOURCE_NAME,\n        )\n\n    def _parse_post_time(self, date: str, post_time: str) -> datetime:\n        \"\"\"Parses a time string like '07:00 PM' into a timezone-aware datetime object.\"\"\"\n        from zoneinfo import ZoneInfo\n\n        dt_str = f\"{date} {post_time}\"\n        naive_dt = datetime.strptime(dt_str, \"%Y-%m-%d %I:%M %p\")\n        # Assume Eastern Time for USTA data, a common standard for US racing.\n        eastern = ZoneInfo(\"America/New_York\")\n        return naive_dt.replace(tzinfo=eastern)\n"
}