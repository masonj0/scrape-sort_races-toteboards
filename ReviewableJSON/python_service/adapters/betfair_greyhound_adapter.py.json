{
    "file_path": "python_service/adapters/betfair_greyhound_adapter.py",
    "content": "# python_service/adapters/betfair_greyhound_adapter.py\nfrom datetime import datetime\nfrom typing import Any, List\n\nfrom ..models import Race, Runner\nfrom .base_v3 import BaseAdapterV3\nfrom .betfair_auth_mixin import BetfairAuthMixin\n\nclass BetfairGreyhoundAdapter(BetfairAuthMixin, BaseAdapterV3):\n    \"\"\"Adapter for fetching greyhound racing data from the Betfair Exchange API, using V3 architecture.\"\"\"\n\n    SOURCE_NAME = \"BetfairGreyhounds\"\n    BASE_URL = \"https://api.betfair.com/exchange/betting/rest/v1.0/\"\n\n    async def _fetch_data(self, date: str) -> Any:\n        \"\"\"Fetches the raw market catalogue for greyhound races on a given date.\"\"\"\n        await self._authenticate()\n        if not self.session_token:\n            self.logger.error(\"Authentication failed, cannot fetch data.\")\n            return None\n\n        start_time, end_time = self._get_datetime_range(date)\n\n        return await self.make_request(\n            method=\"post\",\n            url=f\"{self.BASE_URL}listMarketCatalogue/\",\n            json={\n                \"filter\": {\n                    \"eventTypeIds\": [\"4339\"],  # Greyhound Racing\n                    \"marketCountries\": [\"GB\", \"IE\", \"AU\"],\n                    \"marketTypeCodes\": [\"WIN\"],\n                    \"marketStartTime\": {\"from\": start_time.isoformat(), \"to\": end_time.isoformat()}\n                },\n                \"maxResults\": 1000,\n                \"marketProjection\": [\"EVENT\", \"RUNNER_DESCRIPTION\"]\n            }\n        )\n\n    def _parse_races(self, raw_data: Any) -> List[Race]:\n        \"\"\"Parses the raw market catalogue into a list of Race objects.\"\"\"\n        if not raw_data:\n            return []\n\n        races = []\n        for market in raw_data:\n            try:\n                races.append(self._parse_race(market))\n            except (KeyError, TypeError):\n                self.logger.warning(\"Failed to parse a Betfair Greyhound market.\", exc_info=True, market=market)\n                continue\n        return races\n\n    def _parse_race(self, market: dict) -> Race:\n        \"\"\"Parses a single market from the Betfair API into a Race object.\"\"\"\n        market_id = market['marketId']\n        event = market['event']\n        start_time = datetime.fromisoformat(market['marketStartTime'].replace('Z', '+00:00'))\n\n        runners = [\n            Runner(\n                number=runner.get('sortPriority', i + 1),\n                name=runner['runnerName'],\n                scratched=runner['status'] != 'ACTIVE',\n                selection_id=runner['selectionId']\n            )\n            for i, runner in enumerate(market.get('runners', []))\n        ]\n\n        return Race(\n            id=f\"bfg_{market_id}\",\n            venue=event.get('venue', 'Unknown Venue'),\n            race_number=self._extract_race_number(market.get('marketName', '')),\n            start_time=start_time,\n            runners=runners,\n            source=self.SOURCE_NAME\n        )"
}