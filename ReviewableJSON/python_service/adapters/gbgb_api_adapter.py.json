{
    "file_path": "python_service/adapters/gbgb_api_adapter.py",
    "content": "# python_service/adapters/gbgb_api_adapter.py\n\nfrom datetime import datetime\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\n\nimport httpx\nimport structlog\n\nfrom ..models import OddsData\nfrom ..models import Race\nfrom ..models import Runner\nfrom ..utils.odds import parse_odds_to_decimal\nfrom .base import BaseAdapter\n\nlog = structlog.get_logger(__name__)\n\n\nclass GbgbApiAdapter(BaseAdapter):\n    \"\"\"Adapter for the undocumented JSON API for the Greyhound Board of Great Britain.\"\"\"\n\n    def __init__(self, config):\n        super().__init__(source_name=\"GBGB\", base_url=\"https://api.gbgb.org.uk/api/\", config=config)\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        try:\n            # The endpoint appears to be structured by date for all meetings\n            endpoint = f\"results/meeting/{date}\"\n            response = await self.make_request(http_client, \"GET\", endpoint)\n\n            if not response:\n                return self._format_response(\n                    [], start_time, is_success=True, error_message=\"No meetings found in API response.\"\n                )\n\n            all_races = self._parse_meetings(response.json())\n            return self._format_response(all_races, start_time, is_success=True)\n        except httpx.HTTPError as e:\n            log.error(f\"{self.source_name}: HTTP request failed after retries\", error=str(e), exc_info=True)\n            return self._format_response(\n                [], start_time, is_success=False, error_message=\"API request failed after multiple retries.\"\n            )\n        except Exception as e:\n            log.error(f\"{self.source_name}: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response(\n                [], start_time, is_success=False, error_message=f\"An unexpected error occurred: {e}\"\n            )\n\n    def _parse_meetings(self, meetings_data: List[Dict[str, Any]]) -> List[Race]:\n        races = []\n        if meetings_data is None:\n            return races\n        for meeting in meetings_data:\n            track_name = meeting.get(\"trackName\")\n            for race_data in meeting.get(\"races\", []):\n                try:\n                    races.append(self._parse_race(race_data, track_name))\n                except Exception as e:\n                    log.error(f\"{self.source_name}: Error parsing race\", race_id=race_data.get(\"raceId\"), error=str(e))\n        return races\n\n    def _parse_race(self, race_data: Dict[str, Any], track_name: str) -> Race:\n        return Race(\n            id=f\"gbgb_{race_data['raceId']}\",\n            venue=track_name,\n            race_number=race_data[\"raceNumber\"],\n            start_time=datetime.fromisoformat(race_data[\"raceTime\"].replace(\"Z\", \"+00:00\")),\n            runners=self._parse_runners(race_data.get(\"traps\", [])),\n            source=self.source_name,\n            race_name=race_data.get(\"raceTitle\"),\n            distance=f\"{race_data.get('raceDistance')}m\",\n        )\n\n    def _parse_runners(self, runners_data: List[Dict[str, Any]]) -> List[Runner]:\n        runners = []\n        for runner_data in runners_data:\n            try:\n                # The API provides SP as a fraction, e.g., '5/2'\n                odds_data = {}\n                sp = runner_data.get(\"sp\")\n                win_odds = parse_odds_to_decimal(sp)\n                if win_odds and win_odds < 999:\n                    odds_data[self.source_name] = OddsData(\n                        win=win_odds, source=self.source_name, last_updated=datetime.now()\n                    )\n\n                runners.append(\n                    Runner(\n                        number=runner_data[\"trapNumber\"],\n                        name=runner_data[\"dogName\"],\n                        odds=odds_data,\n                    )\n                )\n            except Exception as e:\n                log.error(\n                    f\"{self.source_name}: Error parsing runner\", runner_name=runner_data.get(\"dogName\"), error=str(e)\n                )\n        return runners\n\n    def _format_response(\n        self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None\n    ) -> Dict[str, Any]:\n        return {\n            \"races\": races,\n            \"source_info\": {\n                \"name\": self.source_name,\n                \"status\": \"SUCCESS\" if is_success else \"FAILED\",\n                \"races_fetched\": len(races),\n                \"error_message\": error_message,\n                \"fetch_duration\": (datetime.now() - start_time).total_seconds(),\n            },\n        }\n"
}