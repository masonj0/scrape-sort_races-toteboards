{
    "filepath": "python_service/adapters/tvg_adapter.py",
    "content": "# python_service/adapters/tvg_adapter.py\n\nimport logging\nfrom datetime import datetime\nfrom typing import List, Optional, Dict\n\nfrom .base import BaseAdapterV7, Race, Runner\nfrom .utils import parse_odds\n\nclass TVGAdapter(BaseAdapterV7):\n    \"\"\"\n    Adapter for the TVG mobile API.\n    \"\"\"\n    SOURCE_ID = \"tvg\"\n    BASE_URL = \"https://mobile-api.tvg.com/api/mobile/races/today\"\n\n    def fetch_races(self) -> List[Race]:\n        \"\"\"\n        Fetches race data from the TVG API and transforms it into the\n        standardized Race model.\n        \"\"\"\n        response_data = self.fetcher.get(self.BASE_URL)\n        if not isinstance(response_data, dict) or 'races' not in response_data:\n            logging.warning(f\"TVGAdapter received invalid or non-dict data: {type(response_data)}\")\n            return []\n\n        all_races = []\n        for race_info in response_data.get('races', []):\n            try:\n                runners = []\n                for r in race_info.get('runners', []):\n                    if r.get('scratched'):\n                        continue\n\n                    # Extract the morning line odds string to pass to the centralized utility\n                    morning_line_odds = r.get('odds', {}).get('morningLine')\n                    if morning_line_odds is None:\n                        continue\n\n                    # Use the centralized utility to parse odds\n                    odds_val = parse_odds(morning_line_odds)\n\n                    # The utility returns 999.0 on failure; we should not include runners\n                    # with unparseable odds, maintaining the original logic's intent.\n                    if odds_val < 999.0:\n                        runners.append(Runner(name=r.get('horseName', 'N/A'), odds=odds_val))\n\n                if not runners:\n                    continue\n\n                post_time = datetime.fromisoformat(race_info['postTime'].replace('Z', '+00:00')) if race_info.get('postTime') else None\n\n                all_races.append(\n                    Race(\n                        race_id=f\"tvg_{race_info.get('raceId')}\",\n                        track_name=race_info.get('trackName', 'N/A'),\n                        race_number=race_info.get('raceNumber'),\n                        post_time=post_time,\n                        runners=runners,\n                        source=self.SOURCE_ID\n                    )\n                )\n            except (KeyError, TypeError) as e:\n                logging.warning(f\"Skipping malformed TVG race due to missing key or type error: {e}\")\n                continue\n\n        return all_races"
}