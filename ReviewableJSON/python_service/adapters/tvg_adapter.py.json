{
    "filepath": "python_service/adapters/tvg_adapter.py",
    "content": "# python_service/adapters/tvg_adapter.py\n\nimport logging\nimport requests\nfrom ..models import RaceData, RunnerData\nfrom typing import List\nfrom datetime import datetime\n\nclass TVGAdapter:\n    \"\"\"Adapter for the TVG JSON API with improved headers.\"\"\"\n    SOURCE_ID = \"tvg\"\n    BASE_URL = \"https://mobile-api.tvg.com/api/mobile/races/today\"\n\n    def __init__(self):\n        self.logger = logging.getLogger(self.__class__.__name__)\n\n    def _fetch_data(self, url, headers):\n        try:\n            response = requests.get(url, headers=headers, timeout=10)\n            response.raise_for_status()\n            return response.json()\n        except requests.RequestException as e:\n            self.logger.error(f\"GET request to {url} failed: {e}\")\n            return None\n\n    def fetch_races(self) -> List[RaceData]:\n        self.logger.info(f\"Fetching races from {self.SOURCE_ID}\")\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n            'Accept': 'application/json',\n            'Referer': 'https://www.tvg.com/'\n        }\n        response_data = self._fetch_data(self.BASE_URL, headers=headers)\n        if not response_data or 'races' not in response_data:\n            return []\n\n        races = []\n        for item in response_data.get('races', []):\n            try:\n                runners = []\n                for r in item.get('runners', []):\n                    if not r.get('scratched'):\n                        odds_val = r.get('odds', {}).get('decimal')\n                        runners.append(RunnerData(name=r.get('horseName', 'Unknown'), odds=float(odds_val) if odds_val else None))\n\n                races.append(RaceData(\n                    race_id=f\"tvg_{item['id']}\",\n                    track_name=item.get('trackName', 'Unknown Track'),\n                    race_number=item.get('raceNumber', 0),\n                    post_time=datetime.fromisoformat(item.get('postTime')),\n                    runners=runners,\n                    source=self.SOURCE_ID\n                ))\n            except Exception as e:\n                self.logger.warning(f\"Skipping malformed TVG race: {e}\")\n        return races"
}