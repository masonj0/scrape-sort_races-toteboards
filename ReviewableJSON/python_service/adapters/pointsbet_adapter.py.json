{
    "filepath": "python_service/adapters/pointsbet_adapter.py",
    "content": "# python_service/adapters/pointsbet_adapter.py\n\nimport logging\nfrom datetime import datetime\nfrom typing import List\n\nfrom .base import BaseAdapterV7, Race, Runner\nfrom .utils import parse_odds\n\nclass PointsBetAdapter(BaseAdapterV7):\n    \"\"\"\n    Adapter for the PointsBet API.\n    \"\"\"\n    SOURCE_ID = \"pointsbet\"\n    BASE_URL = \"https://api.nj.pointsbet.com/api/v2/sports/horse-racing/events/upcoming?page=1\"\n\n    def fetch_races(self) -> List[Race]:\n        \"\"\"\n        Fetches race data from the PointsBet API and transforms it into the\n        standardized Race model.\n        \"\"\"\n        response_data = self.fetcher.get(self.BASE_URL)\n        if not isinstance(response_data, dict) or not response_data.get('events'):\n            logging.warning(f\"PointsBetAdapter received invalid or non-dict data: {type(response_data)}\")\n            return []\n\n        races = []\n        for event in response_data['events']:\n            try:\n                if not event.get('winPlaceOddsAvailable'):\n                    continue\n\n                runners = []\n                for outcome in event.get('fixedPrice', {}).get('outcomes', []):\n                    if outcome.get('outcomeType') == 'Win':\n                        # Use the centralized utility to parse odds\n                        odds = parse_odds(outcome.get('price'))\n                        if odds < 999.0:\n                            runners.append(Runner(name=outcome.get('name', 'Unknown'), odds=odds))\n\n                if len(runners) < 3:\n                    continue\n\n                start_time = datetime.fromisoformat(event['startsAt'].replace('Z', '+00:00')) if event.get('startsAt') else None\n\n                races.append(\n                    Race(\n                        race_id=f\"pointsbet_{event.get('key', 'unknown')}\",\n                        track_name=event.get('competitionName', 'Unknown Track'),\n                        race_number=event.get('eventNumber'),\n                        post_time=start_time,\n                        runners=runners,\n                        source=self.SOURCE_ID\n                    )\n                )\n            except (KeyError, TypeError) as e:\n                logging.warning(f\"Skipping malformed PointsBet event: {e}\")\n                continue\n\n        return races"
}