{
    "filepath": "python_service/adapters/pointsbet_adapter.py",
    "content": "# python_service/adapters/pointsbet_adapter.py\n\nimport logging\nimport requests\nfrom datetime import datetime\nfrom typing import List\n\nfrom ..models import RaceData, RunnerData\nfrom .utils import parse_odds\n\nclass PointsBetAdapter:\n    \"\"\"\n    Adapter for the PointsBet API, enhanced for multi-sport coverage.\n    \"\"\"\n    SOURCE_ID = \"pointsbet\"\n    API_TEMPLATE = \"https://api.nj.pointsbet.com/api/v2/sports/{sport}/events/upcoming?page=1\"\n    SPORTS = [\"horse-racing\", \"harness-racing\", \"greyhound-racing\"]\n\n    def __init__(self):\n        self.logger = logging.getLogger(self.__class__.__name__)\n\n    def _fetch_data(self, url):\n        try:\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n            return response.json()\n        except requests.RequestException as e:\n            self.logger.error(f\"GET request to {url} failed: {e}\")\n            return None\n\n    def fetch_races(self) -> List[RaceData]:\n        \"\"\"\n        Fetches race data for all configured sports from the PointsBet API.\n        \"\"\"\n        self.logger.info(\"Fetching from PointsBet for all T/H/G sports...\")\n        all_races = []\n        for sport in self.SPORTS:\n            url = self.API_TEMPLATE.format(sport=sport)\n            response_data = self._fetch_data(url)\n            if not response_data or not isinstance(response_data, dict):\n                self.logger.warning(f\"Invalid response from PointsBet for sport: {sport}\")\n                continue\n\n            parsed_races = self._parse_events(response_data.get('events', []), sport)\n            all_races.extend(parsed_races)\n\n        self.logger.info(f\"Successfully fetched {len(all_races)} total races from PointsBet.\")\n        return all_races\n\n    def _parse_events(self, events: List[dict], sport_name: str) -> List[RaceData]:\n        \"\"\"\n        Parses a list of event dictionaries from the API response into Race objects.\n        \"\"\"\n        races = []\n        for event in events:\n            try:\n                if not event.get('winPlaceOddsAvailable'):\n                    continue\n\n                runners = []\n                for outcome in event.get('fixedPrice', {}).get('outcomes', []):\n                    if outcome.get('outcomeType') == 'Win':\n                        odds = parse_odds(outcome.get('price'))\n                        if odds is not None and odds < 999.0:\n                            runners.append(RunnerData(name=outcome.get('name', 'Unknown'), odds=odds))\n\n                if len(runners) < 3:\n                    continue\n                \n                start_time_str = event.get('startsAt')\n                if not start_time_str:\n                    continue\n                start_time = datetime.fromisoformat(start_time_str.replace('Z', '+00:00'))\n\n                races.append(\n                    RaceData(\n                        race_id=f\"pointsbet_{event.get('key', 'unknown')}\",\n                        track_name=event.get('competitionName', 'Unknown Track'),\n                        race_number=event.get('eventNumber'),\n                        post_time=start_time,\n                        runners=runners,\n                        source=self.SOURCE_ID,\n                    )\n                )\n            except (KeyError, TypeError) as e:\n                self.logger.warning(f\"Skipping malformed PointsBet event for sport {sport_name}: {e}\")\n                continue\n        return races"
}