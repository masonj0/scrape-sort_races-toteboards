{
    "file_path": "python_service/adapters/the_racing_api_adapter.py",
    "content": "# python_service/adapters/theracingapi_adapter.py\n\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\n\nimport httpx\nimport structlog\n\nfrom ..models import OddsData\nfrom ..models import Race\nfrom ..models import Runner\nfrom .base import BaseAdapter\n\nlog = structlog.get_logger(__name__)\n\n\nclass TheRacingApiAdapter(BaseAdapter):\n    \"\"\"Adapter for the high-value JSON-based The Racing API.\"\"\"\n\n    def __init__(self, config):\n        super().__init__(source_name=\"TheRacingAPI\", base_url=\"https://api.theracingapi.com/v1/\", config=config)\n        self.api_key = config.THE_RACING_API_KEY\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        if not self.api_key:\n            return self._format_response(\n                [], start_time, is_success=False, error_message=\"ConfigurationError: THE_RACING_API_KEY not set\"\n            )\n\n        try:\n            endpoint = f\"racecards?date={date}&course=all&region=gb,ire\"\n            headers = {\"Authorization\": f\"Bearer {self.api_key}\"}\n            response = await self.make_request(http_client, \"GET\", endpoint, headers=headers)\n\n            if not response:\n                return self._format_response(\n                    [], start_time, is_success=True, error_message=\"No response from API.\"\n                )\n\n            response_json = response.json()\n            if not response_json or not response_json.get(\"racecards\"):\n                return self._format_response(\n                    [], start_time, is_success=True, error_message=\"No racecards found in API response.\"\n                )\n\n            all_races = self._parse_races(response_json[\"racecards\"])\n            return self._format_response(all_races, start_time, is_success=True)\n        except httpx.HTTPError as e:\n            log.error(f\"{self.source_name}: HTTP request failed after retries\", error=str(e), exc_info=True)\n            return self._format_response(\n                [], start_time, is_success=False, error_message=\"API request failed after multiple retries.\"\n            )\n        except Exception as e:\n            log.error(f\"{self.source_name}: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response(\n                [], start_time, is_success=False, error_message=f\"An unexpected error occurred: {e}\"\n            )\n\n    def _parse_races(self, racecards: List[Dict[str, Any]]) -> List[Race]:\n        races = []\n        for race_data in racecards:\n            try:\n                start_time = datetime.fromisoformat(race_data[\"off_time\"].replace(\"Z\", \"+00:00\"))\n\n                race = Race(\n                    id=f\"tra_{race_data['race_id']}\",\n                    venue=race_data[\"course\"],\n                    race_number=race_data[\"race_no\"],\n                    start_time=start_time,\n                    runners=self._parse_runners(race_data.get(\"runners\", [])),\n                    source=self.source_name,\n                    race_name=race_data.get(\"race_name\"),\n                    distance=race_data.get(\"distance_f\"),\n                )\n                races.append(race)\n            except Exception as e:\n                log.error(f\"{self.source_name}: Error parsing race\", race_id=race_data.get(\"race_id\"), error=str(e))\n        return races\n\n    def _parse_runners(self, runners_data: List[Dict[str, Any]]) -> List[Runner]:\n        runners = []\n        for i, runner_data in enumerate(runners_data):\n            try:\n                odds_data = {}\n                if runner_data.get(\"odds\"):\n                    win_odds = Decimal(str(runner_data[\"odds\"][0][\"odds_decimal\"]))\n                    odds_data[self.source_name] = OddsData(\n                        win=win_odds, source=self.source_name, last_updated=datetime.now()\n                    )\n\n                runners.append(\n                    Runner(\n                        number=runner_data.get(\"number\", i + 1),\n                        name=runner_data[\"horse\"],\n                        odds=odds_data,\n                        jockey=runner_data.get(\"jockey\"),\n                        trainer=runner_data.get(\"trainer\"),\n                    )\n                )\n            except Exception as e:\n                log.error(\n                    f\"{self.source_name}: Error parsing runner\", runner_name=runner_data.get(\"horse\"), error=str(e)\n                )\n        return runners\n\n    def _format_response(\n        self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None\n    ) -> Dict[str, Any]:\n        return {\n            \"races\": races,\n            \"source_info\": {\n                \"name\": self.source_name,\n                \"status\": \"SUCCESS\" if is_success else \"FAILED\",\n                \"races_fetched\": len(races),\n                \"error_message\": error_message,\n                \"fetch_duration\": (datetime.now() - start_time).total_seconds(),\n            },\n        }\n"
}