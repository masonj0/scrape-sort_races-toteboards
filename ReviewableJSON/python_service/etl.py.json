{
    "file_path": "python_service/etl.py",
    "content": "# python_service/etl.py\n# This module contains the ETL logic for the PostgreSQL data warehouse.\n# Restored based on the 'Code Archaeology Report'.\n\nimport os\nfrom typing import List\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\nfrom .models import Race\n\nclass PostgresETL:\n    \"\"\"Data Warehouse ETL\"\"\"\n    def __init__(self):\n        db_url = os.getenv(\"POSTGES_URL\", \"postgresql://user:password@localhost/fortuna_dw\")\n        self.engine = create_engine(db_url)\n\n    def process_and_load(self, analyzed_races: List[Race]):\n        valid_for_historical = []\n        quarantined = []\n        for race in analyzed_races:\n            errors = []\n            if not race.venue: errors.append(\"Missing venue\")\n            if race.race_number is None: errors.append(\"Missing race_number\")\n            if not errors:\n                valid_for_historical.append({\n                    \"race_id\": race.id,\n                    \"track_name\": race.venue,\n                    \"race_number\": race.race_number,\n                    \"post_time\": race.start_time,\n                    \"qualification_score\": race.qualification_score\n                })\n            else:\n                quarantined.append({\n                    \"race_id\": race.id,\n                    \"quarantine_reason\": \", \".join(errors),\n                    \"raw_data\": race.json()\n                })\n        if valid_for_historical:\n            pd.DataFrame(valid_for_historical).to_sql('historical_races', self.engine, if_exists='append', index=False)\n        if quarantined:\n            pd.DataFrame(quarantined).to_sql('quarantine_races', self.engine, if_exists='append', index=False)"
}