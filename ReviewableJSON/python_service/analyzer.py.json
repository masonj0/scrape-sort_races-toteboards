{
    "file_path": "python_service/analyzer.py",
    "content": "from typing import List\nimport structlog\nfrom decimal import Decimal\n\nfrom python_service.models import Race\n\nlog = structlog.get_logger(__name__)\n\nclass TrifectaAnalyzer:\n    \"\"\"Analyzes a list of races to find qualified betting opportunities.\"\"\"\n\n    def __init__(self, min_runners: int = 8, min_favorite_odds: float = 2.0):\n        self.min_runners = min_runners\n        self.min_favorite_odds = Decimal(str(min_favorite_odds))\n        log.info(\"TrifectaAnalyzer initialized\", min_runners=self.min_runners, min_favorite_odds=self.min_favorite_odds)\n\n    def qualify_races(self, races: List[Race]) -> List[Race]:\n        \"\"\"Filters a list of races based on qualification criteria.\"\"\"\n        qualified_races = []\n        if not races:\n            return []\n            \n        for race in races:\n            active_runners = [r for r in race.runners if not r.scratched]\n            \n            # Rule 1: Must have at least the minimum number of runners\n            if len(active_runners) < self.min_runners:\n                continue\n\n            # Rule 2: Favorite's odds must be above a certain threshold.\n            # This requires finding the lowest 'win' odds among all runners from any source.\n            all_win_odds = []\n            for runner in active_runners:\n                for odds_data in runner.odds.values():\n                    if odds_data and odds_data.win is not None:\n                        all_win_odds.append(odds_data.win)\n            \n            if not all_win_odds:\n                # Cannot qualify a race with no available odds.\n                continue\n\n            favorite_odds = min(all_win_odds)\n            if favorite_odds < self.min_favorite_odds:\n                continue\n\n            qualified_races.append(race)\n        \n        log.info(\"Race qualification complete\", total_races=len(races), qualified_races=len(qualified_races))\n        return qualified_races"
}