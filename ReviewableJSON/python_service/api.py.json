{
    "filepath": "python_service/api.py",
    "content": "# python_service/main.py\n# ==============================================================================\n# Checkmate Ultimate Solo - Fortified Python Backend\n# ==============================================================================\n\nfrom flask import Flask, jsonify\nfrom flask_cors import CORS\nfrom engine import DataSourceOrchestrator, TrifectaAnalyzer, Settings\nimport logging\n\n# --- Initialization ---\napp = Flask(__name__)\nCORS(app) # Enable CORS for the React frontend\n\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(name)s: %(message)s')\n\n# Initialize our battle-tested CORE components\norchestrator = DataSourceOrchestrator()\nanalyzer = TrifectaAnalyzer()\nsettings = Settings()\n\n# --- API Endpoints ---\n@app.route('/api/races/live', methods=['GET'])\ndef get_live_races():\n    \"\"\"Fetches, analyzes, and returns live race data in the format expected by the Ultimate frontend.\"\"\"\n    logging.info(\"Request received for /api/races/live\")\n    try:\n        all_races, _ = orchestrator.get_races()\n        analyzed_races = [analyzer.analyze_race(race, settings) for race in all_races]\n        races_dict = [race.model_dump() for race in analyzed_races]\n        logging.info(f\"Successfully processed and returning {len(races_dict)} races.\")\n        return jsonify(races_dict)\n    except Exception as e:\n        logging.critical(f\"FATAL error in get_live_races: {e}\", exc_info=True)\n        return jsonify({\"error\": \"An internal server error occurred.\"}), 500\n\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    \"\"\"Provides a basic health check.\"\"\"\n    return jsonify({'status': 'healthy'})\n\n# --- Main Execution ---\nif __name__ == '__main__':\n    print(\"Starting Checkmate Ultimate Solo Backend on http://localhost:8000\")\n    from waitress import serve\n    serve(app, host=\"0.0.0.0\", port=8000)"
}