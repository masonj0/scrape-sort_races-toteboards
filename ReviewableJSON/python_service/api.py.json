{
    "file_path": "python_service/api.py",
    "content": "# python_service/api.py\n\nimport logging\nfrom datetime import datetime, date\nfrom fastapi import FastAPI, HTTPException, Request\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom slowapi import Limiter, _rate_limit_exceeded_handler\nfrom slowapi.util import get_remote_address\nfrom slowapi.errors import RateLimitExceeded\n\nfrom .engine import OddsEngine\n\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Initialize Rate Limiter\nlimiter = Limiter(key_func=get_remote_address)\n\napp = FastAPI(title=\"Checkmate Ultimate Solo API\", version=\"2.0\")\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\", \"http://localhost:3001\"],\n    allow_credentials=True, allow_methods=[\"GET\"], allow_headers=[\"*\"]\n)\n\nengine: OddsEngine\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    global engine\n    engine = OddsEngine()\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    await engine.close()\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\"status\": \"ok\", \"timestamp\": datetime.now().isoformat()}\n\n@app.get(\"/api/races\")\n@limiter.limit(\"30/minute\") # Apply rate limit\nasync def get_races(request: Request, race_date: date = datetime.now().date(), source: str = None):\n    try:\n        date_str = race_date.strftime('%Y-%m-%d')\n        aggregated_data = await engine.fetch_all_odds(date_str, source)\n        return aggregated_data\n    except Exception as e:\n        logging.error(f\"Error in /api/races: {e}\", exc_info=True)\n        raise HTTPException(status_code=500, detail=\"Internal Server Error\")"
}