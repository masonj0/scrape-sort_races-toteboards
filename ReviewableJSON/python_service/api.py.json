{
    "filepath": "python_service/api.py",
    "content": "# python_service/api.py\n\nimport logging\nfrom flask import Flask, jsonify, request\nfrom flask_cors import CORS\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nfrom .engine import EngineManager\n\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\napp = Flask(__name__)\n\n# Whitelist origins for security\nCORS(app, origins=[\"http://localhost:3000\", \"http://localhost:8000\"])\n\n# Initialize rate limiter\nlimiter = Limiter(\n    app=app,\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"]\n)\n\nengine = EngineManager()\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    return jsonify({\"status\": \"healthy\"}), 200\n\n@app.route('/api/races', methods=['GET'])\n@limiter.limit(\"10 per minute\")\ndef get_races():\n    try:\n        races = engine.fetch_races()\n        return jsonify([r.dict() for r in races]), 200\n    except Exception as e:\n        logging.error(f\"Error in /api/races: {e}\", exc_info=True)\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\n\n@app.route('/api/adapters/<adapter_name>/status', methods=['GET'])\ndef get_adapter_status(adapter_name):\n    status = engine.get_adapter_status(adapter_name)\n    if status:\n        return jsonify(status), 200\n    return jsonify({\"error\": \"Adapter not found\"}), 404\n\n# Add other endpoints as needed, applying rate limits where appropriate\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
}