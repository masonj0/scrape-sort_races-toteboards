{
    "filepath": "./paddock-parser-ng/src/paddock_parser/adapters/equibase_adapter.py",
    "content": "from paddock_parser.adapters.base import BaseAdapterV3, NormalizedRace, NormalizedRunner\nfrom bs4 import BeautifulSoup\nimport re\nfrom typing import List\n\nclass EquibaseAdapter(BaseAdapterV3):\n    \"\"\"\n    Adapter for equibase.com, parsing data from offline HTML samples.\n    \"\"\"\n    SOURCE_ID = \"equibase\"\n\n    def __init__(self, config=None):\n        super().__init__(config)\n        # Offline adapter\n\n    async def fetch(self) -> List[NormalizedRace]:\n        \"\"\"This is an offline adapter and should not be fetched by the pipeline.\"\"\"\n        raise NotImplementedError(\"EquibaseAdapter is an offline adapter and does not support live fetching.\")\n\n    def parse_races(self, html_content: str) -> list[NormalizedRace]:\n        \"\"\"Public method to parse races, fulfilling the BaseAdapterV3 contract.\"\"\"\n        return self._parse_racecard(html_content)\n\n    def _parse_racecard(self, html_content: str) -> list[NormalizedRace]:\n        \"\"\"\n        Parses the HTML content of a Equibase race card page.\n        This implementation is specifically tailored to the structure of the\n        provided `equibase_sample.html` fixture.\n        \"\"\"\n        if not html_content:\n            return []\n\n        soup = BeautifulSoup(html_content, 'lxml')\n\n        # Extract track name from the h1 tag\n        track_name_tag = soup.select_one('h1#pageHeader')\n        if track_name_tag and 'Entries' in track_name_tag.text:\n            track_name_text = track_name_tag.text.replace('\\n', '').strip()\n            track_name = track_name_text.split(' Entries')[0]\n        else:\n            track_name = \"Unknown Track\"\n\n        races = []\n        race_table = soup.select_one('table#entryRaces tbody.results')\n        if not race_table:\n            return []\n\n        for row in race_table.select('tr'):\n            cells = row.select('td')\n            if len(cells) < 7:\n                continue\n\n            try:\n                race_number = int(cells[0].text.strip())\n                purse_text = cells[1].text.strip().replace('$', '').replace(',', '')\n                purse = int(purse_text) if purse_text.isdigit() else 0\n                race_type = cells[2].text.strip()\n                distance = cells[3].text.strip()\n                surface = cells[4].text.strip()\n                starters = int(cells[5].text.strip())\n\n                race = NormalizedRace(\n                    race_id=f\"{track_name.replace(' ', '')}-{race_number}\",\n                    track_name=track_name,\n                    race_number=race_number,\n                    race_type=race_type,\n                    number_of_runners=starters,\n                    runners=[] # Runner details are not on this page\n                )\n                races.append(race)\n            except (ValueError, IndexError):\n                continue # Skip rows that don't have the expected data\n\n        return races\n"
}