{"content": "import unittest\nfrom pathlib import Path\nfrom paddock_parser.adapters.equibase_adapter import EquibaseAdapter\nfrom paddock_parser.base import NormalizedRace, NormalizedRunner\n\nclass TestEquibaseAdapter(unittest.TestCase):\n    def setUp(self):\n        self.adapter = EquibaseAdapter()\n        fixture_path = Path(__file__).parent / \"equibase_sample.html\"\n        self.sample_html = fixture_path.read_text(encoding=\"utf-8\")\n\n    def test_parse_racecard(self):\n        \"\"\"\n        Tests the offline parsing of the Equibase racecard.\n        \"\"\"\n        races = self.adapter.parse_races(self.sample_html)\n\n        self.assertIsNotNone(races)\n        self.assertEqual(len(races), 10)\n\n        # Test the first race\n        first_race = races[0]\n        self.assertEqual(first_race.track_name, \"Saratoga\")\n        self.assertEqual(first_race.race_number, 1)\n        self.assertEqual(first_race.race_type, \"Maiden Special Weight\")\n        self.assertEqual(first_race.number_of_runners, 9)\n        self.assertEqual(len(first_race.runners), 0)\n\n        # Test the last race\n        last_race = races[9]\n        self.assertEqual(last_race.track_name, \"Saratoga\")\n        self.assertEqual(last_race.race_number, 10)\n        self.assertEqual(last_race.race_type, \"Claiming\")\n        self.assertEqual(last_race.number_of_runners, 14)\n        self.assertEqual(len(last_race.runners), 0)\n"}
