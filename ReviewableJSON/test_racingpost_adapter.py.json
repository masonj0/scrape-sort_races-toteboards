{
    "filepath": "tests/adapters/test_racingpost_adapter.py",
    "content": "import unittest\nfrom pathlib import Path\nfrom datetime import datetime, timezone, timedelta\nfrom paddock_parser.adapters.racingpost_adapter import RacingPostAdapter\n\nclass TestRacingPostAdapter(unittest.TestCase):\n    def setUp(self):\n        \"\"\"\n        Load the sample HTML data from the fixture file.\n        \"\"\"\n        self.adapter = RacingPostAdapter()\n        fixture_path = Path(__file__).parent / \"racingpost_sample.html\"\n        self.sample_html = fixture_path.read_text(encoding=\"utf-8\")\n\n    def test_parse_racecard_specification(self):\n        \"\"\"\n        This test serves as the specification for the RacingPostAdapter based on\n        the provided racingpost_sample.html.\n        \"\"\"\n        races = self.adapter.parse_races(self.sample_html)\n\n        # There are multiple races on the page, but the sample HTML only contains details for the first one.\n        self.assertIsNotNone(races)\n        self.assertEqual(len(races), 1)\n\n        first_race = races[0]\n        self.assertEqual(first_race.track_name, \"Bellewstown\")\n\n        # The post time in the JSON is \"2025-08-26T16:25:00+01:00\"\n        expected_post_time = datetime(2025, 8, 26, 16, 25, tzinfo=timezone(timedelta(hours=1)))\n        self.assertEqual(first_race.post_time, expected_post_time)\n\n        self.assertEqual(first_race.race_type, \"Irish Stallion Farms EBF Median Auction Maiden\")\n\n        # The sample HTML file seems to only contain the data for the first race's runners,\n        # even though the JSON lists competitors for the whole day.\n        # There are 15 runners listed for the first race, and 2 non-runners.\n        self.assertEqual(first_race.number_of_runners, 15)\n        self.assertEqual(len(first_race.runners), 15)\n\n        self.assertEqual(first_race.race_id, \"902106\")\n\n        # Test a specific runner (Pete's Dream, runner #5)\n        petes_dream = next((r for r in first_race.runners if r.program_number == 5), None)\n        self.assertIsNotNone(petes_dream)\n        self.assertEqual(petes_dream.name, \"Pete's Dream\")\n        self.assertEqual(petes_dream.jockey, \"Andrew Slattery\")\n        self.assertEqual(petes_dream.trainer, \"Andrew Slattery\")\n        self.assertEqual(petes_dream.odds, 10.0)\n\n        # Test another runner to be sure (Arrumba, runner #1)\n        arrumba = next((r for r in first_race.runners if r.program_number == 1), None)\n        self.assertIsNotNone(arrumba)\n        self.assertEqual(arrumba.name, \"Arrumba\")\n        self.assertEqual(arrumba.jockey, \"Sam Coen\")\n        self.assertEqual(arrumba.trainer, \"Mrs Denise Foster\")\n        self.assertEqual(arrumba.odds, 22.0)\n"
}