{
    "filepath": "./paddock-parser-ng/src/paddock_parser/tests/test_pipeline.py",
    "content": "import pytest\nimport argparse\nfrom unittest.mock import patch, MagicMock, AsyncMock\nfrom paddock_parser.pipeline import run_analysis_pipeline\nfrom paddock_parser.adapters.base import NormalizedRace, BaseAdapter, BaseAdapterV3\n\n@pytest.mark.anyio\nclass TestPipeline:\n\n    @patch('paddock_parser.pipeline.load_adapters')\n    async def test_pipeline_resilience(self, mock_load_adapters):\n        \"\"\"\n        Tests that the pipeline can gracefully handle an adapter that fails.\n        \"\"\"\n        # --- Mocks ---\n        mock_sky_instance = AsyncMock(spec=BaseAdapterV3)\n        mock_sky_instance.SOURCE_ID = \"skysports\"\n        mock_sky_instance.fetch.side_effect = Exception(\"API request failed\")\n\n        mock_fanduel_instance = MagicMock(spec=BaseAdapter)\n        mock_fanduel_instance.SOURCE_ID = \"fanduel\"\n        mock_fanduel_instance.fetch_data.return_value = {\"schedule\": \"{}\", \"detail\": \"{}\"}\n        mock_fanduel_instance.parse_data.return_value = [\n            NormalizedRace(race_id=\"fd-1\", track_name=\"FanDuel Track\", race_number=1, number_of_runners=5, post_time=None)\n        ]\n\n        MockSkyClass = MagicMock(return_value=mock_sky_instance)\n        MockFanDuelClass = MagicMock(return_value=mock_fanduel_instance)\n        mock_load_adapters.return_value = [MockSkyClass, MockFanDuelClass]\n\n        mock_args = argparse.Namespace(\n            config=None, output=None, min_score=0.0, no_odds_mode=False,\n            min_field_size=1, max_field_size=None, sort_by='score', limit=10\n        )\n\n        # --- Run ---\n        await run_analysis_pipeline(mock_args)\n\n        # --- Assertions ---\n        mock_sky_instance.fetch.assert_awaited_once()\n        mock_fanduel_instance.fetch_data.assert_called_once()\n\n    @patch('paddock_parser.pipeline.load_adapters')\n    async def test_pipeline_end_to_end(self, mock_load_adapters):\n        \"\"\"\n        Tests the full end-to-end flow of the pipeline with successful adapters.\n        \"\"\"\n        # --- Mocks ---\n        mock_sky_instance = AsyncMock(spec=BaseAdapterV3)\n        mock_sky_instance.SOURCE_ID = \"skysports\"\n        mock_sky_instance.fetch.return_value = [\n            NormalizedRace(race_id=\"sky-1\", track_name=\"Sky Track\", race_number=1, number_of_runners=8, post_time=None)\n        ]\n\n        mock_fanduel_instance = MagicMock(spec=BaseAdapter)\n        mock_fanduel_instance.SOURCE_ID = \"fanduel\"\n        mock_fanduel_instance.fetch_data.return_value = {\"schedule\": \"{}\", \"detail\": \"{}\"}\n        mock_fanduel_instance.parse_data.return_value = [\n            NormalizedRace(race_id=\"fd-1\", track_name=\"FanDuel Track\", race_number=1, number_of_runners=5, post_time=None)\n        ]\n\n        MockSkyClass = MagicMock(return_value=mock_sky_instance)\n        MockFanDuelClass = MagicMock(return_value=mock_fanduel_instance)\n        mock_load_adapters.return_value = [MockSkyClass, MockFanDuelClass]\n\n        mock_args = argparse.Namespace(\n            config=None, output=None, min_score=0.0, no_odds_mode=False,\n            min_field_size=1, max_field_size=None, sort_by='score', limit=10\n        )\n\n        # --- Run ---\n        await run_analysis_pipeline(mock_args)\n\n        # --- Assertions ---\n        mock_sky_instance.fetch.assert_awaited_once()\n        mock_fanduel_instance.fetch_data.assert_called_once()\n        mock_fanduel_instance.parse_data.assert_called_once()\n"
}