{
    "filepath": "tests/ui/test_terminal_ui_rich.py",
    "content": "import pytest\nfrom unittest.mock import MagicMock, patch, call\nimport asyncio\nfrom datetime import datetime\nfrom paddock_parser.models import Race, Runner\nfrom paddock_parser.base import NormalizedRace, NormalizedRunner\nfrom paddock_parser.ui.terminal_ui import TerminalUI\n\n@pytest.fixture\ndef sample_high_roller_races():\n    race1 = Race(race_id=\"R1\", venue=\"Newmarket\", race_time=\"14:30\", is_handicap=False, runners=[Runner(name=\"Horse A\", odds=\"5/1\")])\n    setattr(race1, 'high_roller_score', 5.0)\n    race2 = Race(race_id=\"R2\", venue=\"Goodwood\", race_time=\"14:45\", is_handicap=False, runners=[Runner(name=\"Horse C\", odds=\"4/1\")])\n    setattr(race2, 'high_roller_score', 4.0)\n    return [race1, race2]\n\n@patch('paddock_parser.ui.terminal_ui.Table')\n@patch('paddock_parser.ui.terminal_ui.Console')\ndef test_display_high_roller_report_uses_rich_table(MockConsole, MockTable, sample_high_roller_races):\n    mock_console_instance = MockConsole()\n    mock_table_instance = MockTable.return_value\n    \n    ui = TerminalUI(console=mock_console_instance)\n    ui.display_high_roller_report(sample_high_roller_races)\n\n    MockTable.assert_called_once_with(title=\"High Roller Report\")\n    \n    expected_calls = [\n        call(\"Time\", style=\"cyan\"),\n        call(\"Venue\", style=\"magenta\"),\n        call(\"Favorite\", style=\"green\"),\n        call(\"Odds\", style=\"yellow\")\n    ]\n    mock_table_instance.add_column.assert_has_calls(expected_calls, any_order=True)\n    assert mock_table_instance.add_column.call_count == len(expected_calls)\n\n    assert mock_table_instance.add_row.call_count == len(sample_high_roller_races)\n    mock_table_instance.add_row.assert_any_call(\"14:30\", \"Newmarket\", \"Horse A\", \"5/1\")\n    mock_table_instance.add_row.assert_any_call(\"14:45\", \"Goodwood\", \"Horse C\", \"4/1\")\n\n    mock_console_instance.print.assert_called_once_with(mock_table_instance)\n\n@pytest.mark.asyncio\n@patch('paddock_parser.ui.terminal_ui.get_high_roller_races')\n@patch('paddock_parser.ui.terminal_ui.run_pipeline')\n@patch('paddock_parser.ui.terminal_ui.TerminalUI.display_high_roller_report')\n@patch('paddock_parser.ui.terminal_ui.Console')\nasync def test_run_high_roller_report_uses_rich_status(\n    MockConsole, MockDisplay, MockRunPipeline, MockGetHighRoller, sample_high_roller_races\n):\n    # Setup mocks\n    mock_console_instance = MockConsole()\n    \n    # Configure run_pipeline mock to return a value to prevent early exit\n    async def mock_pipeline(*args, **kwargs):\n        return [NormalizedRace(race_id=\"D1\", track_name=\"Dummy\", race_number=1, post_time=datetime.now(), runners=[NormalizedRunner(name=\"DummyHorse\", program_number=1, odds=10.0)])]\n    MockRunPipeline.side_effect = mock_pipeline\n    \n    MockGetHighRoller.return_value = sample_high_roller_races\n    \n    ui = TerminalUI(console=mock_console_instance)\n\n    # Run the async method\n    await ui._run_high_roller_report()\n\n    # Assertions\n    mock_console_instance.status.assert_called_once_with(\"Fetching data from providers...\", spinner=\"dots\")\n    MockRunPipeline.assert_called_once()\n    MockGetHighRoller.assert_called_once()\n    MockDisplay.assert_called_once_with(sample_high_roller_races)\n"
}