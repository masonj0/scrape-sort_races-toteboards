{
    "filepath": "./paddock-parser-ng/src/paddock_parser/tests/test_run.py",
    "content": "import sys\nimport os\nimport unittest\nfrom unittest.mock import patch\n\n# Add the project root to the path to allow importing 'run'\nproject_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..'))\nsys.path.insert(0, project_root)\n\nfrom run import parse_arguments\n\nclass TestParseArguments(unittest.TestCase):\n\n    def test_default_arguments(self):\n        \"\"\"\n        Tests that the parser returns the correct default values\n        when no arguments are given.\n        \"\"\"\n        with patch('sys.argv', ['run.py']):\n            args = parse_arguments()\n            self.assertEqual(args.config, None)\n            self.assertEqual(args.output, None)\n            self.assertEqual(args.min_score, 0.0)\n            self.assertFalse(args.no_odds_mode)\n            self.assertEqual(args.min_field_size, 1)\n            self.assertEqual(args.max_field_size, None)\n            self.assertEqual(args.sort_by, 'score')\n            self.assertEqual(args.limit, 10)\n\n    def test_custom_arguments(self):\n        \"\"\"\n        Tests that the parser correctly handles custom command-line arguments.\n        \"\"\"\n        test_args = [\n            'run.py',\n            '--config', 'my_config.yaml',\n            '--output', 'results.json',\n            '--min-score', '5.0',\n            '--no-odds-mode',\n            '--min-field-size', '5',\n            '--max-field-size', '12',\n            '--sort-by', 'field_size',\n            '--limit', '20'\n        ]\n        with patch('sys.argv', test_args):\n            args = parse_arguments()\n            self.assertEqual(args.config, 'my_config.yaml')\n            self.assertEqual(args.output, 'results.json')\n            self.assertEqual(args.min_score, 5.0)\n            self.assertTrue(args.no_odds_mode)\n            self.assertEqual(args.min_field_size, 5)\n            self.assertEqual(args.max_field_size, 12)\n            self.assertEqual(args.sort_by, 'field_size')\n            self.assertEqual(args.limit, 20)\n\nif __name__ == '__main__':\n    unittest.main()\n"
}