{
    "filepath": "./paddock-parser-ng/src/paddock_parser/tests/test_honeypot.py",
    "content": "import pathlib\nfrom bs4 import BeautifulSoup\nfrom paddock_parser.utils.honeypot import remove_honeypots\n\ndef test_remove_honeypots():\n    \"\"\"\n    Tests that the honeypot removal utility correctly identifies and removes\n    links that are hidden via inline styles, including those in parent containers.\n    \"\"\"\n    # Path to the HTML fixture\n    fixture_path = pathlib.Path(__file__).parent / \"fixtures\" / \"honeypot_sample.html\"\n\n    # Read the HTML content\n    with open(fixture_path, \"r\") as f:\n        html_content = f.read()\n\n    # Create a soup object\n    soup = BeautifulSoup(html_content, \"lxml\")\n\n    # --- Assert initial state ---\n    initial_links = soup.find_all('a')\n    assert len(initial_links) == 5\n    assert initial_links[0].get('href') == '/visible-link-1'\n    assert initial_links[1].get('href') == '/honeypot-1'\n    assert initial_links[2].get('href') == '/visible-link-2'\n    assert initial_links[3].get('href') == '/honeypot-2'\n    assert initial_links[4].get('href') == '/honeypot-3'\n\n    # --- Run the function ---\n    cleaned_soup = remove_honeypots(soup)\n\n    # --- Assert final state ---\n    final_links = cleaned_soup.find_all('a')\n    assert len(final_links) == 2\n\n    final_hrefs = [link.get('href') for link in final_links]\n    assert '/visible-link-1' in final_hrefs\n    assert '/visible-link-2' in final_hrefs\n    assert '/honeypot-1' not in final_hrefs\n    assert '/honeypot-2' not in final_hrefs\n    assert '/honeypot-3' not in final_hrefs\n"
}