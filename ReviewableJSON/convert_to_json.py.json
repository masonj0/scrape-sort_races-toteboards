{
    "filepath": "./convert_to_json.py",
    "content": "import json\nimport os\nimport sys\n\ndef convert_file_to_json(filepath):\n    \"\"\"Reads a file and converts its content to a JSON structure, preserving directory structure.\"\"\"\n    try:\n        # Normalize path to use forward slashes for consistency\n        normalized_filepath = filepath.replace(\"\\\\\", \"/\")\n\n        with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:\n            content = f.read()\n\n        json_data = {\n            \"filepath\": normalized_filepath,\n            \"content\": content\n        }\n\n        # Create the output path in the ReviewableJSON directory, preserving the original path\n        # Remove './' prefix if it exists\n        if normalized_filepath.startswith('./'):\n            normalized_filepath = normalized_filepath[2:]\n            \n        output_dir = os.path.join(\"ReviewableJSON\", os.path.dirname(normalized_filepath))\n        if output_dir: # Only create directory if it's not the root\n            os.makedirs(output_dir, exist_ok=True)\n            \n        output_filename = os.path.basename(normalized_filepath) + \".json\"\n        output_path = os.path.join(output_dir, output_filename)\n\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(json_data, f, indent=4)\n\n        print(f\"Successfully converted {filepath} to {output_path}\")\n\n    except Exception as e:\n        print(f\"Error converting {filepath}: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    # Walk through the directory tree and convert all .py files\n    for root, dirs, files in os.walk(\".\"):\n        # Exclude specified directories from the walk\n        dirs[:] = [d for d in dirs if d not in ['venv', '.venv', 'ReviewableJSON', '.git', '__pycache__']]\n        \n        for file in files:\n            if file.endswith(\".py\"):\n                filepath = os.path.join(root, file)\n                convert_file_to_json(filepath)\n"
}