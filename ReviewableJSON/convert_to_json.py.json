{
    "filepath": "convert_to_json.py",
    "content": "import json\nimport os\nimport sys\n\ndef convert_file_to_json(filepath):\n    \"\"\"Reads a file and converts its content to a JSON structure, preserving directory structure.\"\"\"\n    try:\n        if not os.path.exists(filepath):\n            print(f\"Warning: File not found, skipping: {filepath}\", file=sys.stderr)\n            return\n\n        # Normalize path to use forward slashes for consistency\n        normalized_filepath = filepath.replace(\"\\\\\", \"/\")\n\n        with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:\n            content = f.read()\n\n        json_data = {\n            \"filepath\": normalized_filepath,\n            \"content\": content\n        }\n\n        # Create the output path in the ReviewableJSON directory, preserving the original path\n        if normalized_filepath.startswith('./'):\n            normalized_filepath = normalized_filepath[2:]\n\n        output_dir = os.path.join(\"ReviewableJSON\", os.path.dirname(normalized_filepath))\n        if output_dir:\n            os.makedirs(output_dir, exist_ok=True)\n\n        output_filename = os.path.basename(normalized_filepath) + \".json\"\n        output_path = os.path.join(output_dir, output_filename)\n\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(json_data, f, indent=4)\n\n        print(f\"Successfully converted {filepath} to {output_path}\")\n\n    except Exception as e:\n        print(f\"Error converting {filepath}: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    # This list is generated from the \"Total Recall Edition\" of MANIFEST2.md and MANIFEST3.md.\n    files_to_convert = [\n        # CORE Files from MANIFEST2.md\n        # Python Backend\n        \"python_service/api.py\",\n        \"python_service/engine.py\",\n        \"python_service/models.py\",\n        \"python_service/adapters/__init__.py\",\n        \"python_service/adapters/base.py\",\n        \"python_service/adapters/utils.py\",\n        \"python_service/adapters/betfair_adapter.py\",\n        \"python_service/adapters/pointsbet_adapter.py\",\n        \"python_service/adapters/racing_and_sports_adapter.py\",\n        \"python_service/adapters/tvg_adapter.py\",\n        # TypeScript Frontend\n        \"web_platform/frontend/package.json\",\n        \"web_platform/frontend/package-lock.json\",\n        \"web_platform/frontend/tailwind.config.ts\",\n        \"web_platform/frontend/tsconfig.json\",\n        \"web_platform/frontend/src/app/page.tsx\",\n\n        # Operational Files from MANIFEST3.md\n        # Project Tooling\n        \".gitignore\",\n        \"convert_to_json.py\",\n        # Environment & Setup\n        \"setup_windows.bat\",\n        \".env\",\n        \"python_service/requirements.txt\",\n        # Strategic Blueprints\n        \"README.md\",\n        \"ARCHITECTURAL_MANDATE.md\",\n        \"HISTORY.md\",\n        \"STATUS.md\",\n        \"WISDOM.md\",\n        \"PROJECT_MANIFEST.md\",\n    ]\n\n    print(\"Starting conversion based on the final manifest...\")\n    for filepath in files_to_convert:\n        convert_file_to_json(filepath)\n    print(\"Conversion process complete.\")"
}