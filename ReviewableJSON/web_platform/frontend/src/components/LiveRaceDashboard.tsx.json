{
    "file_path": "web_platform/frontend/src/components/LiveRaceDashboard.tsx",
    "content": "// web_platform/frontend/src/components/LiveRaceDashboard.tsx\n'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { RaceCard } from './RaceCard';\nimport { ExportManager } from '@/utils/exportManager';\n\n// --- Type Definitions ---\nimport type { Race } from '@/types/racing'; // Correct type import\n\ninterface QualifiedRacesResponse {\n  races: Race[];\n}\n\n// --- Helper Functions from UI Bible ---\nconst getNextRaceCountdown = (races: Race[]): string => {\n  const now = new Date().getTime();\n  const upcomingRaces = races\n    .map(race => new Date(race.start_time).getTime())\n    .filter(time => time > now);\n\n  if (upcomingRaces.length === 0) return '--:--';\n\n  const nextRaceTime = Math.min(...upcomingRaces);\n  const diff = nextRaceTime - now;\n  const minutes = Math.floor((diff / 1000) / 60);\n  const seconds = Math.floor((diff / 1000) % 60);\n\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\nconst fetchAdapterStatuses = async (): Promise<AdapterStatus[]> => {\n  const apiKey = process.env.NEXT_PUBLIC_API_KEY;\n  if (!apiKey) throw new Error('API key not configured.');\n  const response = await fetch(`/api/adapters/status`, { headers: { 'X-API-Key': apiKey } });\n  if (!response.ok) throw new Error(`Adapter status API request failed: ${response.statusText}`);\n  return response.json();\n};\n\n// --- Main Component ---\nexport const LiveRaceDashboard: React.FC = () => {\n  const [filterConfig, setFilterConfig] = useState({ minScore: 0, maxFieldSize: 999, sortBy: 'score' });\n\n  // --- TanStack Query Hooks ---\n  const { data: qualifiedData, error: racesError, isLoading: racesLoading } = useQuery<QualifiedRacesResponse>({\n    queryKey: ['qualifiedRaces'],\n    queryFn: fetchQualifiedRaces,\n    refetchInterval: 30000 // The Heartbeat\n  });\n\n  const { data: statuses, error: statusError } = useQuery<AdapterStatus[]>({\n    queryKey: ['adapterStatuses'],\n    queryFn: fetchAdapterStatuses,\n    refetchInterval: 60000\n  });\n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFilterConfig(prev => ({ ...prev, [name]: name === 'sortBy' ? value : Number(value) }));\n  };\n\n  const filteredAndSortedRaces = useMemo(() => {\n    let processedRaces = [...(qualifiedData?.races || [])];\n    processedRaces = processedRaces.filter(race => (race.qualification_score || 0) >= filterConfig.minScore && race.runners.filter(r => !r.scratched).length <= filterConfig.maxFieldSize);\n    processedRaces.sort((a, b) => {\n      switch (filterConfig.sortBy) {\n        case 'time': return new Date(a.start_time).getTime() - new Date(b.start_time).getTime();\n        case 'venue': return a.venue.localeCompare(b.venue);\n        default: return (b.qualification_score || 0) - (a.qualification_score || 0);\n      }\n    });\n    return processedRaces;\n  }, [qualifiedData, filterConfig]);\n\n  const error = racesError || statusError;\n\n  return (\n    <main className=\"min-h-screen bg-gray-900 text-white p-8\">\n      <h1 className=\"text-4xl font-bold text-center mb-8\">Fortuna Faucet Command Deck</h1>\n\n      {/* --- Visual Health Panel --- */}\n      <div className='mb-8 p-4 bg-gray-800/50 border border-gray-700 rounded-lg'>\n        <h2 className='text-lg font-semibold text-gray-300 mb-3'>Adapter Status</h2>\n        <div className='flex flex-wrap gap-2'>\n          {statuses?.map(s => (\n            <span key={s.adapter_name} className={`px-2 py-1 text-xs font-bold rounded-full ${s.status === 'SUCCESS' || s.status === 'OK' ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}`}>\\n              {s.adapter_name}\\n            </span>\n          )) ?? <span className='text-gray-500 text-sm'>Loading statuses...</span>}\n        </div>\n      </div>\n\n      {/* --- Smart Filtering & Sorting System --- */}\n      <div className=\"filter-panel bg-gray-800/90 backdrop-blur-sm p-4 rounded-xl border border-gray-700 mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\"><span className=\"font-semibold\">Smart Filters</span>\n            <button \n              onClick={() => ExportManager.exportToExcel(filteredAndSortedRaces)}\n              className='px-3 py-1 bg-green-500/20 text-green-300 text-sm font-semibold rounded-md hover:bg-green-500/40 transition-colors'>\n              Export to Excel\n            </button>\n          </div>\n          <div className=\"flex gap-6\">\n            <div className=\"flex items-center gap-3\"><label className=\"text-sm text-gray-400\">Min Score:</label><input type=\"range\" name=\"minScore\" min=\"0\" max=\"100\" value={filterConfig.minScore} onChange={handleFilterChange} className=\"w-32\" /><span className=\"text-sm font-semibold w-12\">{filterConfig.minScore}%</span></div>\n            <div className=\"flex items-center gap-3\"><label className=\"text-sm text-gray-400\">Max Field:</label><select name=\"maxFieldSize\" value={filterConfig.maxFieldSize} onChange={handleFilterChange} className=\"bg-gray-700 border border-gray-600 rounded px-3 py-1 text-white\"><option value=\"8\">8 runners</option><option value=\"10\">10 runners</option><option value=\"12\">12 runners</option><option value=\"999\">Any size</option></select></div>\n            <div className=\"flex items-center gap-3\"><label className=\"text-sm text-gray-400\">Sort by:</label><select name=\"sortBy\" value={filterConfig.sortBy} onChange={handleFilterChange} className=\"bg-gray-700 border border-gray-600 rounded px-3 py-1 text-white\"><option value=\"score\">Qualification Score</option><option value=\"time\">Post Time</option><option value=\"venue\">Track Name</option></select></div>\n          </div>\n        </div>\n      </div>\n\n      {racesLoading && <p className=\"text-center text-xl\">Searching for qualified races...</p>}\n      {error && <p className=\"text-center text-xl text-red-500\">Error: {error.message}</p>}\n\n      {!racesLoading && !error && (\n        <>\n          <div className='text-center mb-4 text-gray-400'>Displaying <span className='font-bold text-white'>{filteredAndSortedRaces.length}</span> of <span className='font-bold text-white'>{qualifiedData?.races.length || 0}</span> total qualified races.</div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredAndSortedRaces.map(race => <RaceCard key={race.id} race={race} />)}\n          </div>\n        </>\n      )}\n    </main>\n  );\n};"
}