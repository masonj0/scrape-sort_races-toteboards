{
    "electron/main.js": "// electron/main.js\nconst { app, BrowserWindow, Tray, Menu, nativeImage } = require('electron');\nconst { spawn } = require('child_process');\nconst path = require('path');\n\nclass FortunaDesktopApp {\n  constructor() {\n    this.backendProcess = null;\n    this.frontendProcess = null;\n    this.mainWindow = null;\n    this.tray = null;\n  }\n\n  async startBackend() {\n    return new Promise((resolve, reject) => {\n      // Corrected pathing for a packaged app\n      const isDev = process.env.NODE_ENV !== 'production';\n      const rootPath = isDev ? path.join(__dirname, '..') : process.resourcesPath;\n      const pythonPath = path.join(rootPath, '.venv', 'Scripts', 'python.exe');\n      const apiPath = path.join(rootPath, 'python_service', 'api.py');\n\n      this.backendProcess = spawn(pythonPath, ['-m', 'uvicorn', 'api:app', '--host', '127.0.0.1', '--port', '8000'], {\n        cwd: path.join(rootPath, 'python_service')\n      });\n\n      this.backendProcess.stdout.on('data', (data) => {\n        console.log(`Backend STDOUT: ${data}`);\n        if (data.toString().includes('Uvicorn running')) {\n          console.log('Backend started successfully.');\n          resolve();\n        }\n      });\n\n      this.backendProcess.stderr.on('data', (data) => {\n        console.error(`Backend STDERR: ${data}`);\n      });\n\n      this.backendProcess.on('error', reject);\n    });\n  }\n\n  async startFrontend() {\n    const isDev = process.env.NODE_ENV !== 'production';\n    if (isDev) {\n        // In development, we assume the Next.js dev server is already running.\n        return Promise.resolve();\n    } else {\n        // In production, we would serve the built Next.js app.\n        // This part needs a production-ready server like Express or Next.js's standalone output.\n        // For now, we will assume the build is served and we just load the URL.\n        return Promise.resolve();\n    }\n  }\n\n  createMainWindow() {\n    this.mainWindow = new BrowserWindow({\n      width: 1600,\n      height: 1000,\n      title: 'Fortuna Faucet - Racing Analysis',\n      icon: path.join(__dirname, 'assets', 'icon.ico'),\n      webPreferences: {\n        nodeIntegration: false,\n        contextIsolation: true,\n        preload: path.join(__dirname, 'preload.js')\n      },\n      autoHideMenuBar: true,\n      backgroundColor: '#1a1a2e'\n    });\n\n    // In development, load from the Next.js dev server.\n    this.mainWindow.loadURL('http://localhost:3000');\n  }\n\n  createSystemTray() {\n    const iconPath = path.join(__dirname, 'assets', 'tray-icon.png');\n    const icon = nativeImage.createFromPath(iconPath);\n    this.tray = new Tray(icon.resize({ width: 16, height: 16 }));\n\n    const contextMenu = Menu.buildFromTemplate([\n      { label: 'Open Dashboard', click: () => this.mainWindow.show() },\n      { type: 'separator' },\n      { label: 'Exit', click: () => app.quit() }\n    ]);\n\n    this.tray.setToolTip('Fortuna Faucet - Monitoring Races');\n    this.tray.setContextMenu(contextMenu);\n  }\n\n  async initialize() {\n    console.log('Starting Fortuna Faucet backend...');\n    await this.startBackend();\n\n    console.log('Frontend server is assumed to be running in dev mode...');\n    await this.startFrontend();\n\n    // Wait for frontend to be ready\n    await new Promise(resolve => setTimeout(resolve, 5000));\n\n    this.createMainWindow();\n    this.createSystemTray();\n  }\n\n  cleanup() {\n    console.log('Cleaning up processes...');\n    if (this.backendProcess) this.backendProcess.kill();\n    if (this.frontendProcess) this.frontendProcess.kill();\n  }\n}\n\nlet fortunaApp;\n\napp.whenReady().then(() => {\n  fortunaApp = new FortunaDesktopApp();\n  fortunaApp.initialize();\n});\n\napp.on('window-all-closed', () => {\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (process.platform !== 'darwin') {\n    // Do not quit here, let it run in the tray\n  }\n});\n\napp.on('before-quit', () => {\n  if(fortunaApp) {\n    fortunaApp.cleanup();\n  }\n});\n",
    "electron/package.json": "{\n  \"name\": \"fortuna-faucet-desktop\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The desktop shell for the Fortuna Faucet application.\",\n  \"main\": \"main.js\",\n  \"build\": {\n    \"appId\": \"com.fortuna.ascended\",\n    \"productName\": \"Fortuna Faucet\",\n    \"files\": [\n      \"main.js\",\n      \"preload.js\",\n      \"assets/**/*\"\n    ],\n    \"win\": {\n      \"target\": \"msi\",\n      \"icon\": \"assets/icon.ico\"\n    },\n    \"msi\": {\n      \"oneClick\": false,\n      \"allowToChangeInstallationDirectory\": true\n    }\n  },\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"dist\": \"electron-builder\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"^28.0.0\",\n    \"electron-builder\": \"^24.9.1\"\n  }\n}\n",
    "electron/preload.js": "// electron/preload.js\n// This script runs in a privileged environment with access to Node.js APIs.\n// It's used to securely expose specific functionality to the renderer process (the web UI).\n\nconst { contextBridge, ipcRenderer } = require('electron');\n\n// Expose a safe, limited API to the frontend.\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // Example: expose a function to send a message to the main process\n  // send: (channel, data) => ipcRenderer.send(channel, data),\n\n  // Example: expose a function to receive a message from the main process\n  // on: (channel, func) => {\n  //   ipcRenderer.on(channel, (event, ...args) => func(...args));\n  // }\n});\n\nconsole.log('Preload script loaded.');\n",
    "web_platform/api_gateway/src/server.ts": "// server.ts - Complete API Gateway with Database Integration and WebSocket\n\nimport express from 'express';\nimport { createServer } from 'http';\nimport { Server as SocketServer } from 'socket.io';\nimport cors from 'cors';\nimport sqlite3 from 'sqlite3';\nimport { open, Database } from 'sqlite';\nimport path from 'path';\n\n// Types\ninterface Race {\n  race_id: string;\n  track_name: string;\n  race_number: number | null;\n  post_time: string | null;\n  checkmate_score: number;\n  qualified: boolean;\n  trifecta_factors_json: string | null;\n  raw_data_json: string | null;\n  updated_at: string;\n}\n\ninterface AdapterStatus {\n  adapter_name: string;\n  status: string;\n  last_run: string;\n  races_found: number;\n  execution_time_ms: number;\n  error_message: string | null;\n}\n\n// Database Service\nclass DatabaseService {\n  private db: Database | null = null;\n  private dbPath: string;\n\n  constructor() {\n    this.dbPath = process.env.CHECKMATE_DB_PATH || path.join(__dirname, '..', '..', '..', 'shared_database', 'races.db');\n  }\n\n  async connect(): Promise<void> {\n    try {\n      this.db = await open({\n        filename: this.dbPath,\n        driver: sqlite3.Database\n      });\n      console.log(`[INFO] Connected to database: ${this.dbPath}`);\n    } catch (error) {\n      console.error('[ERROR] Failed to connect to database:', error);\n      throw error;\n    }\n  }\n\n  async getQualifiedRaces(): Promise<Race[]> {\n    if (!this.db) throw new Error('Database not connected');\n    try {\n      const races = await this.db.all<Race[]>(`\n        SELECT race_id, track_name, race_number, post_time,\n               checkmate_score, qualified, trifecta_factors_json,\n               raw_data_json, updated_at\n        FROM live_races\n        WHERE qualified = 1\n        ORDER BY checkmate_score DESC, post_time ASC\n      `);\n      return races;\n    } catch (error) {\n      console.error('[ERROR] Failed to fetch qualified races:', error);\n      return [];\n    }\n  }\n\n  async getAllRaces(): Promise<Race[]> {\n    if (!this.db) throw new Error('Database not connected');\n    try {\n      const races = await this.db.all<Race[]>(`\n        SELECT race_id, track_name, race_number, post_time,\n               checkmate_score, qualified, trifecta_factors_json,\n               raw_data_json, updated_at\n        FROM live_races\n        ORDER BY post_time ASC\n      `);\n      return races;\n    } catch (error) {\n      console.error('[ERROR] Failed to fetch all races:', error);\n      return [];\n    }\n  }\n\n  async getAdapterStatuses(): Promise<AdapterStatus[]> {\n    if (!this.db) throw new Error('Database not connected');\n    try {\n      const statuses = await this.db.all<AdapterStatus[]>(`\n        SELECT adapter_name, status, last_run, races_found,\n               execution_time_ms, error_message\n        FROM adapter_status\n        ORDER BY last_run DESC\n      `);\n      return statuses;\n    } catch (error) {\n      console.error('[ERROR] Failed to fetch adapter statuses:', error);\n      return [];\n    }\n  }\n\n  async getRaceById(raceId: string): Promise<Race | null> {\n    if (!this.db) throw new Error('Database not connected');\n    try {\n      const race = await this.db.get<Race>(`\n        SELECT race_id, track_name, race_number, post_time,\n               checkmate_score, qualified, trifecta_factors_json,\n               raw_data_json, updated_at\n        FROM live_races\n        WHERE race_id = ?\n      `, raceId);\n      return race || null;\n    } catch (error) {\n      console.error('[ERROR] Failed to fetch race by ID:', error);\n      return null;\n    }\n  }\n}\n\n// Initialize Express and Socket.IO\nconst app = express();\nconst httpServer = createServer(app);\nconst io = new SocketServer(httpServer, {\n  cors: { origin: \"*\" }\n});\n\napp.use(cors());\napp.use(express.json());\n\nconst dbService = new DatabaseService();\n\n// API Endpoints\napp.get('/api/status', (req, res) => {\n  res.json({\n    status: 'online',\n    timestamp: new Date().toISOString(),\n    service: 'Checkmate API Gateway'\n  });\n});\n\napp.get('/api/races', async (req, res) => {\n  try {\n    const races = await dbService.getAllRaces();\n    res.json({ success: true, count: races.length, races });\n  } catch (error) {\n    res.status(500).json({ success: false, error: 'Failed to fetch races' });\n  }\n});\n\napp.get('/api/races/qualified', async (req, res) => {\n  try {\n    const races = await dbService.getQualifiedRaces();\n    res.json({ success: true, count: races.length, races });\n  } catch (error) {\n    res.status(500).json({ success: false, error: 'Failed to fetch qualified races' });\n  }\n});\n\napp.get('/api/races/:raceId', async (req, res) => {\n  try {\n    const race = await dbService.getRaceById(req.params.raceId);\n    if (race) {\n      res.json({ success: true, race });\n    } else {\n      res.status(404).json({ success: false, error: 'Race not found' });\n    }\n  } catch (error) {\n    res.status(500).json({ success: false, error: 'Failed to fetch race' });\n  }\n});\n\napp.get('/api/adapters/status', async (req, res) => {\n  try {\n    const statuses = await dbService.getAdapterStatuses();\n    res.json({ success: true, count: statuses.length, adapters: statuses });\n  } catch (error) {\n    res.status(500).json({ success: false, error: 'Failed to fetch adapter statuses' });\n  }\n});\n\n// WebSocket Connection Handling\nio.on('connection', (socket) => {\n  console.log(`[WebSocket] Client connected: ${socket.id}`);\n\n  dbService.getQualifiedRaces().then(races => {\n    socket.emit('races_update', { races });\n  });\n\n  dbService.getAdapterStatuses().then(statuses => {\n    socket.emit('adapters_update', { adapters: statuses });\n  });\n\n  socket.on('disconnect', () => {\n    console.log(`[WebSocket] Client disconnected: ${socket.id}`);\n  });\n\n  socket.on('request_update', async () => {\n    const races = await dbService.getQualifiedRaces();\n    const statuses = await dbService.getAdapterStatuses();\n    socket.emit('races_update', { races });\n    socket.emit('adapters_update', { adapters: statuses });\n  });\n});\n\n// Broadcast updates to all clients periodically\nasync function broadcastUpdates() {\n  try {\n    const races = await dbService.getQualifiedRaces();\n    const statuses = await dbService.getAdapterStatuses();\n\n    io.emit('races_update', { races });\n    io.emit('adapters_update', { adapters: statuses });\n  } catch (error) {\n    console.error('[ERROR] Failed to broadcast updates:', error);\n  }\n}\n\n// Start Server\nconst PORT = process.env.PORT || 8080;\n\nasync function startServer() {\n  try {\n    await dbService.connect();\n\n    httpServer.listen(PORT, () => {\n      console.log('='.repeat(70));\n      console.log(`  Checkmate API Gateway`);\n      console.log(`  Running on port ${PORT}`);\n      console.log(`  Database: ${dbService['dbPath']}`);\n      console.log('='.repeat(70));\n    });\n\n    setInterval(broadcastUpdates, 15000);\n\n  } catch (error) {\n    console.error('[FATAL] Failed to start server:', error);\n    process.exit(1);\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('\\n[INFO] Shutting down gracefully...');\n  httpServer.close();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('\\n[INFO] Shutting down gracefully...');\n  httpServer.close();\n  process.exit(0);\n});\n\nstartServer();",
    "web_platform/api_gateway/src/services/DatabaseService.ts": "import sqlite3 from 'sqlite3';\nimport { open, Database } from 'sqlite';\nimport path from 'path';\n\nexport class DatabaseService {\n  private db: Database | null = null;\n\n  private async getDb(): Promise<Database> {\n    if (!this.db) {\n      // This path assumes the service is run from the project root.\n      const dbPath = process.env.CHECKMATE_DB_PATH || path.join(__dirname, '../../../../shared_database/races.db');\n      this.db = await open({\n        filename: dbPath,\n        driver: sqlite3.Database\n      });\n    }\n    return this.db;\n  }\n\n  async getQualifiedRaces(): Promise<any[]> {\n    const db = await this.getDb();\n    return db.all(`SELECT * FROM qualified_races`);\n  }\n}",
    "web_platform/frontend/next.config.mjs": "/** @type {import('next').NextConfig} */\n\nconst withPWA = require('next-pwa')({\n  dest: 'public',\n  register: true,\n  skipWaiting: true,\n  disable: process.env.NODE_ENV === 'development'\n});\n\nconst nextConfig = {};\n\nmodule.exports = withPWA(nextConfig);\n",
    "web_platform/frontend/package.json": "{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": { \"dev\": \"next dev\", \"build\": \"next build\", \"start\": \"next start\" },\n  \"dependencies\": {\n    \"next\": \"14.1.0\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"socket.io-client\": \"^4.7.4\",\n    \"@tanstack/react-query\": \"^5.28.9\",\n    \"file-saver\": \"^2.0.5\",\n    \"xlsx\": \"^0.18.5\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"next-pwa\": \"^5.6.0\",\n    \"file-saver\": \"^2.0.5\",\n    \"xlsx\": \"^0.18.5\",\n    \"autoprefixer\": \"^10.0.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"typescript\": \"^5\"\n  }\n}",
    "web_platform/frontend/postcss.config.js": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};",
    "web_platform/frontend/public/manifest.json": "{\n  \"name\": \"Fortuna Faucet Command Deck\",\n  \"short_name\": \"Fortuna\",\n  \"description\": \"Real-time racing analysis.\",\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#1a202c\",\n  \"theme_color\": \"#1a202c\",\n  \"icons\": [\n    {\n      \"src\": \"/icons/icon-192x192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"/icons/icon-512x512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n",
    "web_platform/frontend/src/app/layout.tsx": "// web_platform/frontend/app/layout.tsx\nimport './globals.css';\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport Providers from './Providers';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Fortuna Faucet Command Deck',\n  description: 'Real-time racing analysis.',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={`${inter.className} bg-white text-gray-900 dark:bg-gray-900 dark:text-gray-100`}>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}",
    "web_platform/frontend/src/components/LiveRaceDashboard.tsx": "// web_platform/frontend/src/components/LiveRaceDashboard.tsx\n'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { RaceCard } from './RaceCard';\nimport { ExportManager } from '@/utils/exportManager';\n\n// --- Type Definitions ---\nimport type { Race } from '@/types/racing'; // Correct type import\n\ninterface QualifiedRacesResponse {\n  races: Race[];\n}\n\n// --- Helper Functions from UI Bible ---\nconst getNextRaceCountdown = (races: Race[]): string => {\n  const now = new Date().getTime();\n  const upcomingRaces = races\n    .map(race => new Date(race.start_time).getTime())\n    .filter(time => time > now);\n\n  if (upcomingRaces.length === 0) return '--:--';\n\n  const nextRaceTime = Math.min(...upcomingRaces);\n  const diff = nextRaceTime - now;\n  const minutes = Math.floor((diff / 1000) / 60);\n  const seconds = Math.floor((diff / 1000) % 60);\n\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\nconst fetchAdapterStatuses = async (): Promise<AdapterStatus[]> => {\n  const apiKey = process.env.NEXT_PUBLIC_API_KEY;\n  if (!apiKey) throw new Error('API key not configured.');\n  const response = await fetch(`/api/adapters/status`, { headers: { 'X-API-Key': apiKey } });\n  if (!response.ok) throw new Error(`Adapter status API request failed: ${response.statusText}`);\n  return response.json();\n};\n\n// --- Main Component ---\nexport const LiveRaceDashboard: React.FC = () => {\n  const [filterConfig, setFilterConfig] = useState({ minScore: 0, maxFieldSize: 999, sortBy: 'score' });\n\n  // --- TanStack Query Hooks ---\n  const { data: qualifiedData, error: racesError, isLoading: racesLoading } = useQuery<QualifiedRacesResponse>({\n    queryKey: ['qualifiedRaces'],\n    queryFn: fetchQualifiedRaces,\n    refetchInterval: 30000 // The Heartbeat\n  });\n\n  const { data: statuses, error: statusError } = useQuery<AdapterStatus[]>({\n    queryKey: ['adapterStatuses'],\n    queryFn: fetchAdapterStatuses,\n    refetchInterval: 60000\n  });\n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFilterConfig(prev => ({ ...prev, [name]: name === 'sortBy' ? value : Number(value) }));\n  };\n\n  const filteredAndSortedRaces = useMemo(() => {\n    let processedRaces = [...(qualifiedData?.races || [])];\n    processedRaces = processedRaces.filter(race => (race.qualification_score || 0) >= filterConfig.minScore && race.runners.filter(r => !r.scratched).length <= filterConfig.maxFieldSize);\n    processedRaces.sort((a, b) => {\n      switch (filterConfig.sortBy) {\n        case 'time': return new Date(a.start_time).getTime() - new Date(b.start_time).getTime();\n        case 'venue': return a.venue.localeCompare(b.venue);\n        default: return (b.qualification_score || 0) - (a.qualification_score || 0);\n      }\n    });\n    return processedRaces;\n  }, [qualifiedData, filterConfig]);\n\n  const error = racesError || statusError;\n\n  return (\n    <main className=\"min-h-screen bg-gray-900 text-white p-8\">\n      <h1 className=\"text-4xl font-bold text-center mb-8\">Fortuna Faucet Command Deck</h1>\n\n      {/* --- Visual Health Panel --- */}\n      <div className='mb-8 p-4 bg-gray-800/50 border border-gray-700 rounded-lg'>\n        <h2 className='text-lg font-semibold text-gray-300 mb-3'>Adapter Status</h2>\n        <div className='flex flex-wrap gap-2'>\n          {statuses?.map(s => (\n            <span key={s.adapter_name} className={`px-2 py-1 text-xs font-bold rounded-full ${s.status === 'SUCCESS' || s.status === 'OK' ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}`}>\\n              {s.adapter_name}\\n            </span>\n          )) ?? <span className='text-gray-500 text-sm'>Loading statuses...</span>}\n        </div>\n      </div>\n\n      {/* --- Smart Filtering & Sorting System --- */}\n      <div className=\"filter-panel bg-gray-800/90 backdrop-blur-sm p-4 rounded-xl border border-gray-700 mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\"><span className=\"font-semibold\">Smart Filters</span>\n            <button \n              onClick={() => ExportManager.exportToExcel(filteredAndSortedRaces)}\n              className='px-3 py-1 bg-green-500/20 text-green-300 text-sm font-semibold rounded-md hover:bg-green-500/40 transition-colors'>\n              Export to Excel\n            </button>\n          </div>\n          <div className=\"flex gap-6\">\n            <div className=\"flex items-center gap-3\"><label className=\"text-sm text-gray-400\">Min Score:</label><input type=\"range\" name=\"minScore\" min=\"0\" max=\"100\" value={filterConfig.minScore} onChange={handleFilterChange} className=\"w-32\" /><span className=\"text-sm font-semibold w-12\">{filterConfig.minScore}%</span></div>\n            <div className=\"flex items-center gap-3\"><label className=\"text-sm text-gray-400\">Max Field:</label><select name=\"maxFieldSize\" value={filterConfig.maxFieldSize} onChange={handleFilterChange} className=\"bg-gray-700 border border-gray-600 rounded px-3 py-1 text-white\"><option value=\"8\">8 runners</option><option value=\"10\">10 runners</option><option value=\"12\">12 runners</option><option value=\"999\">Any size</option></select></div>\n            <div className=\"flex items-center gap-3\"><label className=\"text-sm text-gray-400\">Sort by:</label><select name=\"sortBy\" value={filterConfig.sortBy} onChange={handleFilterChange} className=\"bg-gray-700 border border-gray-600 rounded px-3 py-1 text-white\"><option value=\"score\">Qualification Score</option><option value=\"time\">Post Time</option><option value=\"venue\">Track Name</option></select></div>\n          </div>\n        </div>\n      </div>\n\n      {racesLoading && <p className=\"text-center text-xl\">Searching for qualified races...</p>}\n      {error && <p className=\"text-center text-xl text-red-500\">Error: {error.message}</p>}\n\n      {!racesLoading && !error && (\n        <>\n          <div className='text-center mb-4 text-gray-400'>Displaying <span className='font-bold text-white'>{filteredAndSortedRaces.length}</span> of <span className='font-bold text-white'>{qualifiedData?.races.length || 0}</span> total qualified races.</div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredAndSortedRaces.map(race => <RaceCard key={race.id} race={race} />)}\n          </div>\n        </>\n      )}\n    </main>\n  );\n};",
    "web_platform/frontend/src/components/RaceCard.tsx": "// web_platform/frontend/src/components/RaceCard.tsx\n'use client';\n\nimport React from 'react';\nimport type { Race, Runner } from '@/types/racing';\n\n// Local types removed, now importing from '@/types/racing.ts'\n\ninterface RaceCardProps {\n  race: Race;\n}\n\n// Helper function from the UI Bible\nfunction formatTimeUntilPost(startTime: string): string {\n  const now = new Date();\n  const post = new Date(startTime);\n  const diff = post.getTime() - now.getTime();\n\n  if (diff < 0) return 'Post Time Passed';\n\n  const hours = Math.floor(diff / (1000 * 60 * 60));\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n\n  return `${hours}h ${minutes}m`;\n}\n\nexport const RaceCard: React.FC<RaceCardProps> = ({ race }) => {\n  const activeRunners = race.runners.filter(r => !r.scratched);\n  activeRunners.sort((a, b) => a.number - b.number);\n\n  const getUniqueSourcesCount = (runners: Runner[]): number => {\n    const sources = new Set();\n    runners.forEach(runner => {\n      if (runner.odds) {\n        Object.keys(runner.odds).forEach(source => sources.add(source));\n      }\n    });\n    return sources.size;\n  };\n\n  const getBestOdds = (runner: Runner): { odds: number, source: string } | null => {\n    if (!runner.odds) return null;\n    const validOdds = Object.values(runner.odds).filter(o => o.win && o.win < 999);\n    if (validOdds.length === 0) return null;\n    const best = validOdds.reduce((min, o) => o.win! < min.win! ? o : min);\n    return { odds: best.win!, source: best.source };\n  };\n\n  return (\n    <div className={`race-card-enhanced border rounded-lg p-4 bg-gray-800 shadow-lg hover:border-purple-500 transition-all ${race.qualification_score && race.qualification_score >= 80 ? 'card-premium' : 'border-gray-700'}`}>\n      {/* Header with Smart Status Indicators */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\">{race.venue}</h2>\n            <div className=\"flex gap-2 text-sm text-gray-400\">\n              <span>Race {race.race_number}</span>\n              <span>\u2022</span>\n              <span>{formatTimeUntilPost(race.start_time)}</span>\n            </div>\n          </div>\n        </div>\n\n        {race.qualification_score && (\n          <div className={`px-4 py-2 rounded-full text-center ${\n            race.qualification_score >= 80 ? 'bg-red-500/20 text-red-400 border border-red-500/30' :\n            race.qualification_score >= 60 ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30' :\n            'bg-green-500/20 text-green-400 border border-green-500/30'\n          }`}>\n            <div className=\"font-bold text-lg\">{race.qualification_score.toFixed(0)}%</div>\n            <div className=\"text-xs\">Score</div>\n          </div>\n        )}\n      </div>\n\n      {/* Race Conditions Grid */}\n      <div className=\"grid grid-cols-4 gap-2 mb-4 p-3 bg-gray-800/50 rounded-lg\">\n        <div className=\"text-center\">\n          <div className=\"text-xs text-gray-400\">Distance</div>\n          <div className=\"text-sm font-semibold text-white\">{race.distance || 'N/A'}</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-xs text-gray-400\">Surface</div>\n          <div className=\"text-sm font-semibold text-white\">{race.surface || 'Dirt'}</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-xs text-gray-400\">Field</div>\n          <div className=\"text-sm font-semibold text-white\">{activeRunners.length}</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-xs text-gray-400\">Sources</div>\n          <div className=\"text-sm font-semibold text-white\">{getUniqueSourcesCount(race.runners)}</div>\n        </div>\n      </div>\n\n      {/* Interactive Runner Rows */}\n      <div className=\"runners-table space-y-2\">\n        {activeRunners.map((runner, idx) => {\n          const bestOddsInfo = getBestOdds(runner);\n          return (\n            <div key={runner.number} className=\"runner-row group hover:bg-purple-500/10 transition-all rounded-md p-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4 flex-1\">\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center font-bold transition-all group-hover:scale-110 text-gray-900 shadow-lg ${idx === 0 ? 'bg-gradient-to-br from-yellow-400 to-yellow-600 shadow-yellow-500/50' : idx === 1 ? 'bg-gradient-to-br from-gray-300 to-gray-500 shadow-gray-400/50' : idx === 2 ? 'bg-gradient-to-br from-orange-400 to-orange-600 shadow-orange-500/50' : 'bg-gray-700 text-gray-300'}`}>\n                    {runner.number}\n                  </div>\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-bold text-white text-lg\">{runner.name}</span>\n                    <div className=\"flex gap-3 text-sm text-gray-400\">\n                      {runner.jockey && <span>J: {runner.jockey}</span>}\n                      {runner.trainer && <span>T: {runner.trainer}</span>}\n                    </div>\n                  </div>\n                </div>\n                {bestOddsInfo && (\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-emerald-400\">{bestOddsInfo.odds.toFixed(2)}</div>\n                    <div className=\"text-xs text-gray-500\">via {bestOddsInfo.source}</div>\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};",
    "web_platform/frontend/src/components/ScoreBadge.tsx": "'use client';\nimport React from 'react';\n\nconst getScoreStyling = (score: number) => {\n  if (score >= 90) return { bg: 'bg-yellow-400/10', text: 'text-yellow-300', border: 'border-yellow-400' };\n  if (score >= 80) return { bg: 'bg-orange-500/10', text: 'text-orange-400', border: 'border-orange-500' };\n  return { bg: 'bg-sky-500/10', text: 'text-sky-400', border: 'border-sky-500' };\n};\n\nexport const ScoreBadge: React.FC<{ score: number }> = ({ score }) => {\n  const { bg, text } = getScoreStyling(score);\n  return (\n    <div className={`text-right ${text}`}>\n      <p className=\"text-3xl font-bold\">{score.toFixed(1)}</p>\n      <p className=\"text-xs font-medium tracking-wider uppercase\\\">Score</p>\n    </div>\n  );\n};",
    "web_platform/frontend/src/components/TrifectaFactors.tsx": "// TrifectaFactors.tsx - FINAL, DYNAMIC VERSION\n'use client';\nimport React from 'react';\n\ninterface TrifectaFactorsProps {\n  factorsJson: string | null;\n}\n\nexport function TrifectaFactors({ factorsJson }: TrifectaFactorsProps) {\n  if (!factorsJson) {\n    return <div className=\"text-sm text-gray-500\">No analysis factors available.</div>;\n  }\n\n  try {\n    const factors = JSON.parse(factorsJson);\n    const positiveFactors = Object.entries(factors).filter(([key, value]: [string, any]) => value.ok);\n\n    if (positiveFactors.length === 0) {\n      return <div className=\"text-sm text-gray-500\">No positive factors identified.</div>;\n    }\n\n    return (\n      <div className=\"mt-2 text-xs\">\n        <h4 className=\"font-semibold mb-1\">Key Factors:</h4>\n        <ul className=\"list-disc list-inside space-y-1\">\n          {positiveFactors.map(([key, value]: [string, any]) => (\n            <li key={key} className=\"text-gray-700\">\n              <span className=\"font-medium text-green-600\">\u2713</span> {value.reason} ({value.points > 0 ? `+${value.points}` : value.points} pts)\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  } catch (error) {\n    console.error(\"Failed to parse trifecta factors:\", error);\n    return <div className=\"text-sm text-red-500\">Error displaying analysis factors.</div>;\n  }\n}",
    "web_platform/frontend/src/hooks/useRealTimeRaces.ts": "import { useState, useEffect } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { Race } from '../types/racing';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';\n\nexport function useRealTimeRaces() {\n  const [races, setRaces] = useState<Race[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    const socket: Socket = io(API_URL);\n\n    socket.on('connect', () => setIsConnected(true));\n    socket.on('disconnect', () => setIsConnected(false));\n\n    socket.on('races_update', (data: { races: Race[] }) => {\n      if (data && Array.isArray(data.races)) {\n        setRaces(data.races);\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  return { races, isConnected };\n}",
    "web_platform/frontend/src/types/racing.ts": "// web_platform/frontend/src/types/racing.ts\n// This file is the central source of truth for frontend racing data types.\n\n// --- Runner & Odds Interfaces ---\nexport interface OddsData {\n  win: number | null;\n  source: string;\n  last_updated: string;\n}\n\nexport interface Runner {\n  number: number;\n  name: string;\n  scratched: boolean;\n  selection_id?: number;\n  odds: Record<string, OddsData>;\n  jockey?: string;\n  trainer?: string;\n}\n\n// --- Race Interface ---\n// This interface matches the shape of the data returned by the API for the dashboard.\nexport interface Race {\n  id: string;\n  venue: string;\n  race_number: number;\n  start_time: string;\n  runners: Runner[];\n  source: string;\n  qualification_score?: number;\n  distance?: string;\n  surface?: string;\n}\n\n// --- Analysis Factor Interfaces (retained from previous version) ---\nexport interface Factor {\n    points: number;\n    ok: boolean;\n    reason: string;\n}\n\nexport interface TrifectaFactors {\n    [key: string]: Factor;\n}",
    "web_platform/frontend/srcs/utils/exportManager.ts": "// web_platform/frontend/src/utils/exportManager.ts\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nexport class ExportManager {\n  static exportToExcel(races: any[], filename: string = 'fortuna_races') {\n    const workbook = XLSX.utils.book_new();\n\n    const summaryData = [\n      ['Total Qualified Races', races.length],\n      ['Generated At', new Date().toLocaleString()]\n    ];\n    const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);\n    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');\n\n    const raceData = races.map(race => ({\n      'Venue': race.venue,\n      'Race Number': race.race_number,\n      'Post Time': new Date(race.start_time).toLocaleString(),\n      'Qualification Score': race.qualification_score || 0,\n      'Field Size': race.runners.filter(r => !r.scratched).length,\n      'Source': race.source\n    }));\n    const raceSheet = XLSX.utils.json_to_sheet(raceData);\n    XLSX.utils.book_append_sheet(workbook, raceSheet, 'Races');\n\n    XLSX.writeFile(workbook, `${filename}_${Date.now()}.xlsx`);\n  }\n}\n",
    "web_platform/frontend/tailwind.config.ts": "import type { Config } from 'tailwindcss'\n\nconst config: Config = {\n  darkMode: 'media',\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\nexport default config"
}