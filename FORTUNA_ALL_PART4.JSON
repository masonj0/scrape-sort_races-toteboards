{
    "CREATE_SHORTCUTS.bat": "@echo off\nREM ============================================================================\nREM  FORTUNA FAUCET - Desktop Shortcut Creator\nREM ============================================================================\n\nset SCRIPT_DIR=%~dp0\nset DESKTOP=%USERPROFILE%\\\\Desktop\n\necho Creating desktop shortcuts...\n\npowershell -Command \"$WS = New-Object -ComObject WScript.Shell; $SC = $WS.CreateShortcut('%DESKTOP%\\\\Launch Fortuna.lnk'); $SC.TargetPath = '%SCRIPT_DIR%LAUNCH_FORTUNA.bat'; $SC.WorkingDirectory = '%SCRIPT_DIR%'; $SC.IconLocation = 'shell32.dll,137'; $SC.Description = 'Launch Fortuna Faucet'; $SC.Save()\"\npowershell -Command \"$WS = New-Object -ComObject WScript.Shell; $SC = $WS.CreateShortcut('%DESKTOP%\\\\Fortuna Monitor.lnk'); $SC.TargetPath = '%SCRIPT_DIR%.venv\\\\Scripts\\\\python.exe'; $SC.Arguments = 'fortuna_monitor.py'; $SC.WorkingDirectory = '%SCRIPT_DIR%'; $SC.IconLocation = 'shell32.dll,23'; $SC.Description = 'Fortuna Status Monitor'; $SC.Save()\"\npowershell -Command \"$WS = New-Object -ComObject WScript.Shell; $SC = $WS.CreateShortcut('%DESKTOP%\\\\Stop Fortuna.lnk'); $SC.TargetPath = '%SCRIPT_DIR%STOP_FORTUNA.bat'; $SC.WorkingDirectory = '%SCRIPT_DIR%'; $SC.IconLocation = 'shell32.dll,27'; $SC.Description = 'Stop Fortuna Services'; $SC.Save()\"\n\necho Shortcuts created successfully!\n",
    "INSTALL_FORTUNA.bat": "@echo off\nREM ============================================================================\nREM  FORTUNA FAUCET - Windows Native One-Click Installer\nREM ============================================================================\n\ntitle Fortuna Faucet - Installation Wizard\ncolor 0A\necho.\necho  ========================================================================\necho   FORTUNA FAUCET - Automated Installation Wizard\necho  ========================================================================\necho.\n\nREM Check for admin privileges\nnet session >nul 2>&1\nif %errorlevel% neq 0 (\n    echo  [!] This installer requires Administrator privileges.\n    echo  [!] Please right-click and select \"Run as Administrator\"\n    pause\n    exit /b 1\n)\n\necho  [1/5] Checking Python installation...\npython --version >nul 2>&1\nif %errorlevel% neq 0 (\n    echo  [X] Python not found! Installing Python 3.11...\n    powershell -Command \"Invoke-WebRequest -Uri 'https://www.python.org/ftp/python/3.11.7/python-3.11.7-amd64.exe' -OutFile '%TEMP%\\\\python_installer.exe'\"\n    \"%TEMP%\\\\python_installer.exe\" /quiet InstallAllUsers=1 PrependPath=1 Include_test=0\n    del \"%TEMP%\\\\python_installer.exe\"\n    echo  [V] Python installed successfully!\n) else (\n    echo  [V] Python found!\n)\n\necho.\necho  [2/5] Checking Node.js installation...\nnode --version >nul 2>&1\nif %errorlevel% neq 0 (\n    echo  [X] Node.js not found! Installing Node.js LTS...\n    powershell -Command \"Invoke-WebRequest -Uri 'https://nodejs.org/dist/v20.10.0/node-v20.10.0-x64.msi' -OutFile '%TEMP%\\\\node_installer.msi'\"\n    msiexec /i \"%TEMP%\\\\node_installer.msi\" /quiet /norestart\n    del \"%TEMP%\\\\node_installer.msi\"\n    echo  [V] Node.js installed successfully!\n) else (\n    echo  [V] Node.js found!\n)\n\necho.\necho  [3/5] Setting up Python virtual environment...\nif not exist .venv (\n    python -m venv .venv\n    echo  [V] Virtual environment created!\n) else (\n    echo  [V] Virtual environment already exists!\n)\n\necho.\necho  [4/5] Installing Python dependencies...\ncall .venv\\\\Scripts\\\\activate.bat\npip install --upgrade pip --quiet\npip install -r requirements.txt --quiet\necho  [V] Python packages installed!\n\necho.\necho  [5/5] Installing Node.js dependencies...\ncd web_platform\\\\frontend\ncall npm install --silent\ncd ..\\\\..\necho  [V] Node.js packages installed!\n\necho.\necho  [*] Creating desktop shortcuts...\ncall CREATE_SHORTCUTS.bat\n\necho.\necho  ========================================================================\necho   INSTALLATION COMPLETE!\necho  ========================================================================\necho.\npause\n",
    "LAUNCH_FORTUNA.bat": "@echo off\nREM ============================================================================\nREM  FORTUNA FAUCET - Windows Native Launcher (Ultimate Edition)\nREM ============================================================================\n\ntitle Fortuna Faucet - Startup Sequence\ncolor 0B\n\necho.\necho  ========================================================================\necho   FORTUNA FAUCET - System Startup\necho  ========================================================================\necho.\n\nif not exist .env (\n    echo  [!] WARNING: .env file not found!\n    echo  [!] Please copy .env.example to .env and configure your API keys.\n    pause\n    exit /b 1\n)\n\necho  [*] Starting Python Backend API...\nstart \"Fortuna Backend\" /MIN cmd /c \"call .venv\\\\Scripts\\\\activate.bat && uvicorn python_service.api:app --host 0.0.0.0 --port 8000\"\n\ntimeout /t 3 /nobreak >nul\n\necho  [*] Starting Next.js Frontend...\nstart \"Fortuna Frontend\" /MIN cmd /c \"cd web_platform\\\\frontend && npm run dev\"\n\ntimeout /t 5 /nobreak >nul\n\necho  [*] Starting Status Monitor...\nstart \"Fortuna Monitor\" cmd /c \"call .venv\\\\Scripts\\\\activate.bat && python fortuna_monitor.py\"\n\ntimeout /t 3 /nobreak >nul\n\necho  [*] Opening Dashboard in Browser...\nstart \"\" \"http://localhost:3000\"\n\necho.\necho  ========================================================================\necho   ALL SYSTEMS OPERATIONAL\necho  ========================================================================\necho.\npause\n",
    "README_WINDOWS.md": "# \ud83c\udfaf FORTUNA FAUCET - Windows Installation Guide\n\n## Quick Start (3 Minutes)\n\n### Step 1: Download and Extract\n1. Download the complete Fortuna Faucet package\n2. Extract to `C:\\\\FortunaFaucet` (recommended)\n\n### Step 2: Run the Installer\n1. Right-click `INSTALL_FORTUNA.bat`\n2. Select \"Run as Administrator\"\n3. Wait for automatic installation (3-5 minutes)\n\n### Step 3: Configure Your API Keys\n1. Open `.env` file in Notepad\n2. Add your API credentials:\n   ```\n   API_KEY=your_secret_key_here\n   ```\n3. Save and close\n\n### Step 4: Launch Fortuna\n1. Double-click **\"Launch Fortuna\"** shortcut on your desktop\n2. Wait 10 seconds for services to start\n3. Dashboard opens automatically in your browser\n\n## Desktop Shortcuts\n\nAfter installation, you'll have three shortcuts:\n\n- **Launch Fortuna** \ud83d\ude80 - Starts all services\n- **Fortuna Monitor** \ud83d\udcca - Opens status monitor\n- **Stop Fortuna** \ud83d\uded1 - Cleanly stops all services\n\n## Troubleshooting\n\n### \"Backend Offline\" Error\n1. Run `STOP_FORTUNA.bat`\n2. Wait 10 seconds\n3. Run `LAUNCH_FORTUNA.bat` again\n\n### Can't Find .env File\nThe .env file should be in the same folder as LAUNCH_FORTUNA.bat.\nIf missing, copy .env.example to .env\n\n\n## Service Management (Advanced)\n\nThe Fortuna Faucet backend runs as a persistent Windows Service, meaning it starts with your computer and runs silently in the background.\n\n- **To Install/Start the Service:** If you ever need to manually install it, right-click `install_service.bat` and choose \"Run as Administrator\".\n- **To Uninstall the Service:** To completely remove the background service, right-click `uninstall_service.bat` and choose \"Run as Administrator\".\n\nThis allows the Electron application (the user interface) to be opened and closed without interrupting the core data collection engine.\n",
    "RESTART_FORTUNA.bat": "@echo off\nREM ============================================================================\nREM  FORTUNA FAUCET - Clean Restart Script\nREM ============================================================================\n\necho [%date% %time%] Restarting Fortuna Faucet... >> fortuna_restart.log\n\ncall STOP_FORTUNA.bat\ntimeout /t 10 /nobreak >nul\ncall LAUNCH_FORTUNA.bat\n\necho [%date% %time%] Restart complete. >> fortuna_restart.log\n",
    "SCHEDULE_FORTUNA.bat": "@echo off\nREM ============================================================================\nREM  FORTUNA FAUCET - Windows Task Scheduler Setup (PowerShell Edition)\nREM ============================================================================\n\ntitle Fortuna Faucet - Task Scheduler Setup\ncolor 0E\n\necho.\necho  ========================================================================\necho   FORTUNA FAUCET - Automatic Startup Configuration\necho  ========================================================================\necho.\n\nnet session >nul 2>&1\nif %errorlevel% neq 0 (\n    echo  [!] Administrator privileges required!\n    echo  [!] Right-click this script and select \"Run as Administrator\"\n    pause\n    exit /b 1\n)\n\nset SCRIPT_DIR=%~dp0\n\necho  [1/2] Creating task to start Fortuna on Windows login (via PowerShell)...\nREM UPGRADED: This now calls the superior launcher.ps1 script directly.\nschtasks /create /tn \"Fortuna Faucet - Startup\" /tr \"powershell.exe -ExecutionPolicy Bypass -File \\\"%SCRIPT_DIR%launcher.ps1\\\"\" /sc onlogon /rl highest /f\n\necho  [2/2] Creating daily maintenance task...\nschtasks /create /tn \"Fortuna Faucet - Daily Restart\" /tr \"%SCRIPT_DIR%RESTART_FORTUNA.bat\" /sc daily /st 03:00 /rl highest /f\n\necho.\necho  ========================================================================\necho   SCHEDULED TASKS CREATED SUCCESSFULLY!\necho  ========================================================================\necho.\necho   Fortuna will now start automatically when you log into Windows.\necho   It will also perform a clean restart every morning at 3:00 AM.\necho.\npause\n",
    "STOP_FORTUNA.bat": "@echo off\nREM ============================================================================\nREM  FORTUNA FAUCET - Clean Shutdown Script\nREM ============================================================================\n\ntitle Fortuna Faucet - Shutdown\ncolor 0C\n\necho.\necho  ========================================================================\necho   FORTUNA FAUCET - Shutting Down All Services\necho  ========================================================================\necho.\n\necho  [*] Stopping Python processes...\ntaskkill /FI \"WindowTitle eq Fortuna Backend*\" /T /F >nul 2>&1\ntaskkill /FI \"WindowTitle eq Fortuna Monitor*\" /T /F >nul 2>&1\n\necho  [*] Stopping Node.js processes...\ntaskkill /FI \"WindowTitle eq Fortuna Frontend*\" /T /F >nul 2>&1\n\necho.\necho  [V] All Fortuna services stopped successfully!\necho.\npause\n",
    "fortuna_monitor.py": "#!/usr/bin/env python3\n\"\"\"\nFORTUNA FAUCET - Advanced Windows Monitor with Performance Graphs\n\"\"\"\n\nimport asyncio\nimport httpx\nimport tkinter as tk\nfrom tkinter import ttk, scrolledtext, messagebox\nfrom datetime import datetime\nfrom typing import List, Any\nimport os\nfrom collections import deque\nimport threading\nimport webbrowser\n\n# Try to import matplotlib for graphs\ntry:\n    import matplotlib\n    matplotlib.use('TkAgg')\n    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n    from matplotlib.figure import Figure\n    GRAPHS_AVAILABLE = True\nexcept ImportError:\n    GRAPHS_AVAILABLE = False\n\ndef load_api_key():\n    if os.path.exists('.env'):\n        with open('.env', 'r') as f:\n            for line in f:\n                if line.startswith('API_KEY='):\n                    return line.split('=', 1)[1].strip().strip('\\\"')\n    return None\n\nAPI_BASE_URL = \"http://localhost:8000\"\nAPI_KEY = load_api_key()\n\nclass PerformanceTracker:\n    def __init__(self, max_history=50):\n        self.timestamps = deque(maxlen=max_history)\n        self.race_counts = deque(maxlen=max_history)\n        self.fetch_durations = deque(maxlen=max_history)\n        self.success_rates = deque(maxlen=max_history)\n\n    def add_datapoint(self, races, duration, success_rate):\n        self.timestamps.append(datetime.now())\n        self.race_counts.append(races)\n        self.fetch_durations.append(duration)\n        self.success_rates.append(success_rate)\n\nclass FortunaAdvancedMonitor(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Fortuna Faucet - Advanced System Monitor\")\n        try:\n            from ctypes import windll\n            windll.shcore.SetProcessDpiAwareness(1)\n        except:\n            pass\n        self.geometry(\"1200x800\")\n        self.configure(bg='#1a1a2e')\n\n        self.performance = PerformanceTracker()\n        self.is_running = True\n        self.refresh_interval = 30000\n        self.auto_refresh_var = tk.BooleanVar(value=True)\n\n        self._setup_styles()\n        self._create_widgets()\n        self.after(100, self.initial_load)\n\n    def initial_load(self):\n        if not API_KEY:\n            messagebox.showerror(\"Config Error\", \"API_KEY not found in .env file!\")\n            self.destroy()\n            return\n        self.schedule_refresh()\n\n    def _setup_styles(self):\n        style = ttk.Style()\n        style.theme_use('clam')\n        style.configure('Header.TLabel', background='#16213e', foreground='#e94560', font=('Segoe UI', 18, 'bold'), padding=15)\n        style.configure('Stat.TFrame', background='#0f3460', relief='flat')\n        style.configure('StatValue.TLabel', background='#0f3460', foreground='#00ff88', font=('Segoe UI', 24, 'bold'))\n        style.configure('StatLabel.TLabel', background='#0f3460', foreground='#ffffff', font=('Segoe UI', 10))\n\n    def _create_widgets(self):\n        header_frame = tk.Frame(self, bg='#16213e', height=100)\n        header_frame.pack(fill=tk.X)\n        header_frame.pack_propagate(False)\n        ttk.Label(header_frame, text=\"\ud83c\udfaf FORTUNA FAUCET\", style='Header.TLabel').pack(pady=10)\n\n        stats_frame = tk.Frame(self, bg='#1a1a2e')\n        stats_frame.pack(fill=tk.X, padx=15, pady=10)\n        self._create_stat_card(stats_frame, \"Active Adapters\", \"0\", 0)\n        self._create_stat_card(stats_frame, \"Total Races\", \"0\", 1)\n        self._create_stat_card(stats_frame, \"Success Rate\", \"0%\", 2)\n        self._create_stat_card(stats_frame, \"Avg Duration\", \"0s\", 3)\n\n        self.notebook = ttk.Notebook(self)\n        self.notebook.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)\n        self.notebook.add(self._create_adapter_tab(), text=\"\ud83d\udd27 Adapters\")\n        if GRAPHS_AVAILABLE:\n            self.notebook.add(self._create_graph_tab(), text=\"\ud83d\udcca Performance\")\n\n        self._create_control_panel()\n        self._create_status_bar()\n\n    def _create_stat_card(self, parent, label, value, column):\n        card = ttk.Frame(parent, style='Stat.TFrame', width=250, height=100)\n        card.grid(row=0, column=column, padx=5, sticky='ew')\n        card.grid_propagate(False)\n        parent.grid_columnconfigure(column, weight=1)\n        value_label = ttk.Label(card, text=value, style='StatValue.TLabel')\n        value_label.pack(pady=(15, 0))\n        ttk.Label(card, text=label, style='StatLabel.TLabel').pack()\n        setattr(self, f'stat_{label.lower().replace(\" \", \"_\")}', value_label)\n\n    def _create_adapter_tab(self):\n        frame = tk.Frame(self.notebook, bg='#0f3460')\n        columns = ('Adapter', 'Status', 'Races', 'Duration', 'Error')\n        self.adapter_tree = ttk.Treeview(frame, columns=columns, show='headings')\n        for col in columns:\n            self.adapter_tree.heading(col, text=col)\n        self.adapter_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n        return frame\n\n    def _create_graph_tab(self):\n        frame = tk.Frame(self.notebook, bg='#0f3460')\n        if GRAPHS_AVAILABLE:\n            self.fig = Figure(figsize=(10, 6), facecolor='#0f3460')\n            self.canvas = FigureCanvasTkAgg(self.fig, master=frame)\n            self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n            self.ax1 = self.fig.add_subplot(2, 2, 1, facecolor='#16213e')\n            self.ax2 = self.fig.add_subplot(2, 2, 2, facecolor='#16213e')\n            self.ax3 = self.fig.add_subplot(2, 2, 3, facecolor='#16213e')\n            self.ax4 = self.fig.add_subplot(2, 2, 4, facecolor='#16213e')\n            self.fig.tight_layout(pad=3.0)\n        else:\n            ttk.Label(frame, text=\"Install matplotlib to enable graphs: pip install matplotlib\").pack(expand=True)\n        return frame\n\n    def _create_control_panel(self):\n        control_frame = tk.Frame(self, bg='#1a1a2e')\n        control_frame.pack(fill=tk.X, padx=15, pady=10)\n        tk.Button(control_frame, text=\"\ud83d\udd04 Refresh Now\", command=self.manual_refresh, bg='#e94560', fg='#ffffff', font=('Segoe UI', 10, 'bold'), relief=tk.FLAT, padx=25, pady=10).pack(side=tk.LEFT)\n        tk.Button(control_frame, text=\"\ud83c\udf10 Dashboard\", command=lambda: webbrowser.open('http://localhost:3000'), bg='#0f3460', fg='#ffffff', font=('Segoe UI', 10, 'bold'), relief=tk.FLAT, padx=25, pady=10).pack(side=tk.LEFT, padx=5)\n        tk.Checkbutton(control_frame, text=\"Auto-refresh\", variable=self.auto_refresh_var, bg='#1a1a2e', fg='#ffffff', selectcolor='#0f3460').pack(side=tk.RIGHT)\n\n    def _create_status_bar(self):\n        status_frame = tk.Frame(self, bg='#0f3460', height=30)\n        status_frame.pack(fill=tk.X, side=tk.BOTTOM)\n        status_frame.pack_propagate(False)\n        self.last_update_label = tk.Label(status_frame, text=\"Last Update: --:--:--\", bg='#0f3460', fg='#ffffff')\n        self.last_update_label.pack(side=tk.LEFT, padx=15)\n        self.status_indicator = tk.Label(status_frame, text=\"\u25cf Initializing...\", bg='#0f3460', fg='#ffcc00')\n        self.status_indicator.pack(side=tk.RIGHT, padx=15)\n\n    def manual_refresh(self):\n        self.status_indicator.config(text=\"\u25cf Fetching...\", fg='#ffcc00')\n        self.update()\n        threading.Thread(target=lambda: asyncio.run(self.refresh_data())).start()\n\n    async def refresh_data(self):\n        try:\n            headers = {\"X-API-Key\": API_KEY}\n            async with httpx.AsyncClient(timeout=10.0) as client:\n                response = await client.get(f\"{API_BASE_URL}/api/adapters/status\", headers=headers)\n                response.raise_for_status()\n                adapters = response.json()\n            self.update_ui(adapters)\n        except httpx.ConnectError:\n            self.update_ui(is_error=True, error_message=\"Backend Offline\")\n        except Exception as e:\n            self.update_ui(is_error=True, error_message=str(e))\n\n    def update_ui(self, adapters: List[Any] = [], is_error: bool = False, error_message: str = \"\"):\n        if is_error:\n            self.status_indicator.config(text=f\"\u25cf {error_message}\", fg='#ff4444')\n            for item in self.adapter_tree.get_children(): self.adapter_tree.delete(item)\n            self.adapter_tree.insert('', tk.END, values=('SYSTEM ERROR', 'FAILED', 0, 0, error_message[:60]))\n            return\n\n        total_races = sum(a.get('races_fetched', 0) for a in adapters)\n        avg_duration = sum(a.get('fetch_duration', 0) for a in adapters) / len(adapters) if adapters else 0\n        success_rate = sum(1 for a in adapters if a.get('status') == 'SUCCESS') / len(adapters) * 100 if adapters else 0\n        self.performance.add_datapoint(total_races, avg_duration, success_rate)\n\n        self.stat_active_adapters.config(text=str(len(adapters)))\n        self.stat_total_races.config(text=str(total_races))\n        self.stat_success_rate.config(text=f\"{success_rate:.1f}%\")\n        self.stat_avg_duration.config(text=f\"{avg_duration:.2f}s\")\n\n        for item in self.adapter_tree.get_children(): self.adapter_tree.delete(item)\n        for adapter in adapters:\n            status = adapter.get('status', 'UNKNOWN')\n            self.adapter_tree.insert('', tk.END, values=(adapter.get('name', 'Unknown'), status, adapter.get('races_fetched', 0), f\"{adapter.get('fetch_duration', 0):.2f}\", adapter.get('error_message', '\u2014')[:60]))\n\n        if GRAPHS_AVAILABLE: self.update_graphs()\n        self.last_update_label.config(text=f\"Last Update: {datetime.now().strftime('%H:%M:%S')}\")\n        self.status_indicator.config(text=\"\u25cf All Systems Operational\", fg='#00ff88')\n\n    def update_graphs(self):\n        history = self.performance.get_history()\n        if not history['times']: return\n        for ax in [self.ax1, self.ax2, self.ax3, self.ax4]: ax.clear()\n        self.ax1.plot(history['times'], history['races'], color='#00ff88')\n        self.ax1.set_title('Races Fetched', color='white')\n        self.ax2.plot(history['times'], history['durations'], color='#e94560')\n        self.ax2.set_title('Avg. Fetch Duration (s)', color='white')\n        self.ax3.plot(history['times'], history['success'], color='#ffcc00')\n        self.ax3.set_title('Success Rate (%)', color='white')\n        self.ax3.set_ylim(0, 105)\n        self.canvas.draw()\n\n    def schedule_refresh(self):\n        if self.is_running and self.auto_refresh_var.get():\n            self.manual_refresh()\n        if self.is_running:\n            self.after(self.refresh_interval, self.schedule_refresh)\n\n    def on_closing(self):\n        self.is_running = False\n        self.destroy()\n\nif __name__ == \"__main__\":\n    if not API_KEY:\n        messagebox.showerror(\"Config Error\", \"API_KEY not found in .env file!\")\n    else:\n        app = FortunaAdvancedMonitor()\n        app.protocol(\"WM_DELETE_WINDOW\", app.on_closing)\n        app.mainloop()\n",
    "fortuna_tray.py": "# fortuna_tray.py\n# Provides a native Windows System Tray icon and menu for Fortuna Faucet.\n\nimport pystray\nfrom PIL import Image, ImageDraw\nimport webbrowser\nimport subprocess\nfrom pathlib import Path\n\nclass FortunaTrayApp:\n    def __init__(self):\n        self.icon = None\n        self.project_root = Path(__file__).parent.resolve()\n\n    def create_icon(self) -> Image.Image:\n        width = 64\n        height = 64\n        # Using a gold color for the icon background\n        image = Image.new('RGB', (width, height), color='#FFD700')\n        dc = ImageDraw.Draw(image)\n        # dc.text((12, 15), \"FF\", fill='black') # Temporarily removed due to font loading issues\n        return image\n\n    def on_quit(self, icon, item):\n        icon.stop()\n        # Execute the main stop script to ensure all services are terminated\n        subprocess.Popen(str(self.project_root / \"STOP_FORTUNA.bat\"), shell=True)\n\n    def on_open_dashboard(self, icon, item):\n        webbrowser.open('http://localhost:3000')\n\n    def on_show_monitor(self, icon, item):\n        # Launch the Tkinter monitor\n        python_exe = self.project_root / \".venv\" / \"Scripts\" / \"python.exe\"\n        monitor_script = self.project_root / \"fortuna_monitor.py\"\n        subprocess.Popen([str(python_exe), str(monitor_script)])\n\n    def run(self):\n        menu = pystray.Menu(\n            pystray.MenuItem('Open Dashboard', self.on_open_dashboard, default=True),\n            pystray.MenuItem('Show Monitor', self.on_show_monitor),\n            pystray.Menu.SEPARATOR,\n            pystray.MenuItem('Quit Fortuna', self.on_quit)\n        )\n        \n        self.icon = pystray.Icon(\n            \"Fortuna Faucet\",\n            self.create_icon(),\n            \"Fortuna Faucet - Racing Intelligence\",\n            menu\n        )\n        \n        self.icon.run()\n\nif __name__ == '__main__':\n    app = FortunaTrayApp()\n    app.run()\n",
    "install_service.bat": "@echo off\nREM Installs and starts the Fortuna Faucet backend as a Windows Service.\n\necho Installing Fortuna Faucet as a Windows Service...\n\nREM Ensure pywin32 is installed in the venv\ncall .venv\\Scripts\\activate.bat\npip install pywin32 --quiet\n\nREM Install the service\npython windows_service.py install\n\nREM Start the service\npython windows_service.py start\n\necho.\necho Service installed and started successfully!\necho The backend will now run automatically in the background.\npause\n",
    "launcher.ps1": "# launcher.ps1\n# Enhanced PowerShell launcher for Fortuna Faucet\n\n# --- Configuration ---\n$backendPort = 8000\n$frontendPort = 3000\n$backendDir = \"python_service\"\n$frontendDir = \"web_platform\\\\frontend\"\n\n# --- Helper Functions for Color Output ---\nfunction Write-Header {\n    param([string]$text)\n    Write-Host (\"=\" * 60) -ForegroundColor Cyan\n    Write-Host $text -ForegroundColor Cyan\n    Write-Host (\"=\" * 60) -ForegroundColor Cyan\n}\n\nfunction Write-Step {\n    param([string]$text)\n    Write-Host \"\\\\n>> $($text)\" -ForegroundColor Yellow\n}\n\nfunction Write-Info {\n    param([string]$text)\n    Write-Host \"   -> $($text)\" -ForegroundColor White\n}\n\nfunction Write-Success {\n    param([string]$text)\n    Write-Host \"\\\\n$($text)\" -ForegroundColor Green -BackgroundColor Black\n}\n\nfunction Write-Error {\n    param([string]$text)\n    Write-Host \"[ERROR] $($text)\" -ForegroundColor Red\n}\n\n# --- Main Logic ---\nClear-Host\nWrite-Header \"Fortuna Faucet Enhanced Launcher (PowerShell Edition)\"\n\n# 1. Check Backend Port\nWrite-Step \"Step 1: Checking backend port ($backendPort)...\"\n$backendConnection = Get-NetTCPConnection -LocalPort $backendPort -ErrorAction SilentlyContinue\nif ($backendConnection) {\n    Write-Error \"Port $backendPort is already in use. Please close the existing process.\"\n    exit 1\n} else {\n    Write-Info \"Port $backendPort is available.\"\n}\n\n# 2. Check Frontend Port\nWrite-Step \"Step 2: Checking frontend port ($frontendPort)...\"\n$frontendConnection = Get-NetTCPConnection -LocalPort $frontendPort -ErrorAction SilentlyContinue\nif ($frontendConnection) {\n    Write-Error \"Port $frontendPort is already in use. Please close the existing process.\"\n    exit 1\n} else {\n    Write-Info \"Port $frontendPort is available.\"\n}\n\n# 3. Launch Services\nWrite-Step \"Step 3: Launching services...\"\nWrite-Info \"Starting Backend in a new window...\"\nStart-Process wt -ArgumentList \"new-tab\", \"-d\", \".\", \"cmd\", \"/c\", \"title Fortuna Backend && .\\\\.venv\\\\Scripts\\\\activate.bat && cd $backendDir && uvicorn api:app --reload\"\n\nWrite-Info \"Starting Frontend in a new window...\"\nStart-Process wt -ArgumentList \"new-tab\", \"-d\", \"$frontendDir\", \"cmd\", \"/c\", \"title Fortuna Frontend && npm run dev\"\n\nWrite-Info \"Waiting 10 seconds for services to initialize...\"\nStart-Sleep -Seconds 10\n\n# 4. Launch Browser\nWrite-Step \"Step 4: Opening dashboard...\"\nStart-Process \"http://localhost:$frontendPort\"\nWrite-Info \"Browser launched at http://localhost:$frontendPort\"\n\nWrite-Success \"All services launched successfully!\"\n",
    "python_service/etl.py": "# python_service/etl.py\n# This module contains the ETL logic for the PostgreSQL data warehouse.\n# Restored based on the 'Code Archaeology Report'.\n\nimport os\nfrom typing import List\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\nfrom .models import Race\n\nclass PostgresETL:\n    \"\"\"Data Warehouse ETL\"\"\"\n    def __init__(self):\n        db_url = os.getenv(\"POSTGES_URL\", \"postgresql://user:password@localhost/fortuna_dw\")\n        self.engine = create_engine(db_url)\n\n    def process_and_load(self, analyzed_races: List[Race]):\n        valid_for_historical = []\n        quarantined = []\n        for race in analyzed_races:\n            errors = []\n            if not race.venue: errors.append(\"Missing venue\")\n            if race.race_number is None: errors.append(\"Missing race_number\")\n            if not errors:\n                valid_for_historical.append({\n                    \"race_id\": race.id,\n                    \"track_name\": race.venue,\n                    \"race_number\": race.race_number,\n                    \"post_time\": race.start_time,\n                    \"qualification_score\": race.qualification_score\n                })\n            else:\n                quarantined.append({\n                    \"race_id\": race.id,\n                    \"quarantine_reason\": \", \".join(errors),\n                    \"raw_data\": race.json()\n                })\n        if valid_for_historical:\n            pd.DataFrame(valid_for_historical).to_sql('historical_races', self.engine, if_exists='append', index=False)\n        if quarantined:\n            pd.DataFrame(quarantined).to_sql('quarantine_races', self.engine, if_exists='append', index=False)",
    "setup_wizard.py": "# setup_wizard.py\n\"\"\"\nInteractive configuration wizard for Fortuna Faucet.\nGuides users through initial setup and API key configuration.\n\"\"\"\n\nimport os\nfrom pathlib import Path\nimport getpass\nimport secrets\nfrom datetime import datetime\n\nclass SetupWizard:\n    def __init__(self):\n        self.config = {}\n        self.env_file = Path('.env')\n\n    def run(self):\n        print(\"\\n\" + \"=\"*60)\n        print(\"   Welcome to Fortuna Faucet Setup Wizard\")\n        print(\"=\"*60 + \"\\n\")\n\n        if self.env_file.exists():\n            overwrite = input(f\"\u26a0\ufe0f  Configuration file '{self.env_file}' already exists. Overwrite? (y/N): \").lower()\n            if overwrite != 'y':\n                print(\"\\nSetup cancelled.\")\n                return\n\n        print(\"\\n\ud83d\udccb Step 1: Core Configuration\")\n        print(\"-\" * 60)\n        self._configure_core()\n\n        print(\"\\n\ud83d\udd11 Step 2: Betfair API (Required for Live Monitoring)\")\n        print(\"-\" * 60)\n        self._configure_betfair()\n\n        self._write_config()\n        self._display_summary()\n\n    def _configure_core(self):\n        \"\"\"Configure essential settings\"\"\"\n        print(\"\\nGenerating a secure, private API key for communication between your services...\")\n        api_key = secrets.token_urlsafe(32)\n        self.config['API_KEY'] = api_key\n        print(f\"\u2705 API Key generated successfully.\")\n\n    def _configure_betfair(self):\n        \"\"\"Configure Betfair Exchange API\"\"\"\n        print(\"\\nBetfair Exchange provides live odds and is essential for the\")\n        print(\"LiveOddsMonitor feature. Get your API key at:\")\n        print(\"\ud83d\udc49 https://docs.developer.betfair.com/display/1smk3cen4v3lu3yomq5qye0ni\")\n\n        configure = input(\"\\nConfigure Betfair now? (Y/n): \").lower()\n        if configure != 'n':\n            self.config['BETFAIR_APP_KEY'] = input(\"App Key: \").strip()\n            self.config['BETFAIR_USERNAME'] = input(\"Username: \").strip()\n            self.config['BETFAIR_PASSWORD'] = getpass.getpass(\"Password: \").strip()\n            print(\"\u2705 Betfair configured\")\n        else:\n            self.config['BETFAIR_APP_KEY'] = \"\"\n            self.config['BETFAIR_USERNAME'] = \"\"\n            self.config['BETFAIR_PASSWORD'] = \"\"\n            print(\"\u23ed\ufe0f  Skipped - Live monitoring will be disabled\")\n\n    def _write_config(self):\n        \"\"\"Write configuration to .env file\"\"\"\n        with open(self.env_file, 'w') as f:\n            f.write(\"# Fortuna Faucet Configuration\\n\")\n            f.write(f\"# Generated by Setup Wizard on {datetime.now().isoformat()}\\n\\n\")\n\n            f.write(\"# --- Core Settings ---\\n\")\n            f.write(f\"API_KEY=\\\"{self.config['API_KEY']}\\\"\\n\\n\")\n\n            f.write(\"# --- Betfair Exchange ---\\n\")\n            f.write(f\"BETFAIR_APP_KEY=\\\"{self.config['BETFAIR_APP_KEY']}\\\"\\n\")\n            f.write(f\"BETFAIR_USERNAME=\\\"{self.config['BETFAIR_USERNAME']}\\\"\\n\")\n            f.write(f\"BETFAIR_PASSWORD=\\\"{self.config['BETFAIR_PASSWORD']}\\\"\\n\")\n\n    def _display_summary(self):\n        \"\"\"Display setup summary\"\"\"\n        print(\"\\n\" + \"=\"*60)\n        print(\"   \u2705 Setup Complete!\")\n        print(\"=\"*60)\n        print(f\"\\n\ud83d\udcc1 Configuration saved to '{self.env_file}'\")\n        print(\"\\n\ud83d\ude80 Next Steps:\")\n        print(\"   1. Run INSTALL_FORTUNA.bat (as Administrator) if you haven't already.\")\n        print(\"   2. Double-click the 'Launch Fortuna' shortcut on your desktop.\")\n        print(\"\\n\ud83d\udca1 Tip:\")\n        print(\"   - You can run this wizard again at any time to reconfigure your settings.\")\n        print(\"\\n\" + \"=\"*60 + \"\\n\")\n\nif __name__ == '__main__':\n    wizard = SetupWizard()\n    wizard.run()\n",
    "uninstall_service.bat": "@echo off\nREM Stops and removes the Fortuna Faucet Windows Service.\n\necho Uninstalling Fortuna Faucet Windows Service...\n\nREM Activate venv to ensure python command works as expected\ncall .venv\\Scripts\\activate.bat\n\nREM Stop and remove the service\npython windows_service.py stop\npython windows_service.py remove\n\necho.\necho Service stopped and uninstalled successfully!\npause\n",
    "windows_service.py": "# windows_service.py\nimport win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\nimport sys\nimport os\nimport subprocess\nfrom pathlib import Path\n\nclass FortunaBackendService(win32serviceutil.ServiceFramework):\n    _svc_name_ = \"FortunaFaucetBackend\"\n    _svc_display_name_ = \"Fortuna Faucet Racing Analysis Service\"\n    _svc_description_ = \"Background service for continuous racing data monitoring.\"\n\n    def __init__(self, args):\n        win32serviceutil.ServiceFramework.__init__(self, args)\n        self.stop_event = win32event.CreateEvent(None, 0, 0, None)\n        self.backend_process = None\n        socket.setdefaulttimeout(60)\n\n    def SvcStop(self):\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n        win32event.SetEvent(self.stop_event)\n        if self.backend_process:\n            self.backend_process.terminate()\n\n    def SvcDoRun(self):\n        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE, servicemanager.PYS_SERVICE_STARTED, (self._svc_name_, ''))\n        self.main()\n\n    def main(self):\n        install_dir = Path(__file__).parent.resolve()\n        venv_python = install_dir / \".venv\" / \"Scripts\" / \"python.exe\"\n        api_module_dir = install_dir / \"python_service\"\n\n        env = os.environ.copy()\n        env_file = install_dir / \".env\"\n        if env_file.exists():\n            with open(env_file) as f:\n                for line in f:\n                    if '=' in line and not line.startswith('#'):\n                        key, value = line.strip().split('=', 1)\n                        env[key] = value.strip('\\\"')\n\n        self.backend_process = subprocess.Popen(\n            [str(venv_python), \"-m\", \"uvicorn\", \"api:app\", \"--host\", \"127.0.0.1\", \"--port\", \"8000\"],\n            cwd=str(api_module_dir),\n            env=env\n        )\n\n        win32event.WaitForSingleObject(self.stop_event, win32event.INFINITE)\n\nif __name__ == '__main__':\n    if len(sys.argv) == 1:\n        servicemanager.Initialize()\n        servicemanager.PrepareToHostSingle(FortunaBackendService)\n        servicemanager.StartServiceCtrlDispatcher()\n    else:\n        win32serviceutil.HandleCommandLine(FortunaBackendService)\n"
}