{
    "python_service/adapters/__init__.py": "# python_service/adapters/__init__.py\n\nfrom .tvg_adapter import TVGAdapter\nfrom .betfair_adapter import BetfairAdapter\nfrom .betfair_greyhound_adapter import BetfairGreyhoundAdapter\nfrom .at_the_races_adapter import AtTheRacesAdapter\nfrom .sporting_life_adapter import SportingLifeAdapter\nfrom .timeform_adapter import TimeformAdapter\nfrom .racing_and_sports_adapter import RacingAndSportsAdapter\nfrom .harness_adapter import HarnessAdapter\nfrom .greyhound_adapter import GreyhoundAdapter\nfrom .racing_and_sports_greyhound_adapter import RacingAndSportsGreyhoundAdapter\nfrom .pointsbet_greyhound_adapter import PointsBetGreyhoundAdapter\nfrom .the_racing_api_adapter import TheRacingApiAdapter\nfrom .gbgb_api_adapter import GbgbApiAdapter\n\n# Define the public API for the adapters package, making it easy for the\n# orchestrator to discover and use them.\n__all__ = [\n    \"GbgbApiAdapter\",\n    \"TVGAdapter\",\n    \"BetfairAdapter\",\n    \"BetfairGreyhoundAdapter\",\n    \"RacingAndSportsGreyhoundAdapter\",\n    \"AtTheRacesAdapter\",\n    \"PointsBetGreyhoundAdapter\",\n    \"RacingAndSportsAdapter\",\n    \"SportingLifeAdapter\",\n    \"TimeformAdapter\",\n    \"HarnessAdapter\",\n    \"GreyhoundAdapter\",\n    \"TheRacingApiAdapter\",\n]",
    "python_service/adapters/at_the_races_adapter.py": "# python_service/adapters/at_the_races_adapter.py\n\nimport asyncio, structlog, httpx\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\nfrom bs4 import BeautifulSoup, Tag\nfrom decimal import Decimal\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner, OddsData\nfrom .utils import parse_odds\n\nlog = structlog.get_logger(__name__)\n\ndef _clean_text(text: Optional[str]) -> Optional[str]:\n    return ' '.join(text.strip().split()) if text else None\n\nclass AtTheRacesAdapter(BaseAdapter):\n    def __init__(self, config):\n        super().__init__(source_name=\"AtTheRaces\", base_url=\"https://www.attheraces.com\")\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        try:\n            race_links = await self._get_race_links(http_client)\n            tasks = [self._fetch_and_parse_race(link, http_client) for link in race_links]\n            races = [race for race in await asyncio.gather(*tasks) if race]\n            return self._format_response(races, start_time, is_success=True)\n        except Exception as e:\n            return self._format_response([], start_time, is_success=False, error_message=str(e))\n\n    async def _get_race_links(self, http_client: httpx.AsyncClient) -> List[str]:\n        response_html = await self.make_request(http_client, 'GET', '/racecards')\n        if not response_html: return []\n        soup = BeautifulSoup(response_html, \"html.parser\")\n        links = {a['href'] for a in soup.select(\"a.race-time-link[href]\")}\n        return [f\"{self.base_url}{link}\" for link in links]\n\n    async def _fetch_and_parse_race(self, url: str, http_client: httpx.AsyncClient) -> Optional[Race]:\n        try:\n            response_html = await self.make_request(http_client, 'GET', url)\n            if not response_html: return None\n            soup = BeautifulSoup(response_html, \"html.parser\")\n            header = soup.select_one(\"h1.heading-racecard-title\").get_text()\n            track_name, race_time = [p.strip() for p in header.split(\"|\")[:2]]\n            active_link = soup.select_one(\"a.race-time-link.active\")\n            race_number = active_link.find_parent(\"div\", \"races\").select(\"a.race-time-link\").index(active_link) + 1\n            start_time = datetime.strptime(f\"{datetime.now().date()} {race_time}\", \"%Y-%m-%d %H:%M\")\n            runners = [self._parse_runner(row) for row in soup.select(\"div.card-horse\")]\n            return Race(id=f\"atr_{track_name.replace(' ', '')}_{start_time.strftime('%Y%m%d')}_R{race_number}\", venue=track_name, race_number=race_number, start_time=start_time, runners=[r for r in runners if r], source=self.source_name)\n        except Exception: return None\n\n    def _parse_runner(self, row: Tag) -> Optional[Runner]:\n        try:\n            name = _clean_text(row.select_one(\"h3.horse-name a\").get_text())\n            num_str = _clean_text(row.select_one(\"span.horse-number\").get_text())\n            number = int(''.join(filter(str.isdigit, num_str)))\n            odds_str = _clean_text(row.select_one(\"button.best-odds\").get_text())\n            win_odds = Decimal(str(parse_odds(odds_str))) if odds_str else None\n            odds_data = {self.source_name: OddsData(win=win_odds, source=self.source_name, last_updated=datetime.now())} if win_odds and win_odds < 999 else {}\n            return Runner(number=number, name=name, odds=odds_data)\n        except: return None\n",
    "python_service/adapters/base.py": "#!/usr/bin/env python3\n# ==============================================================================\n#  Fortuna Faucet: Base Adapter (v2 - Hardened with Tenacity)\n# ==============================================================================\n\nimport httpx\nimport structlog\nfrom datetime import datetime\nfrom abc import ABC, abstractmethod\nfrom typing import Dict, Any, List, Optional\nfrom tenacity import retry, stop_after_attempt, wait_exponential, RetryError, AsyncRetrying\n\nlog = structlog.get_logger(__name__)\n\nclass BaseAdapter(ABC):\n    \"\"\"The resilient base class for all data source adapters.\"\"\"\n\n    def __init__(self, source_name: str, base_url: str, timeout: int = 20, max_retries: int = 3):\n        self.source_name = source_name\n        self.base_url = base_url\n        self.timeout = timeout\n        self.max_retries = max_retries\n\n    @abstractmethod\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        raise NotImplementedError\n\n    async def make_request(self, http_client: httpx.AsyncClient, method: str, url: str, **kwargs) -> Optional[Any]:\n        \"\"\"Makes a resilient HTTP request with automatic retries using Tenacity.\"\"\"\n        retryer = AsyncRetrying(\n            stop=stop_after_attempt(self.max_retries),\n            wait=wait_exponential(multiplier=1, min=2, max=10),\n            reraise=True\n        )\n        try:\n            async for attempt in retryer:\n                with attempt:\n                    try:\n                        full_url = url if url.startswith('http') else f\"{self.base_url}{url}\"\n                        log.info(f\"Requesting...\", adapter=self.source_name, method=method, url=full_url, attempt=attempt.retry_state.attempt_number)\n                        response = await http_client.request(method, full_url, timeout=self.timeout, **kwargs)\n                        response.raise_for_status()\n                        return response.json()\n                    except (httpx.RequestError, httpx.HTTPStatusError) as e:\n                        log.warning(\"Request failed, tenacity will retry...\", adapter=self.source_name, error=str(e))\n                        raise # Reraise to trigger tenacity's retry mechanism\n        except RetryError as e:\n            log.error(f\"Max retries exceeded for {self.source_name}. Aborting request.\", final_error=str(e))\n            return None # Return None on total failure\n\n    def get_status(self) -> Dict[str, Any]:\n        return {\"adapter_name\": self.source_name, \"status\": \"OK\"}\n\n    def _format_response(self, races: List, start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        \"\"\"Formats the adapter's response consistently.\"\"\"\n        fetch_duration = (datetime.now() - start_time).total_seconds()\n        return {\n            'races': races,\n            'source_info': {\n                'name': self.source_name,\n                'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races),\n                'error_message': error_message,\n                'fetch_duration': fetch_duration\n            }\n        }",
    "python_service/adapters/betfair_adapter.py": "# python_service/adapters/betfair_adapter.py\n\nimport httpx\nimport structlog\nimport re\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\nfrom decimal import Decimal\n\nfrom .base import BaseAdapter\nfrom .betfair_auth_mixin import BetfairAuthMixin\nfrom ..models import Race, Runner\n\nlog = structlog.get_logger(__name__)\n\nclass BetfairAdapter(BetfairAuthMixin, BaseAdapter):\n    def __init__(self, config):\n        super().__init__(source_name=\"BetfairExchange\", base_url=\"https://api.betfair.com/exchange/betting/rest/v1.0/\")\n        self.config = config\n        self.app_key = self.config.BETFAIR_APP_KEY\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        try:\n            await self._authenticate(http_client)\n            headers = {\"X-Application\": self.app_key, \"X-Authentication\": self.session_token, \"Content-Type\": \"application/json\"}\n            market_filter = {\"eventTypeIds\": [\"7\"], \"marketTypeCodes\": [\"WIN\"], \"marketStartTime\": {\"from\": f\"{date}T00:00:00Z\", \"to\": f\"{date}T23:59:59Z\"}}\n            market_catalogue = await self.make_request(http_client, 'POST', 'listMarketCatalogue/', headers=headers, json={\"filter\": market_filter, \"maxResults\": 1000, \"marketProjection\": [\"EVENT\", \"RUNNER_DESCRIPTION\"]})\n            if not market_catalogue:\n                return self._format_response([], start_time, is_success=True, error_message=\"No markets found.\")\n            all_races = [self._parse_race(market) for market in market_catalogue]\n            return self._format_response(all_races, start_time, is_success=True)\n        except Exception as e:\n            return self._format_response([], start_time, is_success=False, error_message=str(e))\n\n    def _parse_race(self, market: Dict[str, Any]) -> Race:\n        runners = [Runner(number=rd.get('sortPriority', 99), name=rd['runnerName'], selection_id=rd['selectionId']) for rd in market.get('runners', [])]\n        return Race(id=f\"bf_{market['marketId']}\", venue=market['event']['venue'], race_number=self._extract_race_number(market.get('marketName')), start_time=datetime.fromisoformat(market['marketStartTime'].replace('Z', '+00:00')), runners=runners, source=self.source_name)\n\n    def _extract_race_number(self, name: Optional[str]) -> int:\n        if not name: return 1\n        match = re.search(r'\\\\bR(\\\\d{1,2})\\\\b', name)\n        return int(match.group(1)) if match else 1\n\n    async def get_live_odds_for_market(self, market_id: str, http_client: httpx.AsyncClient) -> Dict[int, Decimal]:\n        \"\"\"TACTICAL method (Pillar 3). Gets live LTP for each runner in a market.\"\"\"\n        log.info(\"BetfairAdapter: Fetching live odds for market\", market_id=market_id)\n        try:\n            await self._authenticate(http_client)\n            headers = {\"X-Application\": self.app_key, \"X-Authentication\": self.session_token, \"Content-Type\": \"application/json\"}\n\n            params = {\"marketIds\": [market_id], \"priceProjection\": {\"priceData\": [\"EX_TRADED\"]}}\n            market_book = await self.make_request(\n                http_client,\n                'POST',\n                'listMarketBook/',\n                headers=headers,\n                json=params\n            )\n\n            live_odds = {}\n            if market_book and market_book[0].get('runners'):\n                for runner in market_book[0]['runners']:\n                    if runner.get('status') == 'ACTIVE' and runner.get('lastPriceTraded'):\n                        live_odds[runner['selectionId']] = Decimal(str(runner['lastPriceTraded']))\n            return live_odds\n        except httpx.HTTPError as e:\n            log.error(\"BetfairAdapter: Failed to get live odds\", market_id=market_id, error=str(e), exc_info=True)\n            return {} # Return empty dict on failure\n        except Exception as e:\n            log.error(\"BetfairAdapter: Unexpected error getting live odds\", market_id=market_id, error=str(e), exc_info=True)\n            return {} # Return empty dict on failure\n",
    "python_service/adapters/betfair_auth_mixin.py": "# python_service/adapters/betfair_auth_mixin.py\n\nimport httpx\nimport structlog\nfrom datetime import datetime, timedelta\nfrom typing import Optional\n\nlog = structlog.get_logger(__name__)\n\nclass BetfairAuthMixin:\n    \"\"\"Encapsulates Betfair authentication logic for reuse across adapters.\"\"\"\n    session_token: Optional[str] = None\n    token_expiry: Optional[datetime] = None\n\n    async def _authenticate(self, http_client: httpx.AsyncClient):\n        if self.session_token and self.token_expiry and self.token_expiry > (datetime.now() + timedelta(minutes=5)):\n            return\n        if not all([self.app_key, self.config.BETFAIR_USERNAME, self.config.BETFAIR_PASSWORD]):\n            raise ValueError(\"Betfair credentials not fully configured.\")\n\n        auth_url = \"https://identitysso.betfair.com/api/login\"\n        headers = {'X-Application': self.app_key, 'Content-Type': 'application/x-www-form-urlencoded'}\n        payload = f'username={self.config.BETFAIR_USERNAME}&password={self.config.BETFAIR_PASSWORD}'\n\n        log.info(f\"{self.__class__.__name__}: Authenticating...\")\n        response = await http_client.post(auth_url, headers=headers, content=payload, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n        if data.get('status') == 'SUCCESS':\n            self.session_token = data.get('token')\n            self.token_expiry = datetime.now() + timedelta(hours=3)\n        else:\n            raise ConnectionError(f\"Betfair authentication failed: {data.get('error')}\")",
    "python_service/adapters/betfair_greyhound_adapter.py": "# python_service/adapters/betfair_greyhound_adapter.py\n\nimport httpx\nimport structlog\nimport re\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\n\nfrom .base import BaseAdapter\nfrom .betfair_auth_mixin import BetfairAuthMixin\nfrom ..models import Race, Runner\n\nlog = structlog.get_logger(__name__)\n\nclass BetfairGreyhoundAdapter(BetfairAuthMixin, BaseAdapter):\n    def __init__(self, config):\n        super().__init__(source_name=\"BetfairGreyhound\", base_url=\"https://api.betfair.com/exchange/betting/rest/v1.0/\")\n        self.config = config\n        self.app_key = self.config.BETFAIR_APP_KEY\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        try:\n            await self._authenticate(http_client)\n            headers = {\"X-Application\": self.app_key, \"X-Authentication\": self.session_token, \"Content-Type\": \"application/json\"}\n            market_filter = {\"eventTypeIds\": [\"4339\"], \"marketTypeCodes\": [\"WIN\"], \"marketStartTime\": {\"from\": f\"{date}T00:00:00Z\", \"to\": f\"{date}T23:59:59Z\"}}\n            market_catalogue = await self.make_request(http_client, 'POST', 'listMarketCatalogue/', headers=headers, json={\"filter\": market_filter, \"maxResults\": 1000, \"marketProjection\": [\"EVENT\", \"RUNNER_DESCRIPTION\"]})\n            if not market_catalogue:\n                return self._format_response([], start_time, is_success=True, error_message=\"No markets found.\")\n            all_races = [self._parse_race(market) for market in market_catalogue]\n            return self._format_response(all_races, start_time, is_success=True)\n        except Exception as e:\n            return self._format_response([], start_time, is_success=False, error_message=str(e))\n\n    def _parse_race(self, market: Dict[str, Any]) -> Race:\n        runners = [Runner(number=rd.get('sortPriority', 99), name=rd['runnerName'], selection_id=rd['selectionId']) for rd in market.get('runners', [])]\n        return Race(id=f\"bfg_{market['marketId']}\", venue=market['event']['venue'], race_number=self._extract_race_number(market.get('marketName')), start_time=datetime.fromisoformat(market['marketStartTime'].replace('Z', '+00:00')), runners=runners, source=self.source_name)\n\n    def _extract_race_number(self, name: Optional[str]) -> int:\n        if not name: return 1\n        match = re.search(r'\\\\bR(\\\\d{1,2})\\\\b', name)\n        return int(match.group(1)) if match else 1",
    "python_service/adapters/brisnet_adapter.py": "#!/usr/bin/env python3\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass BrisnetAdapter(BaseAdapter):\n    \"\"\"Adapter for brisnet.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"Brisnet\", base_url=\"https://www.brisnet.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"BrisnetAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time, is_success=True, error_message=\"Not Implemented\")",
    "python_service/adapters/drf_adapter.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass DRFAdapter(BaseAdapter):\n    \"\"\"Adapter for scraping data from drf.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"DRF\", base_url=\"https://www.drf.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"DRFAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time, is_success=True, error_message=\"Not Implemented\")",
    "python_service/adapters/equibase_adapter.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass EquibaseAdapter(BaseAdapter):\n    \"\"\"Adapter for scraping data from equibase.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"Equibase\", base_url=\"https://www.equibase.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"EquibaseAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time, is_success=True, error_message=\"Not Implemented\")",
    "python_service/adapters/fanduel_adapter.py": "#!/usr/bin/env python3\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass FanDuelAdapter(BaseAdapter):\n    \"\"\"Adapter for racing.fanduel.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"FanDuel\", base_url=\"https://racing.fanduel.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"FanDuelAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time)\n    def _format_response(self, races: List[Race], start_time: datetime, **kwargs) -> Dict[str, Any]:\n        return {'races': [], 'source_info': {'name': self.source_name, 'status': 'SUCCESS', 'races_fetched': 0, 'error_message': 'Not Implemented', 'fetch_duration': (datetime.now() - start_time).total_seconds()}}",
    "python_service/adapters/gbgb_api_adapter.py": "# python_service/adapters/gbgb_api_adapter.py\n\nimport structlog\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\nimport httpx\nfrom decimal import Decimal\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner, OddsData\n\nlog = structlog.get_logger(__name__)\n\nclass GbgbApiAdapter(BaseAdapter):\n    \"\"\"Adapter for the undocumented JSON API for the Greyhound Board of Great Britain.\"\"\"\n\n    def __init__(self, config):\n        super().__init__(\n            source_name=\"GBGB\",\n            base_url=\"https://api.gbgb.org.uk/api/\"\n        )\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        try:\n            # The endpoint appears to be structured by date for all meetings\n            endpoint = f\"results/meeting/{date}\"\n            response_json = await self.make_request(http_client, 'GET', endpoint)\n\n            if not response_json:\n                return self._format_response([], start_time, is_success=True, error_message=\"No meetings found in API response.\")\n\n            all_races = self._parse_meetings(response_json)\n            return self._format_response(all_races, start_time, is_success=True)\n        except httpx.HTTPError as e:\n            log.error(f\"{self.source_name}: HTTP request failed after retries\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=\"API request failed after multiple retries.\")\n        except Exception as e:\n            log.error(f\"{self.source_name}: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=f\"An unexpected error occurred: {e}\")\n\n    def _parse_meetings(self, meetings_data: List[Dict[str, Any]]) -> List[Race]:\n        races = []\n        for meeting in meetings_data:\n            track_name = meeting.get('trackName')\n            for race_data in meeting.get('races', []):\n                try:\n                    races.append(self._parse_race(race_data, track_name))\n                except Exception as e:\n                    log.error(f\"{self.source_name}: Error parsing race\", race_id=race_data.get('raceId'), error=str(e))\n        return races\n\n    def _parse_race(self, race_data: Dict[str, Any], track_name: str) -> Race:\n        return Race(\n            id=f\"gbgb_{race_data['raceId']}\",\n            venue=track_name,\n            race_number=race_data['raceNumber'],\n            start_time=datetime.fromisoformat(race_data['raceTime'].replace('Z', '+00:00')),\n            runners=self._parse_runners(race_data.get('traps', [])),\n            source=self.source_name,\n            race_name=race_data.get('raceTitle'),\n            distance=f\"{race_data.get('raceDistance')}m\",\n        )\n\n    def _parse_runners(self, runners_data: List[Dict[str, Any]]) -> List[Runner]:\n        runners = []\n        for runner_data in runners_data:\n            try:\n                # The API provides SP as a fraction, e.g., '5/2'\n                odds_data = {}\n                sp = runner_data.get('sp')\n                if sp:\n                    from .utils import parse_odds # Local import to avoid circular dependency issues at module level\n                    win_odds = Decimal(str(parse_odds(sp)))\n                    if win_odds < 999:\n                        odds_data[self.source_name] = OddsData(win=win_odds, source=self.source_name, last_updated=datetime.now())\n\n                runners.append(Runner(\n                    number=runner_data['trapNumber'],\n                    name=runner_data['dogName'],\n                    odds=odds_data,\n                ))\n            except Exception as e:\n                log.error(f\"{self.source_name}: Error parsing runner\", runner_name=runner_data.get('dogName'), error=str(e))\n        return runners\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        return {\n            'races': races,\n            'source_info': {\n                'name': self.source_name,\n                'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races),\n                'error_message': error_message,\n                'fetch_duration': (datetime.now() - start_time).total_seconds()\n            }\n        }",
    "python_service/adapters/greyhound_adapter.py": "from datetime import datetime\nfrom typing import Any, Dict, List\nimport httpx\nfrom pydantic import ValidationError\nimport structlog\nfrom decimal import Decimal\n\nfrom ..models import Race, Runner, OddsData\nfrom .base import BaseAdapter\n\nlog = structlog.get_logger(__name__)\n\nclass GreyhoundAdapter(BaseAdapter):\n    \"\"\"Adapter for fetching Greyhound racing data. Activated by setting GREYHOUND_API_URL in .env\"\"\"\n\n    def __init__(self, config):\n        if not config.GREYHOUND_API_URL:\n            raise ValueError(\"GreyhoundAdapter cannot be initialized without GREYHOUND_API_URL.\")\n        super().__init__(\n            source_name=\"Greyhound Racing\",\n            base_url=config.GREYHOUND_API_URL\n        )\n        # Example for future use: self.api_key = config.GREYHOUND_API_KEY\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        \"\"\"Fetches upcoming greyhound races for the specified date.\"\"\"\n        start_time = datetime.now()\n        endpoint = f\"v1/cards/{date}\" # Using date parameter\n        try:\n            response_json = await self.make_request(http_client, 'GET', endpoint)\n            if not response_json or not response_json.get(\"cards\"):\n                log.warning(\"GreyhoundAdapter: No 'cards' in response or empty list.\")\n                return self._format_response([], start_time, is_success=True, error_message=\"No race cards found for date.\")\n\n            all_races = self._parse_cards(response_json[\"cards\"])\n            if not all_races:\n                return self._format_response([], start_time, is_success=True, error_message=\"Races found, but none could be parsed.\")\n\n            return self._format_response(all_races, start_time, is_success=True)\n        except httpx.HTTPError as e:\n            log.error(\"GreyhoundAdapter: HTTP request failed after retries\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=\"API request failed after multiple retries.\")\n        except Exception as e:\n            log.error(\"GreyhoundAdapter: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=f\"An unexpected error occurred: {str(e)}\")\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        \"\"\"Formats the adapter's response consistently.\"\"\"\n        fetch_duration = (datetime.now() - start_time).total_seconds()\n        return {\n            'races': races,\n            'source_info': {\n                'name': self.source_name,\n                'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races),\n                'error_message': error_message,\n                'fetch_duration': fetch_duration\n            }\n        }\n\n    def _parse_cards(self, cards: List[Dict[str, Any]]) -> List[Race]:\n        \"\"\"Parses a list of cards and their races into Race objects.\"\"\"\n        all_races = []\n        for card in cards:\n            venue = card.get(\"track_name\", \"Unknown Venue\")\n            races_data = card.get(\"races\", [])\n            for race_data in races_data:\n                try:\n                    if not race_data.get(\"runners\"):\n                        continue\n\n                    race = Race(\n                        id=f\"greyhound_{race_data['race_id']}\",\n                        venue=venue,\n                        race_number=race_data[\"race_number\"],\n                        start_time=datetime.fromtimestamp(race_data[\"start_time\"]),\n                        runners=self._parse_runners(race_data[\"runners\"]),\n                        source=self.source_name\n                    )\n                    all_races.append(race)\n                except (ValidationError, KeyError) as e:\n                    log.error(\n                        f\"GreyhoundAdapter: Error parsing race {race_data.get('race_id', 'N/A')}\",\n                        error=str(e),\n                        race_data=race_data\n                    )\n        return all_races\n\n    def _parse_runners(self, runners_data: List[Dict[str, Any]]) -> List[Runner]:\n        \"\"\"Parses a list of runner dictionaries into Runner objects.\"\"\"\n        runners = []\n        for runner_data in runners_data:\n            try:\n                if runner_data.get(\"scratched\", False):\n                    continue\n\n                odds_data = {}\n                # The directive's example was flawed. Correcting to a more realistic structure.\n                win_odds_val = runner_data.get(\"odds\", {}).get(\"win\")\n                if win_odds_val is not None:\n                    win_odds = Decimal(str(win_odds_val))\n                    if win_odds > 1:\n                        odds_data[self.source_name] = OddsData(\n                            win=win_odds,\n                            source=self.source_name,\n                            last_updated=datetime.now()\n                        )\n\n                runner = Runner(\n                    number=runner_data[\"trap_number\"],\n                    name=runner_data[\"dog_name\"],\n                    scratched=runner_data.get(\"scratched\", False),\n                    odds=odds_data\n                )\n                runners.append(runner)\n            except (KeyError, ValidationError) as e:\n                 log.error(\"GreyhoundAdapter: Error parsing runner\", error=str(e), runner_data=runner_data)\n        return runners",
    "python_service/adapters/harness_adapter.py": "from datetime import datetime\nfrom typing import Any, Dict, List\nimport httpx\nfrom pydantic import ValidationError, Field\nimport structlog\nfrom decimal import Decimal\n\nfrom ..models import Race, Runner, OddsData\nfrom .base import BaseAdapter\nfrom .utils import parse_odds\n\nlog = structlog.get_logger(__name__)\n\nclass HarnessAdapter(BaseAdapter):\n    \"\"\"Adapter for fetching Harness racing data from USTA.\"\"\"\n\n    def __init__(self, config):\n        super().__init__(\n            source_name=\"Harness Racing (USTA)\",\n            base_url=\"https://data.ustrotting.com/\"\n        )\n        # No API key required for this public endpoint\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        \"\"\"Fetches upcoming harness races for the specified date.\"\"\"\n        start_time = datetime.now()\n        endpoint = f\"api/racenet/racing/card/{date}\"\n        try:\n            response_json = await self.make_request(http_client, 'GET', endpoint)\n            if not response_json or \"meetings\" not in response_json:\n                log.warning(\"HarnessAdapter: No 'meetings' in response or empty response.\")\n                return self._format_response([], start_time, is_success=True, error_message=\"No meetings found for date.\")\n\n            all_races = self._parse_meetings(response_json[\"meetings\"])\n            return self._format_response(all_races, start_time, is_success=True)\n        except httpx.HTTPError as e:\n            log.error(\"HarnessAdapter: HTTP request failed after retries\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=\"API request failed after multiple retries.\")\n        except Exception as e:\n            log.error(\"HarnessAdapter: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=f\"An unexpected error occurred: {str(e)}\")\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        \"\"\"Formats the adapter's response consistently.\"\"\"\n        fetch_duration = (datetime.now() - start_time).total_seconds()\n        return {\n            'races': races,\n            'source_info': {\n                'name': self.source_name,\n                'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races),\n                'error_message': error_message,\n                'fetch_duration': fetch_duration\n            }\n        }\n\n    def _parse_meetings(self, meetings: List[Dict[str, Any]]) -> List[Race]:\n        \"\"\"Parses a list of meetings and their races into Race objects.\"\"\"\n        all_races = []\n        for meeting in meetings:\n            venue = meeting.get(\"trackName\", \"Unknown Venue\")\n            races_data = meeting.get(\"races\", [])\n            for race_data in races_data:\n                try:\n                    if not race_data.get(\"runners\"):\n                        continue\n\n                    race = Race(\n                        id=f\"usta_{race_data['raceId']}\", # Correct field: id\n                        venue=venue,\n                        race_number=race_data[\"raceNumber\"],\n                        start_time=datetime.fromisoformat(race_data[\"startTime\"].replace(\"Z\", \"+00:00\")),\n                        runners=self._parse_runners(race_data[\"runners\"]),\n                        source=self.source_name\n                    )\n                    all_races.append(race)\n                except (ValidationError, KeyError) as e:\n                    log.error(\n                        f\"HarnessAdapter: Error parsing race {race_data.get('raceId', 'N/A')}\",\n                        error=str(e),\n                        race_data=race_data\n                    )\n        return all_races\n\n    def _parse_runners(self, runners_data: List[Dict[str, Any]]) -> List[Runner]:\n        \"\"\"Parses a list of runner dictionaries into Runner objects.\"\"\"\n        runners = []\n        for runner_data in runners_data:\n            try:\n                # API provides number as 'postPosition'\n                runner_number = runner_data.get('postPosition')\n                if not runner_number:\n                    continue\n\n                # Adapt to the Runner model's odds structure\n                odds_data = {}\n                win_odds_str = runner_data.get(\"morningLineOdds\")\n                if win_odds_str:\n                    try:\n                        # The USTA API provides \"5\" for 5/1, which the original code handled as `Decimal('5') + 1`.\n                        # The central utility expects fractional format, so we ensure it exists.\n                        if '/' not in win_odds_str:\n                            win_odds_str = f\"{win_odds_str}/1\"\n\n                        parsed_float = parse_odds(win_odds_str)\n                        if parsed_float < 999.0:\n                            decimal_odds = Decimal(str(parsed_float))\n                            if decimal_odds > 1:\n                                odds_data[self.source_name] = OddsData(\n                                    win=decimal_odds,\n                                    source=self.source_name,\n                                    last_updated=datetime.now()\n                                )\n                    except (ValueError, TypeError):\n                         log.warning(\"Could not parse harness odds\", odds_str=win_odds_str)\n\n\n                runner = Runner(\n                    number=runner_number,\n                    name=runner_data[\"horseName\"],\n                    scratched=runner_data.get(\"scratched\", False),\n                    odds=odds_data\n                )\n                runners.append(runner)\n            except (KeyError, ValidationError) as e:\n                log.error(\"HarnessAdapter: Error parsing runner\", error=str(e), runner_data=runner_data)\n        return runners",
    "python_service/adapters/horseracingnation_adapter.py": "#!/usr/bin/env python3\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass HorseRacingNationAdapter(BaseAdapter):\n    \"\"\"Adapter for horseracingnation.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"HorseRacingNation\", base_url=\"https://www.horseracingnation.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"HorseRacingNationAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time)\n    def _format_response(self, races: List[Race], start_time: datetime, **kwargs) -> Dict[str, Any]:\n        return {'races': [], 'source_info': {'name': self.source_name, 'status': 'SUCCESS', 'races_fetched': 0, 'error_message': 'Not Implemented', 'fetch_duration': (datetime.now() - start_time).total_seconds()}}",
    "python_service/adapters/nyrabets_adapter.py": "#!/usr/bin/env python3\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass NYRABetsAdapter(BaseAdapter):\n    \"\"\"Adapter for nyrabets.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"NYRABets\", base_url=\"https://nyrabets.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"NYRABetsAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time, is_success=True, error_message=\"Not Implemented\")",
    "python_service/adapters/oddschecker_adapter.py": "#!/usr/bin/env python3\n# ==============================================================================\n#  Fortuna Faucet: Oddschecker Adapter (Canonized)\n# ==============================================================================\n# This adapter was sourced from the 'Live Odds Anthology' and has been modernized\n# to conform to the project's current BaseAdapter framework.\n# ==============================================================================\n\nimport httpx\nimport structlog\nimport asyncio\nfrom datetime import datetime\nfrom typing import List, Optional, Dict, Any\nfrom bs4 import BeautifulSoup, Tag\nfrom decimal import Decimal\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner, OddsData\nfrom .utils import parse_odds\n\nlog = structlog.get_logger(__name__)\n\nclass OddscheckerAdapter(BaseAdapter):\n    \"\"\"Adapter for scraping live horse racing odds from Oddschecker.\"\"\"\n\n    def __init__(self, config):\n        super().__init__(source_name=\"Oddschecker\", base_url=\"https://www.oddschecker.com\")\n        self.config = config\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        try:\n            meeting_links = await self._get_all_meeting_links(http_client)\n            if not meeting_links:\n                return self._format_response([], start_time, is_success=True, error_message=\"No meeting links found.\")\n\n            tasks = [self._fetch_single_meeting(link, http_client) for link in meeting_links]\n            races_from_all_meetings = await asyncio.gather(*tasks)\n\n            all_races = [race for sublist in races_from_all_meetings for race in sublist if race]\n            return self._format_response(all_races, start_time)\n        except Exception as e:\n            log.error(\"OddscheckerAdapter failed\", exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=str(e))\n\n    async def _get_all_meeting_links(self, http_client: httpx.AsyncClient) -> List[str]:\n        html = await self.make_request(http_client, 'GET', '/horse-racing')\n        soup = BeautifulSoup(html, \"html.parser\")\n        links = {self.base_url + a['href'] for a in soup.select('a.meeting-title[href]')}\n        return sorted(list(links))\n\n    async def _fetch_single_meeting(self, url: str, client: httpx.AsyncClient) -> List[Optional[Race]]:\n        try:\n            html = await self.make_request(client, 'GET', url.replace(self.base_url, ''))\n            soup = BeautifulSoup(html, \"html.parser\")\n            race_links = {self.base_url + a['href'] for a in soup.select('a.race-time-link[href]')}\n            tasks = [self._fetch_and_parse_race_card(link, client) for link in race_links]\n            return await asyncio.gather(*tasks)\n        except Exception as e:\n            log.error(\"Oddschecker failed to fetch meeting\", url=url, error=e)\n            return []\n\n    async def _fetch_and_parse_race_card(self, url: str, client: httpx.AsyncClient) -> Optional[Race]:\n        try:\n            html = await self.make_request(client, 'GET', url.replace(self.base_url, ''))\n            soup = BeautifulSoup(html, \"html.parser\")\n            return self._parse_race_page(soup, url)\n        except Exception as e:\n            log.error(\"Oddschecker failed to parse race card\", url=url, error=e)\n            return None\n\n    def _parse_race_page(self, soup: BeautifulSoup, url: str) -> Optional[Race]:\n        track_name = soup.select_one('h1.meeting-name').get_text(strip=True) if soup.select_one('h1.meeting-name') else 'Unknown'\n        race_time = soup.select_one('span.race-time').get_text(strip=True) if soup.select_one('span.race-time') else None\n        race_number = int(url.split('-')[-1]) if 'race-' in url else 0\n\n        runners = []\n        for row in soup.select(\"tr.race-card-row\"):\n            runner = self._parse_runner_row(row)\n            if runner: runners.append(runner)\n\n        if not runners: return None\n\n        return Race(\n            id=f\"oc_{track_name.lower().replace(' ', '')}_{datetime.now().strftime('%Y%m%d')}_r{race_number}\",\n            venue=track_name, race_number=race_number, start_time=datetime.now(), # Placeholder time\n            runners=runners\n        )\n\n    def _parse_runner_row(self, row: Tag) -> Optional[Runner]:\n        name_tag = row.select_one('span.selection-name')\n        name = name_tag.get_text(strip=True) if name_tag else None\n        odds_tag = row.select_one('span.bet-button-odds-desktop, span.best-price')\n        odds_str = odds_tag.get_text(strip=True) if odds_tag else None\n        number_tag = row.select_one('td.runner-number')\n        number = int(number_tag.get_text(strip=True)) if number_tag else 0\n\n        if not name or not odds_str: return None\n\n        odds_val = parse_odds(odds_str)\n        odds_dict = {}\n        if odds_val:\n            odds_dict[self.source_name] = OddsData(win=Decimal(str(odds_val)), source=self.source_name, last_updated=datetime.now())\n\n        return Runner(number=number, name=name, odds=odds_dict)\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        \"\"\"Formats the adapter's response consistently.\"\"\"\n        fetch_duration = (datetime.now() - start_time).total_seconds()\n        return {\n            'races': [r.model_dump() for r in races],\n            'source_info': {\n                'name': self.source_name,\n                'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races),\n                'error_message': error_message,\n                'fetch_duration': fetch_duration\n            }\n        }",
    "python_service/adapters/pointsbet_greyhound_adapter.py": "# python_service/adapters/pointsbet_greyhound_adapter.py\n\nimport structlog\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nfrom decimal import Decimal\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner, OddsData\n\nlog = structlog.get_logger(__name__)\n\nclass PointsBetGreyhoundAdapter(BaseAdapter):\n    \"\"\"TODO: This is a placeholder adapter. It will not be active until the correct sportId is found.\"\"\"\n    def __init__(self, config):\n        super().__init__(\n            source_name=\"PointsBet Greyhound\",\n            base_url=\"https://api.au.pointsbet.com\"\n        )\n        self.api_key = config.POINTSBET_API_KEY\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        # TODO: This adapter is a placeholder and is not registered in the engine.\n        # To enable, find the correct sportId for Greyhound Racing and register the adapter.\n        log.warning(\"PointsBetGreyhoundAdapter: This adapter is a non-functional placeholder.\")\n        return self._format_response([], start_time, is_success=True, error_message=\"Adapter is a placeholder.\")\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        fetch_duration = (datetime.now() - start_time).total_seconds()\n        return {\n            'races': races,\n            'source_info': {\n                'name': self.source_name,\n                'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races),\n                'error_message': error_message,\n                'fetch_duration': fetch_duration\n            }\n        }",
    "python_service/adapters/punters_adapter.py": "#!/usr/bin/env python3\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass PuntersAdapter(BaseAdapter):\n    \"\"\"Adapter for punters.com.au.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"Punters\", base_url=\"https://www.punters.com.au\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"PuntersAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time)\n    def _format_response(self, races: List[Race], start_time: datetime, **kwargs) -> Dict[str, Any]:\n        return {'races': [], 'source_info': {'name': self.source_name, 'status': 'SUCCESS', 'races_fetched': 0, 'error_message': 'Not Implemented', 'fetch_duration': (datetime.now() - start_time).total_seconds()}}",
    "python_service/adapters/racing_and_sports_adapter.py": "# python_service/adapters/racing_and_sports_adapter.py\n\nimport os\nimport structlog\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner\n\nlog = structlog.get_logger(__name__)\n\nclass RacingAndSportsAdapter(BaseAdapter):\n    def __init__(self, config):\n        super().__init__(\n            source_name=\"Racing and Sports\",\n            base_url=\"https://api.racingandsports.com.au/\"\n        )\n        self.api_token = config.RACING_AND_SPORTS_TOKEN\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        all_races: List[Race] = []\n        headers = {\"Authorization\": f\"Bearer {self.api_token}\", \"Accept\": \"application/json\"}\n\n        if not self.api_token:\n            return self._format_response([], start_time, is_success=False, error_message=\"ConfigurationError: Token not set\")\n\n        try:\n            meetings_url = \"v1/racing/meetings\"\n            params = {\"date\": date, \"jurisdiction\": \"AUS\"}\n            meetings_data = await self.make_request(http_client, 'GET', meetings_url, headers=headers, params=params)\n\n            if not meetings_data or not meetings_data.get('meetings'):\n                return self._format_response(all_races, start_time, is_success=True)\n\n            for meeting in meetings_data['meetings']:\n                for race_summary in meeting.get('races', []):\n                    try:\n                        parsed_race = self._parse_ras_race(meeting, race_summary)\n                        all_races.append(parsed_race)\n                    except Exception as e:\n                        log.error(\"RacingAndSportsAdapter: Failed to parse race\", meeting=meeting.get('venueName'), error=str(e), exc_info=True)\n\n            return self._format_response(all_races, start_time, is_success=True)\n        except httpx.HTTPError as e:\n            log.error(\"RacingAndSportsAdapter: HTTP request failed after retries\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=\"API request failed after multiple retries.\")\n        except Exception as e:\n            log.error(\"RacingAndSportsAdapter: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=f\"An unexpected error occurred: {e}\")\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        fetch_duration = (datetime.now() - start_time).total_seconds()\n        return {\n            'races': races,\n            'source_info': {\n                'name': self.source_name, 'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races), 'error_message': error_message,\n                'fetch_duration': fetch_duration\n            }\n        }\n\n    def _parse_ras_race(self, meeting: Dict[str, Any], race: Dict[str, Any]) -> Race:\n        runners = [Runner(number=rd.get('runnerNumber'), name=rd.get('horseName', 'Unknown'), scratched=rd.get('isScratched', False)) for rd in race.get('runners', [])]\n\n        return Race(\n            id=f\"ras_{race.get('raceId')}\",\n            venue=meeting.get('venueName', 'Unknown Venue'),\n            race_number=race.get('raceNumber'),\n            start_time=datetime.fromisoformat(race.get('startTime')),\n            runners=runners,\n            source=self.source_name\n        )",
    "python_service/adapters/racing_and_sports_greyhound_adapter.py": "# python_service/adapters/racing_and_sports_greyhound_adapter.py\n\nimport os\nimport structlog\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner\n\nlog = structlog.get_logger(__name__)\n\nclass RacingAndSportsGreyhoundAdapter(BaseAdapter):\n    def __init__(self, config):\n        super().__init__(\n            source_name=\"Racing and Sports Greyhound\",\n            base_url=\"https://api.racingandsports.com.au/\"\n        )\n        self.api_token = config.RACING_AND_SPORTS_TOKEN\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        all_races: List[Race] = []\n        headers = {\"Authorization\": f\"Bearer {self.api_token}\", \"Accept\": \"application/json\"}\n\n        if not self.api_token:\n            return self._format_response([], start_time, is_success=False, error_message=\"ConfigurationError: Token not set\")\n\n        try:\n            # HYPOTHESIS: The greyhound endpoint is parallel to the racing one.\n            meetings_url = \"v1/greyhound/meetings\"\n            params = {\"date\": date, \"jurisdiction\": \"AUS\"} # Jurisdiction may need to be adjusted\n            meetings_data = await self.make_request(http_client, 'GET', meetings_url, headers=headers, params=params)\n\n            if not meetings_data or not meetings_data.get('meetings'):\n                return self._format_response(all_races, start_time, is_success=True, error_message=\"No greyhound meetings found.\")\n\n            for meeting in meetings_data['meetings']:\n                for race_summary in meeting.get('races', []):\n                    try:\n                        parsed_race = self._parse_ras_race(meeting, race_summary)\n                        all_races.append(parsed_race)\n                    except Exception as e:\n                        log.error(\"RacingAndSportsGreyhoundAdapter: Failed to parse race\", meeting=meeting.get('venueName'), error=str(e), exc_info=True)\n\n            return self._format_response(all_races, start_time, is_success=True)\n        except httpx.HTTPError as e:\n            log.error(\"RacingAndSportsGreyhoundAdapter: HTTP request failed after retries\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=\"API request failed after multiple retries.\")\n        except Exception as e:\n            log.error(\"RacingAndSportsGreyhoundAdapter: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=f\"An unexpected error occurred: {e}\")\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        fetch_duration = (datetime.now() - start_time).total_seconds()\n        return {\n            'races': races,\n            'source_info': {\n                'name': self.source_name, 'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races), 'error_message': error_message,\n                'fetch_duration': fetch_duration\n            }\n        }\n\n    def _parse_ras_race(self, meeting: Dict[str, Any], race: Dict[str, Any]) -> Race:\n        runners = [Runner(number=rd.get('runnerNumber'), name=rd.get('horseName', 'Unknown'), scratched=rd.get('isScratched', False)) for rd in race.get('runners', [])]\n\n        return Race(\n            id=f\"rasg_{race.get('raceId')}\",\n            venue=meeting.get('venueName', 'Unknown Venue'),\n            race_number=race.get('raceNumber'),\n            start_time=datetime.fromisoformat(race.get('startTime')),\n            runners=runners,\n            source=self.source_name\n        )",
    "python_service/adapters/racingpost_adapter.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass RacingPostAdapter(BaseAdapter):\n    \"\"\"Adapter for scraping data from racingpost.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"RacingPost\", base_url=\"https://www.racingpost.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"RacingPostAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time)\n    def _format_response(self, races: List[Race], start_time: datetime, **kwargs) -> Dict[str, Any]:\n        return {'races': [], 'source_info': {'name': self.source_name, 'status': 'SUCCESS', 'races_fetched': 0, 'error_message': 'Not Implemented', 'fetch_duration': (datetime.now() - start_time).total_seconds()}}",
    "python_service/adapters/racingtv_adapter.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass RacingTVAdapter(BaseAdapter):\n    \"\"\"Adapter for scraping data from racingtv.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"RacingTV\", base_url=\"https://www.racingtv.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"RacingTVAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time)\n    def _format_response(self, races: List[Race], start_time: datetime, **kwargs) -> Dict[str, Any]:\n        return {'races': [], 'source_info': {'name': self.source_name, 'status': 'SUCCESS', 'races_fetched': 0, 'error_message': 'Not Implemented', 'fetch_duration': (datetime.now() - start_time).total_seconds()}}",
    "python_service/adapters/sporting_life_adapter.py": "# python_service/adapters/sporting_life_adapter.py\n\nimport asyncio, structlog, httpx\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\nfrom bs4 import BeautifulSoup, Tag\nfrom decimal import Decimal\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner, OddsData\nfrom .utils import parse_odds\n\nlog = structlog.get_logger(__name__)\n\ndef _clean_text(text: Optional[str]) -> Optional[str]:\n    return ' '.join(text.strip().split()) if text else None\n\nclass SportingLifeAdapter(BaseAdapter):\n    def __init__(self, config):\n        super().__init__(source_name=\"SportingLife\", base_url=\"https://www.sportinglife.com\")\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        try:\n            race_links = await self._get_race_links(http_client)\n            tasks = [self._fetch_and_parse_race(link, http_client) for link in race_links]\n            races = [race for race in await asyncio.gather(*tasks) if race]\n            return self._format_response(races, start_time, is_success=True)\n        except Exception as e:\n            return self._format_response([], start_time, is_success=False, error_message=str(e))\n\n    async def _get_race_links(self, http_client: httpx.AsyncClient) -> List[str]:\n        response_html = await self.make_request(http_client, 'GET', '/horse-racing/racecards')\n        if not response_html: return []\n        soup = BeautifulSoup(response_html, \"html.parser\")\n        links = {a['href'] for a in soup.select(\"a.hr-race-card-meeting__race-link[href]\")}\n        return [f\"{self.base_url}{link}\" for link in links]\n\n    async def _fetch_and_parse_race(self, url: str, http_client: httpx.AsyncClient) -> Optional[Race]:\n        try:\n            response_html = await self.make_request(http_client, 'GET', url)\n            if not response_html: return None\n            soup = BeautifulSoup(response_html, \"html.parser\")\n            track_name = _clean_text(soup.select_one(\"a.hr-race-header-course-name__link\").get_text())\n            race_time_str = _clean_text(soup.select_one(\"span.hr-race-header-time__time\").get_text())\n            start_time = datetime.strptime(f\"{datetime.now().date()} {race_time_str}\", \"%Y-%m-%d %H:%M\")\n            active_link = soup.select_one(\"a.hr-race-header-navigation-link--active\")\n            race_number = soup.select(\"a.hr-race-header-navigation-link\").index(active_link) + 1 if active_link else 1\n            runners = [self._parse_runner(row) for row in soup.select(\"div.hr-racing-runner-card\")]\n            return Race(id=f\"sl_{track_name.replace(' ', '')}_{start_time.strftime('%Y%m%d')}_R{race_number}\", venue=track_name, race_number=race_number, start_time=start_time, runners=[r for r in runners if r], source=self.source_name)\n        except Exception: return None\n\n    def _parse_runner(self, row: Tag) -> Optional[Runner]:\n        try:\n            name = _clean_text(row.select_one(\"a.hr-racing-runner-horse-name\").get_text())\n            num_str = _clean_text(row.select_one(\"span.hr-racing-runner-saddle-cloth-no\").get_text())\n            number = int(''.join(filter(str.isdigit, num_str)))\n            odds_str = _clean_text(row.select_one(\"span.hr-racing-runner-odds\").get_text())\n            win_odds = Decimal(str(parse_odds(odds_str))) if odds_str else None\n            odds_data = {self.source_name: OddsData(win=win_odds, source=self.source_name, last_updated=datetime.now())} if win_odds and win_odds < 999 else {}\n            return Runner(number=number, name=name, odds=odds_data)\n        except: return None\n",
    "python_service/adapters/tab_adapter.py": "#!/usr/bin/env python3\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass TabAdapter(BaseAdapter):\n    \"\"\"Adapter for tab.com.au.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"TAB\", base_url=\"https://www.tab.com.au\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"TabAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time)\n    def _format_response(self, races: List[Race], start_time: datetime, **kwargs) -> Dict[str, Any]:\n        return {'races': [], 'source_info': {'name': self.source_name, 'status': 'SUCCESS', 'races_fetched': 0, 'error_message': 'Not Implemented', 'fetch_duration': (datetime.now() - start_time).total_seconds()}}",
    "python_service/adapters/template_adapter.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# ==============================================================================\n#  Fortuna Faucet: Canonical Adapter Template\n# ==============================================================================\n# This file is the official template for creating new adapters. It is based on\n# the clean and simple design of the RacingAndSportsAdapter.\n# ==============================================================================\n\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner # Assuming standard models\n\nlog = structlog.get_logger(__name__)\n\nclass TemplateAdapter(BaseAdapter):\n    \"\"\"[IMPLEMENT ME] A brief description of the data source.\"\"\"\n\n    def __init__(self, config):\n        super().__init__(\n            source_name=\"[IMPLEMENT ME] Example Source\",\n            base_url=\"https://api.example.com\"\n        )\n        # self.api_key = config.EXAMPLE_API_KEY # Uncomment if needed\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        \"\"\"[IMPLEMENT ME] The core logic for fetching and parsing races.\"\"\"\n        start_time = datetime.now()\n        all_races: List[Race] = []\n\n        # --- Example Logic ---\n        # endpoint = f\"/v1/races/{date}\"\n        # headers = {\"X-Api-Key\": self.api_key}\n        # response_json = await self.make_request(http_client, 'GET', endpoint, headers=headers)\n        # if not response_json or 'data' not in response_json:\n        #     return self._format_response(all_races, start_time)\n        #\n        # for race_data in response_json['data']:\n        #     parsed_race = self._parse_race(race_data)\n        #     all_races.append(parsed_race)\n        # --- End Example ---\n\n        log.warning(\"TemplateAdapter.fetch_races is a stub and is not implemented.\")\n        return self._format_response(all_races, start_time)\n\n\n    def _parse_race(self, race_data: Dict[str, Any]) -> Race:\n        \"\"\"[IMPLEMENT ME] Logic to parse a single race from the source's data structure.\"\"\"\n        # Example:\n        # runners = self._parse_runners(race_data.get('runners', []))\n        # return Race(\n        #     id=f\"template_{race_data['id']}\",\n        #     venue=race_data['venue_name'],\n        #     race_number=race_data['race_number'],\n        #     start_time=datetime.fromisoformat(race_data['start_time']),\n        #     runners=runners,\n        #     source=self.source_name\n        # )\n        raise NotImplementedError(\"'_parse_race' is not implemented in TemplateAdapter.\")\n\n    def _parse_runners(self, runners_data: List[Dict[str, Any]]) -> List[Runner]:\n        \"\"\"[IMPLEMENT ME] Logic to parse a list of runners.\"\"\"\n        raise NotImplementedError(\"'_parse_runners' is not implemented in TemplateAdapter.\")",
    "python_service/adapters/the_racing_api_adapter.py": "# python_service/adapters/theracingapi_adapter.py\n\nimport structlog\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\nimport httpx\nfrom decimal import Decimal\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner, OddsData\n\nlog = structlog.get_logger(__name__)\n\nclass TheRacingApiAdapter(BaseAdapter):\n    \"\"\"Adapter for the high-value JSON-based The Racing API.\"\"\"\n\n    def __init__(self, config):\n        super().__init__(\n            source_name=\"TheRacingAPI\",\n            base_url=\"https://api.theracingapi.com/v1/\"\n        )\n        self.api_key = config.THE_RACING_API_KEY\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        if not self.api_key:\n            return self._format_response([], start_time, is_success=False, error_message=\"ConfigurationError: THE_RACING_API_KEY not set\")\n\n        try:\n            endpoint = f\"racecards?date={date}&course=all&region=gb,ire\"\n            headers = {\"Authorization\": f\"Bearer {self.api_key}\"}\n            response_json = await self.make_request(http_client, 'GET', endpoint, headers=headers)\n\n            if not response_json or not response_json.get('racecards'):\n                return self._format_response([], start_time, is_success=True, error_message=\"No racecards found in API response.\")\n\n            all_races = self._parse_races(response_json['racecards'])\n            return self._format_response(all_races, start_time, is_success=True)\n        except httpx.HTTPError as e:\n            log.error(f\"{self.source_name}: HTTP request failed after retries\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=\"API request failed after multiple retries.\")\n        except Exception as e:\n            log.error(f\"{self.source_name}: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=f\"An unexpected error occurred: {e}\")\n\n    def _parse_races(self, racecards: List[Dict[str, Any]]) -> List[Race]:\n        races = []\n        for race_data in racecards:\n            try:\n                start_time = datetime.fromisoformat(race_data['off_time'].replace('Z', '+00:00'))\n\n                race = Race(\n                    id=f\"tra_{race_data['race_id']}\",\n                    venue=race_data['course'],\n                    race_number=race_data['race_no'],\n                    start_time=start_time,\n                    runners=self._parse_runners(race_data.get('runners', [])),\n                    source=self.source_name,\n                    race_name=race_data.get('race_name'),\n                    distance=race_data.get('distance_f'),\n                )\n                races.append(race)\n            except Exception as e:\n                log.error(f\"{self.source_name}: Error parsing race\", race_id=race_data.get('race_id'), error=str(e))\n        return races\n\n    def _parse_runners(self, runners_data: List[Dict[str, Any]]) -> List[Runner]:\n        runners = []\n        for i, runner_data in enumerate(runners_data):\n            try:\n                odds_data = {}\n                if runner_data.get('odds'):\n                    win_odds = Decimal(str(runner_data['odds'][0]['odds_decimal']))\n                    odds_data[self.source_name] = OddsData(win=win_odds, source=self.source_name, last_updated=datetime.now())\n\n                runners.append(Runner(\n                    number=runner_data.get('number', i + 1),\n                    name=runner_data['horse'],\n                    odds=odds_data,\n                    jockey=runner_data.get('jockey'),\n                    trainer=runner_data.get('trainer'),\n                ))\n            except Exception as e:\n                log.error(f\"{self.source_name}: Error parsing runner\", runner_name=runner_data.get('horse'), error=str(e))\n        return runners\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool = True, error_message: str = None) -> Dict[str, Any]:\n        return {\n            'races': races,\n            'source_info': {\n                'name': self.source_name,\n                'status': 'SUCCESS' if is_success else 'FAILED',\n                'races_fetched': len(races),\n                'error_message': error_message,\n                'fetch_duration': (datetime.now() - start_time).total_seconds()\n            }\n        }",
    "python_service/adapters/timeform_adapter.py": "# python_service/adapters/timeform_adapter.py\n\nimport asyncio, structlog, httpx\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\nfrom bs4 import BeautifulSoup, Tag\nfrom decimal import Decimal\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner, OddsData\nfrom .utils import parse_odds\n\nlog = structlog.get_logger(__name__)\n\ndef _clean_text(text: Optional[str]) -> Optional[str]:\n    return ' '.join(text.strip().split()) if text else None\n\nclass TimeformAdapter(BaseAdapter):\n    def __init__(self, config):\n        super().__init__(source_name=\"Timeform\", base_url=\"https://www.timeform.com\")\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        try:\n            race_links = await self._get_race_links(http_client)\n            tasks = [self._fetch_and_parse_race(link, http_client) for link in race_links]\n            races = [race for race in await asyncio.gather(*tasks) if race]\n            return self._format_response(races, start_time, is_success=True)\n        except Exception as e:\n            return self._format_response([], start_time, is_success=False, error_message=str(e))\n\n    async def _get_race_links(self, http_client: httpx.AsyncClient) -> List[str]:\n        response_html = await self.make_request(http_client, 'GET', '/horse-racing/racecards')\n        if not response_html: return []\n        soup = BeautifulSoup(response_html, \"html.parser\")\n        links = {a['href'] for a in soup.select(\"a.rp-racecard-off-link[href]\")}\n        return [f\"{self.base_url}{link}\" for link in links]\n\n    async def _fetch_and_parse_race(self, url: str, http_client: httpx.AsyncClient) -> Optional[Race]:\n        try:\n            response_html = await self.make_request(http_client, 'GET', url)\n            if not response_html: return None\n            soup = BeautifulSoup(response_html, \"html.parser\")\n            track_name = _clean_text(soup.select_one(\"h1.rp-raceTimeCourseName_name\").get_text())\n            race_time_str = _clean_text(soup.select_one(\"span.rp-raceTimeCourseName_time\").get_text())\n            start_time = datetime.strptime(f\"{datetime.now().date()} {race_time_str}\", \"%Y-%m-%d %H:%M\")\n            all_times = [_clean_text(a.get_text()) for a in soup.select('a.rp-racecard-off-link')]\n            race_number = all_times.index(race_time_str) + 1 if race_time_str in all_times else 1\n            runners = [self._parse_runner(row) for row in soup.select(\"div.rp-horseTable_mainRow\")]\n            return Race(id=f\"tf_{track_name.replace(' ', '')}_{start_time.strftime('%Y%m%d')}_R{race_number}\", venue=track_name, race_number=race_number, start_time=start_time, runners=[r for r in runners if r], source=self.source_name)\n        except Exception: return None\n\n    def _parse_runner(self, row: Tag) -> Optional[Runner]:\n        try:\n            name = _clean_text(row.select_one(\"a.rp-horseTable_horse-name\").get_text())\n            num_str = _clean_text(row.select_one(\"span.rp-horseTable_horse-number\").get_text()).strip(\"()\")\n            number = int(''.join(filter(str.isdigit, num_str)))\n            odds_str = _clean_text(row.select_one(\"button.rp-bet-placer-btn__odds\").get_text())\n            win_odds = Decimal(str(parse_odds(odds_str))) if odds_str else None\n            odds_data = {self.source_name: OddsData(win=win_odds, source=self.source_name, last_updated=datetime.now())} if win_odds and win_odds < 999 else {}\n            return Runner(number=number, name=name, odds=odds_data)\n        except: return None\n\n    def _format_response(self, races: List[Race], start_time: datetime, is_success: bool, error_message: str = None) -> Dict[str, Any]:\n        return {'races': races, 'source_info': {'name': self.source_name, 'status': 'SUCCESS' if is_success else 'FAILED', 'races_fetched': len(races), 'error_message': error_message, 'fetch_duration': (datetime.now() - start_time).total_seconds()}}",
    "python_service/adapters/tvg_adapter.py": "# python_service/adapters/tvg_adapter.py\n\nimport asyncio\nimport structlog\nfrom datetime import datetime\nfrom typing import Dict, Any, List, Optional\nimport httpx\nfrom decimal import Decimal, InvalidOperation\n\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner, OddsData\nfrom .utils import parse_odds\n\nlog = structlog.get_logger(__name__)\n\ndef _parse_program_number(program_str: str) -> int:\n    \"\"\"Safely parses program numbers like '1A' into an integer.\"\"\"\n    return int(''.join(filter(str.isdigit, program_str))) if program_str else 99\n\nclass TVGAdapter(BaseAdapter):\n    def __init__(self, config):\n        super().__init__(\n            source_name=\"TVG\",\n            base_url=\"https://api.tvg.com/v3/\"\n        )\n        self.api_key = config.TVG_API_KEY\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        headers = {\"Accept\": \"application/json\", \"X-API-Key\": self.api_key}\n\n        if not self.api_key:\n            log.warning(\"TVGAdapter: TVG_API_KEY not set. Skipping.\")\n            return self._format_response([], start_time, is_success=False, error_message=\"ConfigurationError: TVG_API_KEY not set\")\n\n        try:\n            tracks_url = \"tracks\"\n            tracks_params = {\"date\": date, \"country\": \"US\"}\n            tracks_response = await self.make_request(http_client, 'GET', tracks_url, headers=headers, params=tracks_params)\n\n            if not tracks_response or 'tracks' not in tracks_response:\n                log.warning(\"TVG: No tracks found for the given date.\")\n                return self._format_response([], start_time, is_success=True)\n\n            # Create a list of tasks to fetch races for all tracks concurrently\n            tasks = [self._fetch_races_for_track(track, date, http_client, headers) for track in tracks_response['tracks']]\n            results_per_track = await asyncio.gather(*tasks, return_exceptions=True)\n\n            # Flatten the list of lists into a single list of races\n            all_races = []\n            for result in results_per_track:\n                if isinstance(result, list):\n                    all_races.extend(result)\n                elif isinstance(result, Exception):\n                    log.error(\"TVGAdapter: A track fetch task failed\", error=result)\n\n            return self._format_response(all_races, start_time, is_success=True)\n        except Exception as e:\n            log.error(\"TVGAdapter: An unexpected error occurred\", error=str(e), exc_info=True)\n            return self._format_response([], start_time, is_success=False, error_message=f\"An unexpected error occurred: {e}\")\n\n    async def _fetch_races_for_track(self, track: Dict[str, Any], date: str, http_client: httpx.AsyncClient, headers: Dict) -> List[Race]:\n        \"\"\"Fetches all race details for a single track concurrently.\"\"\"\n        track_races = []\n        track_code = track.get('code')\n        if not track_code: return []\n\n        try:\n            races_url = f\"tracks/{track_code}/races\"\n            races_params = {\"date\": date}\n            races_response = await self.make_request(http_client, 'GET', races_url, headers=headers, params=races_params)\n            if not races_response or 'races' not in races_response:\n                return []\n\n            # Create a list of tasks to fetch details for all races in this track concurrently\n            detail_tasks = []\n            for race_summary in races_response.get('races', []):\n                race_detail_url = f\"tracks/{track_code}/races/{race_summary['number']}\"\n                detail_tasks.append(self.make_request(http_client, 'GET', race_detail_url, headers=headers))\n            \n            race_details = await asyncio.gather(*detail_tasks, return_exceptions=True)\n\n            for detail in race_details:\n                if detail and not isinstance(detail, Exception):\n                    parsed_race = self._parse_tvg_race(track, detail)\n                    track_races.append(parsed_race)\n            return track_races\n        except Exception as e:\n            log.error(\"TVGAdapter: Failed to process track\", track_name=track.get('name'), error=str(e))\n            return [] # Return empty list for this track on failure\n\n    def _parse_tvg_race(self, track: Dict[str, Any], race_data: Dict[str, Any]) -> Race:\n        runners = []\n        for runner_data in race_data.get('runners', []):\n            if not runner_data.get('scratched'):\n                current_odds_str = runner_data.get('odds', {}).get('current') or runner_data.get('odds', {}).get('morningLine')\n                win_odds = self._parse_tvg_odds(current_odds_str)\n                odds_dict = {}\n                if win_odds:\n                    odds_dict[self.source_name] = OddsData(win=win_odds, source=self.source_name, last_updated=datetime.now())\n                runners.append(Runner(number=_parse_program_number(runner_data.get('programNumber')), name=runner_data.get('horseName', 'Unknown Runner'), scratched=False, odds=odds_dict))\n        race_id = f\"{track.get('code', 'UNK').lower()}_{race_data['postTime'].split('T')[0]}_R{race_data['number']}\"\n        return Race(id=race_id, venue=track.get('name', 'Unknown Venue'), race_number=race_data.get('number'), start_time=datetime.fromisoformat(race_data.get('postTime')), runners=runners, source=self.source_name)\n\n    def _parse_tvg_odds(self, odds_string: str) -> Optional[Decimal]:\n        if not odds_string or odds_string == \"SCR\": return None\n        try:\n            parsed_float = parse_odds(odds_string)\n            if parsed_float >= 999.0: return None\n            return Decimal(str(parsed_float))\n        except (ValueError, InvalidOperation):\n            log.warning(\"Could not convert parsed TVG odds to Decimal\", odds_str=odds_string)\n            return None",
    "python_service/adapters/twinspires_adapter.py": "#!/usr/bin/env python3\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass TwinSpiresAdapter(BaseAdapter):\n    \"\"\"Adapter for twinspires.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"TwinSpires\", base_url=\"https://www.twinspires.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"TwinSpiresAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time)\n    def _format_response(self, races: List[Race], start_time: datetime, **kwargs) -> Dict[str, Any]:\n        return {'races': [], 'source_info': {'name': self.source_name, 'status': 'SUCCESS', 'races_fetched': 0, 'error_message': 'Not Implemented', 'fetch_duration': (datetime.now() - start_time).total_seconds()}}",
    "python_service/adapters/universal_adapter.py": "import json\nimport httpx\nimport structlog\nfrom bs4 import BeautifulSoup\nfrom typing import Dict, Any, List\nfrom .base import BaseAdapter\nfrom ..models import Race, Runner # Assuming models are updated\n\nlog = structlog.get_logger(__name__)\n\nclass UniversalAdapter(BaseAdapter):\n    \"\"\"An adapter that executes logic from a declarative JSON definition file.\"\"\"\n\n    def __init__(self, config, definition_path: str):\n        with open(definition_path, 'r') as f:\n            self.definition = json.load(f)\n\n        super().__init__(\n            source_name=self.definition['adapter_name'],\n            base_url=self.definition['base_url']\n        )\n        self.config = config\n\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        # NOTE: This is a simplified proof-of-concept implementation.\n        # It does not handle all cases from the JSON definition.\n        log.info(f\"Executing Universal Adapter for {self.source_name}\")\n\n        # Step 1: Get Track Links (as defined in equibase_v2.json)\n        start_url = self.definition['steps'][0]['selector']\n        response = await self.make_request(http_client, 'GET', self.definition['start_url'])\n        soup = BeautifulSoup(response, 'html.parser')\n        track_links = [self.base_url + a['href'] for a in soup.select(self.definition['steps'][0]['selector'])]\n\n        all_races = []\n        for link in track_links:\n            try:\n                track_response = await self.make_request(http_client, 'GET', link.replace(self.base_url, ''))\n                track_soup = BeautifulSoup(track_response, 'html.parser')\n                race_containers = track_soup.select(self.definition['steps'][1]['list_selector'])\n\n                for container in race_containers:\n                    # Simplified parsing logic for this PoC\n                    track_name = container.select_one('div.track-name h1').text.strip()\n                    race_number = int(container.select_one('h3.race-number').text.strip().split()[-1])\n                    # ... further parsing would be implemented here ...\n                    # This PoC demonstrates the principle, not a full implementation.\n                    pass # Placeholder\n\n            except Exception as e:\n                log.error(\"Failed to process track link\", link=link, error=e)\n\n        # This is a placeholder return for the PoC\n        return {'races': [], 'source_info': {'name': self.source_name, 'status': 'SUCCESS', 'races_fetched': 0, 'error_message': 'PoC Complete', 'fetch_duration': 0.0}}",
    "python_service/adapters/utils.py": "# ==============================================================================\n# == Centralized Adapter Utilities\n# ==============================================================================\n# This module provides shared, battle-tested functions for all adapters to use,\n# ensuring consistency and adhering to the DRY principle.\n# ==============================================================================\n\nfrom typing import Union\n\ndef parse_odds(odds: Union[str, int, float]) -> float:\n    \"\"\"\n    Parses various odds formats (e.g., fractional '10/1', decimal 11.0)\n    into a standardized decimal float.\n\n    Returns a default high odds value on failure to prevent crashes.\n    \"\"\"\n    if isinstance(odds, (int, float)):\n        return float(odds)\n\n    if isinstance(odds, str):\n        try:\n            # Handle fractional odds (e.g., \"10/1\", \"5/2\")\n            if \"/\" in odds:\n                numerator, denominator = map(int, odds.split('/'))\n                if denominator == 0: return 999.0\n                return 1.0 + (numerator / denominator)\n\n            # Handle \"evens\"\n            if odds.lower() in ['evs', 'evens']:\n                return 2.0\n\n            # Handle simple decimal strings\n            return float(odds)\n        except (ValueError, TypeError):\n            # Return a high, but valid, number for unparseable odds\n            return 999.0\n\n    return 999.0",
    "python_service/adapters/xpressbet_adapter.py": "#!/usr/bin/env python3\n# This file was generated from the canonical adapter template.\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nimport httpx\nimport structlog\nfrom .base import BaseAdapter\nfrom ..models import Race\nlog = structlog.get_logger(__name__)\nclass XpressbetAdapter(BaseAdapter):\n    \"\"\"Adapter for xpressbet.com.\"\"\"\n    def __init__(self, config):\n        super().__init__(source_name=\"Xpressbet\", base_url=\"https://www.xpressbet.com\")\n    async def fetch_races(self, date: str, http_client: httpx.AsyncClient) -> Dict[str, Any]:\n        start_time = datetime.now()\n        log.warning(\"XpressbetAdapter.fetch_races is a stub.\")\n        return self._format_response([], start_time, is_success=True, error_message=\"Not Implemented\")"
}